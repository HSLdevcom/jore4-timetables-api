/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_journey.tables.daos


import fi.hsl.jore.jore4.jooq.AbstractSpringDAOImpl
import fi.hsl.jore.jore4.jooq.vehicle_journey.tables.VehicleJourney
import fi.hsl.jore.jore4.jooq.vehicle_journey.tables.records.VehicleJourneyRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.JSONB
import org.jooq.types.YearToSecond
import org.springframework.stereotype.Repository


/**
 * The planned movement of a public transport vehicle on a DAY TYPE from the
 * start point to the end point of a JOURNEY PATTERN on a specified ROUTE.
 * Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=3:1:1:831 
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class VehicleJourneyDao(configuration: Configuration?) : AbstractSpringDAOImpl<VehicleJourneyRecord, fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney, UUID>(VehicleJourney.VEHICLE_JOURNEY_, fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney::class.java, configuration) {

    /**
     * Create a new VehicleJourneyDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney): UUID? = o.vehicleJourneyId

    /**
     * Fetch records that have <code>vehicle_journey_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfVehicleJourneyId(lowerInclusive: UUID?, upperInclusive: UUID?): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetchRange(VehicleJourney.VEHICLE_JOURNEY_.VEHICLE_JOURNEY_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vehicle_journey_id IN (values)</code>
     */
    fun fetchByVehicleJourneyId(vararg values: UUID): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetch(VehicleJourney.VEHICLE_JOURNEY_.VEHICLE_JOURNEY_ID, *values)

    /**
     * Fetch a unique record that has <code>vehicle_journey_id = value</code>
     */
    fun fetchOneByVehicleJourneyId(value: UUID): fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney? = fetchOne(VehicleJourney.VEHICLE_JOURNEY_.VEHICLE_JOURNEY_ID, value)

    /**
     * Fetch records that have <code>journey_pattern_ref_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfJourneyPatternRefId(lowerInclusive: UUID, upperInclusive: UUID): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetchRange(VehicleJourney.VEHICLE_JOURNEY_.JOURNEY_PATTERN_REF_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>journey_pattern_ref_id IN (values)</code>
     */
    fun fetchByJourneyPatternRefId(vararg values: UUID): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetch(VehicleJourney.VEHICLE_JOURNEY_.JOURNEY_PATTERN_REF_ID, *values)

    /**
     * Fetch records that have <code>block_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfBlockId(lowerInclusive: UUID, upperInclusive: UUID): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetchRange(VehicleJourney.VEHICLE_JOURNEY_.BLOCK_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>block_id IN (values)</code>
     */
    fun fetchByBlockId(vararg values: UUID): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetch(VehicleJourney.VEHICLE_JOURNEY_.BLOCK_ID, *values)

    /**
     * Fetch records that have <code>journey_name_i18n BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfJourneyNameI18n(lowerInclusive: JSONB?, upperInclusive: JSONB?): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetchRange(VehicleJourney.VEHICLE_JOURNEY_.JOURNEY_NAME_I18N, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>journey_name_i18n IN (values)</code>
     */
    fun fetchByJourneyNameI18n(vararg values: JSONB): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetch(VehicleJourney.VEHICLE_JOURNEY_.JOURNEY_NAME_I18N, *values)

    /**
     * Fetch records that have <code>turnaround_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTurnaroundTime(lowerInclusive: YearToSecond?, upperInclusive: YearToSecond?): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetchRange(VehicleJourney.VEHICLE_JOURNEY_.TURNAROUND_TIME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>turnaround_time IN (values)</code>
     */
    fun fetchByTurnaroundTime(vararg values: YearToSecond): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetch(VehicleJourney.VEHICLE_JOURNEY_.TURNAROUND_TIME, *values)

    /**
     * Fetch records that have <code>layover_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLayoverTime(lowerInclusive: YearToSecond?, upperInclusive: YearToSecond?): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetchRange(VehicleJourney.VEHICLE_JOURNEY_.LAYOVER_TIME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>layover_time IN (values)</code>
     */
    fun fetchByLayoverTime(vararg values: YearToSecond): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetch(VehicleJourney.VEHICLE_JOURNEY_.LAYOVER_TIME, *values)

    /**
     * Fetch records that have <code>journey_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJourneyType(lowerInclusive: String?, upperInclusive: String?): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetchRange(VehicleJourney.VEHICLE_JOURNEY_.JOURNEY_TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>journey_type IN (values)</code>
     */
    fun fetchByJourneyType(vararg values: String): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetch(VehicleJourney.VEHICLE_JOURNEY_.JOURNEY_TYPE, *values)

    /**
     * Fetch records that have <code>displayed_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDisplayedName(lowerInclusive: String?, upperInclusive: String?): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetchRange(VehicleJourney.VEHICLE_JOURNEY_.DISPLAYED_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>displayed_name IN (values)</code>
     */
    fun fetchByDisplayedName(vararg values: String): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetch(VehicleJourney.VEHICLE_JOURNEY_.DISPLAYED_NAME, *values)

    /**
     * Fetch records that have <code>is_vehicle_type_mandatory BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfIsVehicleTypeMandatory(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetchRange(VehicleJourney.VEHICLE_JOURNEY_.IS_VEHICLE_TYPE_MANDATORY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>is_vehicle_type_mandatory IN
     * (values)</code>
     */
    fun fetchByIsVehicleTypeMandatory(vararg values: Boolean): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetch(VehicleJourney.VEHICLE_JOURNEY_.IS_VEHICLE_TYPE_MANDATORY, *values.toTypedArray())

    /**
     * Fetch records that have <code>is_backup_journey BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfIsBackupJourney(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetchRange(VehicleJourney.VEHICLE_JOURNEY_.IS_BACKUP_JOURNEY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>is_backup_journey IN (values)</code>
     */
    fun fetchByIsBackupJourney(vararg values: Boolean): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetch(VehicleJourney.VEHICLE_JOURNEY_.IS_BACKUP_JOURNEY, *values.toTypedArray())

    /**
     * Fetch records that have <code>is_extra_journey BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfIsExtraJourney(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetchRange(VehicleJourney.VEHICLE_JOURNEY_.IS_EXTRA_JOURNEY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>is_extra_journey IN (values)</code>
     */
    fun fetchByIsExtraJourney(vararg values: Boolean): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetch(VehicleJourney.VEHICLE_JOURNEY_.IS_EXTRA_JOURNEY, *values.toTypedArray())

    /**
     * Fetch records that have <code>contract_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfContractNumber(lowerInclusive: String, upperInclusive: String): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetchRange(VehicleJourney.VEHICLE_JOURNEY_.CONTRACT_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>contract_number IN (values)</code>
     */
    fun fetchByContractNumber(vararg values: String): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.VehicleJourney> = fetch(VehicleJourney.VEHICLE_JOURNEY_.CONTRACT_NUMBER, *values)
}
