/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.service_pattern.tables


import fi.hsl.jore.jore4.jooq.journey_pattern.tables.JourneyPatternRef
import fi.hsl.jore.jore4.jooq.service_pattern.ServicePattern
import fi.hsl.jore.jore4.jooq.service_pattern.keys.SCHEDULED_STOP_POINT_IN_JOURNEY_PATTERN_REF_PKEY
import fi.hsl.jore.jore4.jooq.service_pattern.keys.SCHEDULED_STOP_POINT_IN_JOURNEY_PATTERN_REF__SCHEDULED_STOP_POINT_IN_JOURNEY_PAT_JOURNEY_PATTERN_REF_ID_FKEY
import fi.hsl.jore.jore4.jooq.service_pattern.tables.records.ScheduledStopPointInJourneyPatternRefRecord

import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Reference the a SCHEDULED STOP POINT within a JOURNEY PATTERN. Transmodel:
 * https://www.transmodel-cen.eu/model/index.htm?goto=2:3:4:729 
 */
@Suppress("UNCHECKED_CAST")
open class ScheduledStopPointInJourneyPatternRef(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ScheduledStopPointInJourneyPatternRefRecord>?,
    aliased: Table<ScheduledStopPointInJourneyPatternRefRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ScheduledStopPointInJourneyPatternRefRecord>(
    alias,
    ServicePattern.SERVICE_PATTERN,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Reference the a SCHEDULED STOP POINT within a JOURNEY PATTERN. Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=2:3:4:729 "),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>service_pattern.scheduled_stop_point_in_journey_pattern_ref</code>
         */
        val SCHEDULED_STOP_POINT_IN_JOURNEY_PATTERN_REF: ScheduledStopPointInJourneyPatternRef = ScheduledStopPointInJourneyPatternRef()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ScheduledStopPointInJourneyPatternRefRecord> = ScheduledStopPointInJourneyPatternRefRecord::class.java

    /**
     * The column
     * <code>service_pattern.scheduled_stop_point_in_journey_pattern_ref.scheduled_stop_point_in_journey_pattern_ref_id</code>.
     */
    val SCHEDULED_STOP_POINT_IN_JOURNEY_PATTERN_REF_ID: TableField<ScheduledStopPointInJourneyPatternRefRecord, UUID?> = createField(DSL.name("scheduled_stop_point_in_journey_pattern_ref_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "")

    /**
     * The column
     * <code>service_pattern.scheduled_stop_point_in_journey_pattern_ref.journey_pattern_ref_id</code>.
     * JOURNEY PATTERN to which the SCHEDULED STOP POINT belongs
     */
    val JOURNEY_PATTERN_REF_ID: TableField<ScheduledStopPointInJourneyPatternRefRecord, UUID?> = createField(DSL.name("journey_pattern_ref_id"), SQLDataType.UUID.nullable(false), this, "JOURNEY PATTERN to which the SCHEDULED STOP POINT belongs")

    /**
     * The column
     * <code>service_pattern.scheduled_stop_point_in_journey_pattern_ref.scheduled_stop_point_label</code>.
     * The label of the SCHEDULED STOP POINT
     */
    val SCHEDULED_STOP_POINT_LABEL: TableField<ScheduledStopPointInJourneyPatternRefRecord, String?> = createField(DSL.name("scheduled_stop_point_label"), SQLDataType.CLOB.nullable(false), this, "The label of the SCHEDULED STOP POINT")

    /**
     * The column
     * <code>service_pattern.scheduled_stop_point_in_journey_pattern_ref.scheduled_stop_point_sequence</code>.
     * The order of the SCHEDULED STOP POINT within the JOURNEY PATTERN.
     */
    val SCHEDULED_STOP_POINT_SEQUENCE: TableField<ScheduledStopPointInJourneyPatternRefRecord, Int?> = createField(DSL.name("scheduled_stop_point_sequence"), SQLDataType.INTEGER.nullable(false), this, "The order of the SCHEDULED STOP POINT within the JOURNEY PATTERN.")

    /**
     * The column
     * <code>service_pattern.scheduled_stop_point_in_journey_pattern_ref.timing_place_label</code>.
     * The label of the timing place associated with the referenced scheduled
     * stop point in journey pattern
     */
    val TIMING_PLACE_LABEL: TableField<ScheduledStopPointInJourneyPatternRefRecord, String?> = createField(DSL.name("timing_place_label"), SQLDataType.CLOB, this, "The label of the timing place associated with the referenced scheduled stop point in journey pattern")

    private constructor(alias: Name, aliased: Table<ScheduledStopPointInJourneyPatternRefRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ScheduledStopPointInJourneyPatternRefRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased
     * <code>service_pattern.scheduled_stop_point_in_journey_pattern_ref</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>service_pattern.scheduled_stop_point_in_journey_pattern_ref</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a
     * <code>service_pattern.scheduled_stop_point_in_journey_pattern_ref</code>
     * table reference
     */
    constructor(): this(DSL.name("scheduled_stop_point_in_journey_pattern_ref"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ScheduledStopPointInJourneyPatternRefRecord>): this(Internal.createPathAlias(child, key), child, key, SCHEDULED_STOP_POINT_IN_JOURNEY_PATTERN_REF, null)
    override fun getSchema(): Schema? = if (aliased()) null else ServicePattern.SERVICE_PATTERN
    override fun getPrimaryKey(): UniqueKey<ScheduledStopPointInJourneyPatternRefRecord> = SCHEDULED_STOP_POINT_IN_JOURNEY_PATTERN_REF_PKEY
    override fun getReferences(): List<ForeignKey<ScheduledStopPointInJourneyPatternRefRecord, *>> = listOf(SCHEDULED_STOP_POINT_IN_JOURNEY_PATTERN_REF__SCHEDULED_STOP_POINT_IN_JOURNEY_PAT_JOURNEY_PATTERN_REF_ID_FKEY)

    private lateinit var _journeyPatternRef: JourneyPatternRef

    /**
     * Get the implicit join path to the
     * <code>journey_pattern.journey_pattern_ref</code> table.
     */
    fun journeyPatternRef(): JourneyPatternRef {
        if (!this::_journeyPatternRef.isInitialized)
            _journeyPatternRef = JourneyPatternRef(this, SCHEDULED_STOP_POINT_IN_JOURNEY_PATTERN_REF__SCHEDULED_STOP_POINT_IN_JOURNEY_PAT_JOURNEY_PATTERN_REF_ID_FKEY)

        return _journeyPatternRef;
    }

    val journeyPatternRef: JourneyPatternRef
        get(): JourneyPatternRef = journeyPatternRef()
    override fun `as`(alias: String): ScheduledStopPointInJourneyPatternRef = ScheduledStopPointInJourneyPatternRef(DSL.name(alias), this)
    override fun `as`(alias: Name): ScheduledStopPointInJourneyPatternRef = ScheduledStopPointInJourneyPatternRef(alias, this)
    override fun `as`(alias: Table<*>): ScheduledStopPointInJourneyPatternRef = ScheduledStopPointInJourneyPatternRef(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ScheduledStopPointInJourneyPatternRef = ScheduledStopPointInJourneyPatternRef(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ScheduledStopPointInJourneyPatternRef = ScheduledStopPointInJourneyPatternRef(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ScheduledStopPointInJourneyPatternRef = ScheduledStopPointInJourneyPatternRef(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<UUID?, UUID?, String?, Int?, String?> = super.fieldsRow() as Row5<UUID?, UUID?, String?, Int?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, UUID?, String?, Int?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, UUID?, String?, Int?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
