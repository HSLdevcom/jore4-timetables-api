/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.passing_times.tables.records


import fi.hsl.jore.jore4.jooq.passing_times.tables.TimetabledPassingTime

import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.YearToSecond


/**
 * Long-term planned time data concerning public transport vehicles passing a
 * particular POINT IN JOURNEY PATTERN on a specified VEHICLE JOURNEY for a
 * certain DAY TYPE. Transmodel:
 * https://www.transmodel-cen.eu/model/index.htm?goto=3:4:946 
 */
@Suppress("UNCHECKED_CAST")
open class TimetabledPassingTimeRecord private constructor() : UpdatableRecordImpl<TimetabledPassingTimeRecord>(TimetabledPassingTime.TIMETABLED_PASSING_TIME) {

    open var timetabledPassingTimeId: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var vehicleJourneyId: UUID
        set(value): Unit = set(1, value)
        get(): UUID = get(1) as UUID

    open var scheduledStopPointInJourneyPatternRefId: UUID
        set(value): Unit = set(2, value)
        get(): UUID = get(2) as UUID

    open var arrivalTime: YearToSecond?
        set(value): Unit = set(3, value)
        get(): YearToSecond? = get(3) as YearToSecond?

    open var departureTime: YearToSecond?
        set(value): Unit = set(4, value)
        get(): YearToSecond? = get(4) as YearToSecond?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised TimetabledPassingTimeRecord
     */
    constructor(timetabledPassingTimeId: UUID? = null, vehicleJourneyId: UUID, scheduledStopPointInJourneyPatternRefId: UUID, arrivalTime: YearToSecond? = null, departureTime: YearToSecond? = null): this() {
        this.timetabledPassingTimeId = timetabledPassingTimeId
        this.vehicleJourneyId = vehicleJourneyId
        this.scheduledStopPointInJourneyPatternRefId = scheduledStopPointInJourneyPatternRefId
        this.arrivalTime = arrivalTime
        this.departureTime = departureTime
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised TimetabledPassingTimeRecord
     */
    constructor(value: fi.hsl.jore.jore4.jooq.passing_times.tables.pojos.TimetabledPassingTime?): this() {
        if (value != null) {
            this.timetabledPassingTimeId = value.timetabledPassingTimeId
            this.vehicleJourneyId = value.vehicleJourneyId
            this.scheduledStopPointInJourneyPatternRefId = value.scheduledStopPointInJourneyPatternRefId
            this.arrivalTime = value.arrivalTime
            this.departureTime = value.departureTime
            resetChangedOnNotNull()
        }
    }
}
