/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_type.tables.daos


import fi.hsl.jore.jore4.jooq.AbstractSpringDAOImpl
import fi.hsl.jore.jore4.jooq.vehicle_type.tables.VehicleType
import fi.hsl.jore.jore4.jooq.vehicle_type.tables.records.VehicleTypeRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.JSONB
import org.springframework.stereotype.Repository


/**
 * The VEHICLE entity is used to describe the physical public transport vehicles
 * available for short-term planning of operations and daily assignment (in
 * contrast to logical vehicles considered for resource planning of operations
 * and daily assignment (in contrast to logical vehicles cplanning). Each
 * VEHICLE shall be classified as of a particular VEHICLE TYPE.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class VehicleTypeDao(configuration: Configuration?) : AbstractSpringDAOImpl<VehicleTypeRecord, fi.hsl.jore.jore4.jooq.vehicle_type.tables.pojos.VehicleType, UUID>(VehicleType.VEHICLE_TYPE_, fi.hsl.jore.jore4.jooq.vehicle_type.tables.pojos.VehicleType::class.java, configuration) {

    /**
     * Create a new VehicleTypeDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: fi.hsl.jore.jore4.jooq.vehicle_type.tables.pojos.VehicleType): UUID? = o.vehicleTypeId

    /**
     * Fetch records that have <code>vehicle_type_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVehicleTypeId(lowerInclusive: UUID?, upperInclusive: UUID?): List<fi.hsl.jore.jore4.jooq.vehicle_type.tables.pojos.VehicleType> = fetchRange(VehicleType.VEHICLE_TYPE_.VEHICLE_TYPE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vehicle_type_id IN (values)</code>
     */
    fun fetchByVehicleTypeId(vararg values: UUID): List<fi.hsl.jore.jore4.jooq.vehicle_type.tables.pojos.VehicleType> = fetch(VehicleType.VEHICLE_TYPE_.VEHICLE_TYPE_ID, *values)

    /**
     * Fetch a unique record that has <code>vehicle_type_id = value</code>
     */
    fun fetchOneByVehicleTypeId(value: UUID): fi.hsl.jore.jore4.jooq.vehicle_type.tables.pojos.VehicleType? = fetchOne(VehicleType.VEHICLE_TYPE_.VEHICLE_TYPE_ID, value)

    /**
     * Fetch records that have <code>label BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLabel(lowerInclusive: String, upperInclusive: String): List<fi.hsl.jore.jore4.jooq.vehicle_type.tables.pojos.VehicleType> = fetchRange(VehicleType.VEHICLE_TYPE_.LABEL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>label IN (values)</code>
     */
    fun fetchByLabel(vararg values: String): List<fi.hsl.jore.jore4.jooq.vehicle_type.tables.pojos.VehicleType> = fetch(VehicleType.VEHICLE_TYPE_.LABEL, *values)

    /**
     * Fetch records that have <code>description_i18n BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDescriptionI18n(lowerInclusive: JSONB?, upperInclusive: JSONB?): List<fi.hsl.jore.jore4.jooq.vehicle_type.tables.pojos.VehicleType> = fetchRange(VehicleType.VEHICLE_TYPE_.DESCRIPTION_I18N, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description_i18n IN (values)</code>
     */
    fun fetchByDescriptionI18n(vararg values: JSONB): List<fi.hsl.jore.jore4.jooq.vehicle_type.tables.pojos.VehicleType> = fetch(VehicleType.VEHICLE_TYPE_.DESCRIPTION_I18N, *values)

    /**
     * Fetch records that have <code>hsl_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfHslId(lowerInclusive: Short, upperInclusive: Short): List<fi.hsl.jore.jore4.jooq.vehicle_type.tables.pojos.VehicleType> = fetchRange(VehicleType.VEHICLE_TYPE_.HSL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>hsl_id IN (values)</code>
     */
    fun fetchByHslId(vararg values: Short): List<fi.hsl.jore.jore4.jooq.vehicle_type.tables.pojos.VehicleType> = fetch(VehicleType.VEHICLE_TYPE_.HSL_ID, *values.toTypedArray())
}
