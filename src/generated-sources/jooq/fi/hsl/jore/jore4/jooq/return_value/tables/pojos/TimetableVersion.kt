/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.return_value.tables.pojos


import java.io.Serializable
import java.time.LocalDate
import java.util.UUID


/**
 * This return value is used for functions that determine what timetable
 * versions are in effect. In effect will be true for all the timetable version
 * rows that
 * are valid on given observation day and are the highest priority of that day
 * type. As an example if we have:
 * Saturday Standard priority valid for 1.1.2023 - 30.6.2023
 * Saturday Temporary priority valid for 1.5.2023 - 31.5.2023
 * Saturday Special priority valid for 20.5.2023 - 20.5.2023
 * 
 * If we check the timetable versions for the date 1.2.2023, for Saturday we
 * only get the Standard priority, beacuse it is the only one valid on that
 * time. So that 
 * row would have in_effect = true. 
 * If we check the timetable versions for the date 1.5.2023, for Saturday we
 * would get the Standard and the Temporary priority for this date, as they are
 * both valid.
 * But only the higher priority is in effect on this date. So the Saturday
 * Temporary priority would have in_effect = true, and the Saturday Standard
 * priority would 
 * have in_effect = false.
 * If we check the timetable versions for the date 20.5.2023, for Saturday we
 * have all three valid, but only one can be in_effect, and that would be the
 * Special 
 * priority in this case.

 */
@Suppress("UNCHECKED_CAST")
data class TimetableVersion(
    var vehicleScheduleFrameId: UUID? = null,
    var substituteOperatingDayByLineTypeId: UUID? = null,
    var validityStart: LocalDate,
    var validityEnd: LocalDate,
    var priority: Int,
    var inEffect: Boolean,
    var dayTypeId: UUID
): Serializable {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: TimetableVersion = other as TimetableVersion
        if (this.vehicleScheduleFrameId == null) {
            if (o.vehicleScheduleFrameId != null)
                return false
        }
        else if (this.vehicleScheduleFrameId != o.vehicleScheduleFrameId)
            return false
        if (this.substituteOperatingDayByLineTypeId == null) {
            if (o.substituteOperatingDayByLineTypeId != null)
                return false
        }
        else if (this.substituteOperatingDayByLineTypeId != o.substituteOperatingDayByLineTypeId)
            return false
        if (this.validityStart != o.validityStart)
            return false
        if (this.validityEnd != o.validityEnd)
            return false
        if (this.priority != o.priority)
            return false
        if (this.inEffect != o.inEffect)
            return false
        if (this.dayTypeId != o.dayTypeId)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.vehicleScheduleFrameId == null) 0 else this.vehicleScheduleFrameId.hashCode())
        result = prime * result + (if (this.substituteOperatingDayByLineTypeId == null) 0 else this.substituteOperatingDayByLineTypeId.hashCode())
        result = prime * result + this.validityStart.hashCode()
        result = prime * result + this.validityEnd.hashCode()
        result = prime * result + this.priority.hashCode()
        result = prime * result + this.inEffect.hashCode()
        result = prime * result + this.dayTypeId.hashCode()
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("TimetableVersion (")

        sb.append(vehicleScheduleFrameId)
        sb.append(", ").append(substituteOperatingDayByLineTypeId)
        sb.append(", ").append(validityStart)
        sb.append(", ").append(validityEnd)
        sb.append(", ").append(priority)
        sb.append(", ").append(inEffect)
        sb.append(", ").append(dayTypeId)

        sb.append(")")
        return sb.toString()
    }
}
