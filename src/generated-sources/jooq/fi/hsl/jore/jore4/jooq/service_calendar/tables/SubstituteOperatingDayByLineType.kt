/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.service_calendar.tables


import fi.hsl.jore.jore4.jooq.route.tables.TypeOfLine.TypeOfLinePath
import fi.hsl.jore.jore4.jooq.service_calendar.ServiceCalendar
import fi.hsl.jore.jore4.jooq.service_calendar.keys.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE_PKEY
import fi.hsl.jore.jore4.jooq.service_calendar.keys.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE__SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE_SUBSTITUTE_PERIOD_FKEY
import fi.hsl.jore.jore4.jooq.service_calendar.keys.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE__SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE_TYPE_OF_LINE_FKEY
import fi.hsl.jore.jore4.jooq.service_calendar.tables.SubstituteOperatingPeriod.SubstituteOperatingPeriodPath
import fi.hsl.jore.jore4.jooq.service_calendar.tables.records.SubstituteOperatingDayByLineTypeRecord

import java.time.LocalDate
import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.YearToSecond


/**
 * Models substitute public transit as (1) a reference day or (2) indicating
 * that public transit does not occur on certain date. Substitute operating days
 * are always bound to a type of line.
 */
@Suppress("UNCHECKED_CAST")
open class SubstituteOperatingDayByLineType(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, SubstituteOperatingDayByLineTypeRecord>?,
    parentPath: InverseForeignKey<out Record, SubstituteOperatingDayByLineTypeRecord>?,
    aliased: Table<SubstituteOperatingDayByLineTypeRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<SubstituteOperatingDayByLineTypeRecord>(
    alias,
    ServiceCalendar.SERVICE_CALENDAR,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("Models substitute public transit as (1) a reference day or (2) indicating that public transit does not occur on certain date. Substitute operating days are always bound to a type of line."),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>service_calendar.substitute_operating_day_by_line_type</code>
         */
        val SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE: SubstituteOperatingDayByLineType = SubstituteOperatingDayByLineType()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SubstituteOperatingDayByLineTypeRecord> = SubstituteOperatingDayByLineTypeRecord::class.java

    /**
     * The column
     * <code>service_calendar.substitute_operating_day_by_line_type.substitute_operating_day_by_line_type_id</code>.
     */
    val SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE_ID: TableField<SubstituteOperatingDayByLineTypeRecord, UUID?> = createField(DSL.name("substitute_operating_day_by_line_type_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "")

    /**
     * The column
     * <code>service_calendar.substitute_operating_day_by_line_type.type_of_line</code>.
     * The type of line this substitute operating day is bound to.
     */
    val TYPE_OF_LINE: TableField<SubstituteOperatingDayByLineTypeRecord, String?> = createField(DSL.name("type_of_line"), SQLDataType.CLOB.nullable(false), this, "The type of line this substitute operating day is bound to.")

    /**
     * The column
     * <code>service_calendar.substitute_operating_day_by_line_type.superseded_date</code>.
     * The date of operating day being superseded.
     */
    val SUPERSEDED_DATE: TableField<SubstituteOperatingDayByLineTypeRecord, LocalDate?> = createField(DSL.name("superseded_date"), SQLDataType.LOCALDATE.nullable(false), this, "The date of operating day being superseded.")

    /**
     * The column
     * <code>service_calendar.substitute_operating_day_by_line_type.substitute_day_of_week</code>.
     * The ISO day of week (1=Monday, ... , 7=Sunday) of the day type used as
     * the basis for operating day substitution. A NULL value indicates that
     * there is no public transit at all, i.e. no vehicle journeys are operated
     * within the given time period.
     */
    val SUBSTITUTE_DAY_OF_WEEK: TableField<SubstituteOperatingDayByLineTypeRecord, Int?> = createField(DSL.name("substitute_day_of_week"), SQLDataType.INTEGER, this, "The ISO day of week (1=Monday, ... , 7=Sunday) of the day type used as the basis for operating day substitution. A NULL value indicates that there is no public transit at all, i.e. no vehicle journeys are operated within the given time period.")

    /**
     * The column
     * <code>service_calendar.substitute_operating_day_by_line_type.begin_time</code>.
     * The time from which the substituting public transit comes into effect. If
     * NULL, the substitution is in effect from the start of the operating day.
     * When substitute_day_of_week is not NULL (reference day case), vehicle
     * journeys prior to this time are not operated. When substitute_day_of_week
     * is NULL (no traffic case), the vehicle journeys before this time are
     * operated as usual.
     */
    val BEGIN_TIME: TableField<SubstituteOperatingDayByLineTypeRecord, YearToSecond?> = createField(DSL.name("begin_time"), SQLDataType.INTERVAL, this, "The time from which the substituting public transit comes into effect. If NULL, the substitution is in effect from the start of the operating day. When substitute_day_of_week is not NULL (reference day case), vehicle journeys prior to this time are not operated. When substitute_day_of_week is NULL (no traffic case), the vehicle journeys before this time are operated as usual.")

    /**
     * The column
     * <code>service_calendar.substitute_operating_day_by_line_type.end_time</code>.
     * The time (exclusive) until which the substituting public transit is
     * valid. If NULL, the substitution is in effect until the end of the
     * operating day. When substitute_day_of_week is not NULL (reference day
     * case), vehicle journeys starting from this time are not operated. When
     * substitute_day_of_week is NULL (no traffic case), the vehicle journeys
     * starting from this time are operated as usual.
     */
    val END_TIME: TableField<SubstituteOperatingDayByLineTypeRecord, YearToSecond?> = createField(DSL.name("end_time"), SQLDataType.INTERVAL, this, "The time (exclusive) until which the substituting public transit is valid. If NULL, the substitution is in effect until the end of the operating day. When substitute_day_of_week is not NULL (reference day case), vehicle journeys starting from this time are not operated. When substitute_day_of_week is NULL (no traffic case), the vehicle journeys starting from this time are operated as usual.")

    /**
     * The column
     * <code>service_calendar.substitute_operating_day_by_line_type.timezone</code>.
     */
    val TIMEZONE: TableField<SubstituteOperatingDayByLineTypeRecord, String?> = createField(DSL.name("timezone"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("internal_utils.const_default_timezone()"), SQLDataType.CLOB)), this, "")

    /**
     * The column
     * <code>service_calendar.substitute_operating_day_by_line_type.substitute_operating_period_id</code>.
     * The id of the substitute operating period
     */
    val SUBSTITUTE_OPERATING_PERIOD_ID: TableField<SubstituteOperatingDayByLineTypeRecord, UUID?> = createField(DSL.name("substitute_operating_period_id"), SQLDataType.UUID.nullable(false), this, "The id of the substitute operating period")

    /**
     * The column
     * <code>service_calendar.substitute_operating_day_by_line_type.created_at</code>.
     */
    val CREATED_AT: TableField<SubstituteOperatingDayByLineTypeRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<SubstituteOperatingDayByLineTypeRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<SubstituteOperatingDayByLineTypeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<SubstituteOperatingDayByLineTypeRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased
     * <code>service_calendar.substitute_operating_day_by_line_type</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>service_calendar.substitute_operating_day_by_line_type</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a
     * <code>service_calendar.substitute_operating_day_by_line_type</code> table
     * reference
     */
    constructor(): this(DSL.name("substitute_operating_day_by_line_type"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, SubstituteOperatingDayByLineTypeRecord>?, parentPath: InverseForeignKey<out Record, SubstituteOperatingDayByLineTypeRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class SubstituteOperatingDayByLineTypePath : SubstituteOperatingDayByLineType, Path<SubstituteOperatingDayByLineTypeRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, SubstituteOperatingDayByLineTypeRecord>?, parentPath: InverseForeignKey<out Record, SubstituteOperatingDayByLineTypeRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<SubstituteOperatingDayByLineTypeRecord>): super(alias, aliased)
        override fun `as`(alias: String): SubstituteOperatingDayByLineTypePath = SubstituteOperatingDayByLineTypePath(DSL.name(alias), this)
        override fun `as`(alias: Name): SubstituteOperatingDayByLineTypePath = SubstituteOperatingDayByLineTypePath(alias, this)
        override fun `as`(alias: Table<*>): SubstituteOperatingDayByLineTypePath = SubstituteOperatingDayByLineTypePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else ServiceCalendar.SERVICE_CALENDAR
    override fun getPrimaryKey(): UniqueKey<SubstituteOperatingDayByLineTypeRecord> = SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE_PKEY
    override fun getReferences(): List<ForeignKey<SubstituteOperatingDayByLineTypeRecord, *>> = listOf(SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE__SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE_TYPE_OF_LINE_FKEY, SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE__SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE_SUBSTITUTE_PERIOD_FKEY)

    private lateinit var _typeOfLine: TypeOfLinePath

    /**
     * Get the implicit join path to the <code>route.type_of_line</code> table.
     */
    fun typeOfLine(): TypeOfLinePath {
        if (!this::_typeOfLine.isInitialized)
            _typeOfLine = TypeOfLinePath(this, SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE__SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE_TYPE_OF_LINE_FKEY, null)

        return _typeOfLine;
    }

    val typeOfLine: TypeOfLinePath
        get(): TypeOfLinePath = typeOfLine()

    private lateinit var _substituteOperatingPeriod: SubstituteOperatingPeriodPath

    /**
     * Get the implicit join path to the
     * <code>service_calendar.substitute_operating_period</code> table.
     */
    fun substituteOperatingPeriod(): SubstituteOperatingPeriodPath {
        if (!this::_substituteOperatingPeriod.isInitialized)
            _substituteOperatingPeriod = SubstituteOperatingPeriodPath(this, SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE__SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE_SUBSTITUTE_PERIOD_FKEY, null)

        return _substituteOperatingPeriod;
    }

    val substituteOperatingPeriod: SubstituteOperatingPeriodPath
        get(): SubstituteOperatingPeriodPath = substituteOperatingPeriod()
    override fun `as`(alias: String): SubstituteOperatingDayByLineType = SubstituteOperatingDayByLineType(DSL.name(alias), this)
    override fun `as`(alias: Name): SubstituteOperatingDayByLineType = SubstituteOperatingDayByLineType(alias, this)
    override fun `as`(alias: Table<*>): SubstituteOperatingDayByLineType = SubstituteOperatingDayByLineType(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SubstituteOperatingDayByLineType = SubstituteOperatingDayByLineType(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SubstituteOperatingDayByLineType = SubstituteOperatingDayByLineType(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): SubstituteOperatingDayByLineType = SubstituteOperatingDayByLineType(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): SubstituteOperatingDayByLineType = SubstituteOperatingDayByLineType(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): SubstituteOperatingDayByLineType = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): SubstituteOperatingDayByLineType = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): SubstituteOperatingDayByLineType = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): SubstituteOperatingDayByLineType = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): SubstituteOperatingDayByLineType = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): SubstituteOperatingDayByLineType = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): SubstituteOperatingDayByLineType = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): SubstituteOperatingDayByLineType = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): SubstituteOperatingDayByLineType = where(DSL.notExists(select))
}
