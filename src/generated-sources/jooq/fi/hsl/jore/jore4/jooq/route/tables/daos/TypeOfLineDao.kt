/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.route.tables.daos


import fi.hsl.jore.jore4.jooq.AbstractSpringDAOImpl
import fi.hsl.jore.jore4.jooq.route.tables.TypeOfLine
import fi.hsl.jore.jore4.jooq.route.tables.records.TypeOfLineRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.springframework.stereotype.Repository


/**
 * Type of line. https://www.transmodel-cen.eu/model/index.htm?goto=2:1:3:424
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class TypeOfLineDao(configuration: Configuration?) : AbstractSpringDAOImpl<TypeOfLineRecord, fi.hsl.jore.jore4.jooq.route.tables.pojos.TypeOfLine, String>(TypeOfLine.TYPE_OF_LINE, fi.hsl.jore.jore4.jooq.route.tables.pojos.TypeOfLine::class.java, configuration) {

    /**
     * Create a new TypeOfLineDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: fi.hsl.jore.jore4.jooq.route.tables.pojos.TypeOfLine): String = o.typeOfLine

    /**
     * Fetch records that have <code>type_of_line BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTypeOfLine(lowerInclusive: String, upperInclusive: String): List<fi.hsl.jore.jore4.jooq.route.tables.pojos.TypeOfLine> = fetchRange(TypeOfLine.TYPE_OF_LINE.TYPE_OF_LINE_, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>type_of_line IN (values)</code>
     */
    fun fetchByTypeOfLine(vararg values: String): List<fi.hsl.jore.jore4.jooq.route.tables.pojos.TypeOfLine> = fetch(TypeOfLine.TYPE_OF_LINE.TYPE_OF_LINE_, *values)

    /**
     * Fetch a unique record that has <code>type_of_line = value</code>
     */
    fun fetchOneByTypeOfLine(value: String): fi.hsl.jore.jore4.jooq.route.tables.pojos.TypeOfLine? = fetchOne(TypeOfLine.TYPE_OF_LINE.TYPE_OF_LINE_, value)
}
