/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.service_calendar.tables.records


import fi.hsl.jore.jore4.jooq.service_calendar.tables.DayTypeActiveOnDayOfWeek

import java.util.UUID

import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * Tells on which days of week a particular DAY TYPE is active
 */
@Suppress("UNCHECKED_CAST")
open class DayTypeActiveOnDayOfWeekRecord private constructor() : UpdatableRecordImpl<DayTypeActiveOnDayOfWeekRecord>(DayTypeActiveOnDayOfWeek.DAY_TYPE_ACTIVE_ON_DAY_OF_WEEK) {

    open var dayTypeId: UUID
        set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    open var dayOfWeek: Int
        set(value): Unit = set(1, value)
        get(): Int = get(1) as Int

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<UUID?, Int?> = super.key() as Record2<UUID?, Int?>

    /**
     * Create a detached, initialised DayTypeActiveOnDayOfWeekRecord
     */
    constructor(dayTypeId: UUID, dayOfWeek: Int): this() {
        this.dayTypeId = dayTypeId
        this.dayOfWeek = dayOfWeek
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised DayTypeActiveOnDayOfWeekRecord
     */
    constructor(value: fi.hsl.jore.jore4.jooq.service_calendar.tables.pojos.DayTypeActiveOnDayOfWeek?): this() {
        if (value != null) {
            this.dayTypeId = value.dayTypeId
            this.dayOfWeek = value.dayOfWeek
            resetChangedOnNotNull()
        }
    }
}
