/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.service_calendar.tables.records


import fi.hsl.jore.jore4.jooq.service_calendar.tables.SubstituteOperatingDayByLineType

import java.time.LocalDate
import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record11
import org.jooq.Row11
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.YearToSecond


/**
 * Models substitute public transit as (1) a reference day or (2) indicating
 * that public transit does not occur on certain date. Substitute operating days
 * are always bound to a type of line.
 */
@Suppress("UNCHECKED_CAST")
open class SubstituteOperatingDayByLineTypeRecord() : UpdatableRecordImpl<SubstituteOperatingDayByLineTypeRecord>(SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE), Record11<UUID?, String?, LocalDate?, Int?, YearToSecond?, YearToSecond?, String?, OffsetDateTime?, OffsetDateTime?, UUID?, OffsetDateTime?> {

    open var substituteOperatingDayByLineTypeId: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var typeOfLine: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var supersededDate: LocalDate?
        set(value): Unit = set(2, value)
        get(): LocalDate? = get(2) as LocalDate?

    open var substituteDayOfWeek: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var beginTime: YearToSecond?
        set(value): Unit = set(4, value)
        get(): YearToSecond? = get(4) as YearToSecond?

    open var endTime: YearToSecond?
        set(value): Unit = set(5, value)
        get(): YearToSecond? = get(5) as YearToSecond?

    open var timezone: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var beginDatetime: OffsetDateTime?
        set(value): Unit = set(7, value)
        get(): OffsetDateTime? = get(7) as OffsetDateTime?

    open var endDatetime: OffsetDateTime?
        set(value): Unit = set(8, value)
        get(): OffsetDateTime? = get(8) as OffsetDateTime?

    open var substituteOperatingPeriodId: UUID?
        set(value): Unit = set(9, value)
        get(): UUID? = get(9) as UUID?

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(10, value)
        get(): OffsetDateTime? = get(10) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row11<UUID?, String?, LocalDate?, Int?, YearToSecond?, YearToSecond?, String?, OffsetDateTime?, OffsetDateTime?, UUID?, OffsetDateTime?> = super.fieldsRow() as Row11<UUID?, String?, LocalDate?, Int?, YearToSecond?, YearToSecond?, String?, OffsetDateTime?, OffsetDateTime?, UUID?, OffsetDateTime?>
    override fun valuesRow(): Row11<UUID?, String?, LocalDate?, Int?, YearToSecond?, YearToSecond?, String?, OffsetDateTime?, OffsetDateTime?, UUID?, OffsetDateTime?> = super.valuesRow() as Row11<UUID?, String?, LocalDate?, Int?, YearToSecond?, YearToSecond?, String?, OffsetDateTime?, OffsetDateTime?, UUID?, OffsetDateTime?>
    override fun field1(): Field<UUID?> = SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE_ID
    override fun field2(): Field<String?> = SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE.TYPE_OF_LINE
    override fun field3(): Field<LocalDate?> = SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE.SUPERSEDED_DATE
    override fun field4(): Field<Int?> = SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE.SUBSTITUTE_DAY_OF_WEEK
    override fun field5(): Field<YearToSecond?> = SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE.BEGIN_TIME
    override fun field6(): Field<YearToSecond?> = SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE.END_TIME
    override fun field7(): Field<String?> = SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE.TIMEZONE
    override fun field8(): Field<OffsetDateTime?> = SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE.BEGIN_DATETIME
    override fun field9(): Field<OffsetDateTime?> = SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE.END_DATETIME
    override fun field10(): Field<UUID?> = SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE.SUBSTITUTE_OPERATING_PERIOD_ID
    override fun field11(): Field<OffsetDateTime?> = SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE.CREATED_AT
    override fun component1(): UUID? = substituteOperatingDayByLineTypeId
    override fun component2(): String? = typeOfLine
    override fun component3(): LocalDate? = supersededDate
    override fun component4(): Int? = substituteDayOfWeek
    override fun component5(): YearToSecond? = beginTime
    override fun component6(): YearToSecond? = endTime
    override fun component7(): String? = timezone
    override fun component8(): OffsetDateTime? = beginDatetime
    override fun component9(): OffsetDateTime? = endDatetime
    override fun component10(): UUID? = substituteOperatingPeriodId
    override fun component11(): OffsetDateTime? = createdAt
    override fun value1(): UUID? = substituteOperatingDayByLineTypeId
    override fun value2(): String? = typeOfLine
    override fun value3(): LocalDate? = supersededDate
    override fun value4(): Int? = substituteDayOfWeek
    override fun value5(): YearToSecond? = beginTime
    override fun value6(): YearToSecond? = endTime
    override fun value7(): String? = timezone
    override fun value8(): OffsetDateTime? = beginDatetime
    override fun value9(): OffsetDateTime? = endDatetime
    override fun value10(): UUID? = substituteOperatingPeriodId
    override fun value11(): OffsetDateTime? = createdAt

    override fun value1(value: UUID?): SubstituteOperatingDayByLineTypeRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): SubstituteOperatingDayByLineTypeRecord {
        set(1, value)
        return this
    }

    override fun value3(value: LocalDate?): SubstituteOperatingDayByLineTypeRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): SubstituteOperatingDayByLineTypeRecord {
        set(3, value)
        return this
    }

    override fun value5(value: YearToSecond?): SubstituteOperatingDayByLineTypeRecord {
        set(4, value)
        return this
    }

    override fun value6(value: YearToSecond?): SubstituteOperatingDayByLineTypeRecord {
        set(5, value)
        return this
    }

    override fun value7(value: String?): SubstituteOperatingDayByLineTypeRecord {
        set(6, value)
        return this
    }

    override fun value8(value: OffsetDateTime?): SubstituteOperatingDayByLineTypeRecord {
        set(7, value)
        return this
    }

    override fun value9(value: OffsetDateTime?): SubstituteOperatingDayByLineTypeRecord {
        set(8, value)
        return this
    }

    override fun value10(value: UUID?): SubstituteOperatingDayByLineTypeRecord {
        set(9, value)
        return this
    }

    override fun value11(value: OffsetDateTime?): SubstituteOperatingDayByLineTypeRecord {
        set(10, value)
        return this
    }

    override fun values(value1: UUID?, value2: String?, value3: LocalDate?, value4: Int?, value5: YearToSecond?, value6: YearToSecond?, value7: String?, value8: OffsetDateTime?, value9: OffsetDateTime?, value10: UUID?, value11: OffsetDateTime?): SubstituteOperatingDayByLineTypeRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        return this
    }

    /**
     * Create a detached, initialised SubstituteOperatingDayByLineTypeRecord
     */
    constructor(substituteOperatingDayByLineTypeId: UUID? = null, typeOfLine: String? = null, supersededDate: LocalDate? = null, substituteDayOfWeek: Int? = null, beginTime: YearToSecond? = null, endTime: YearToSecond? = null, timezone: String? = null, beginDatetime: OffsetDateTime? = null, endDatetime: OffsetDateTime? = null, substituteOperatingPeriodId: UUID? = null, createdAt: OffsetDateTime? = null): this() {
        this.substituteOperatingDayByLineTypeId = substituteOperatingDayByLineTypeId
        this.typeOfLine = typeOfLine
        this.supersededDate = supersededDate
        this.substituteDayOfWeek = substituteDayOfWeek
        this.beginTime = beginTime
        this.endTime = endTime
        this.timezone = timezone
        this.beginDatetime = beginDatetime
        this.endDatetime = endDatetime
        this.substituteOperatingPeriodId = substituteOperatingPeriodId
        this.createdAt = createdAt
        resetChangedOnNotNull()
    }
}
