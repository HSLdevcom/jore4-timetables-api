/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.service_calendar.tables.records


import fi.hsl.jore.jore4.jooq.service_calendar.tables.SubstituteOperatingDayByLineType

import java.time.LocalDate
import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.YearToSecond


/**
 * Models substitute public transit as (1) a reference day or (2) indicating
 * that public transit does not occur on certain date. Substitute operating days
 * are always bound to a type of line.
 */
@Suppress("UNCHECKED_CAST")
open class SubstituteOperatingDayByLineTypeRecord private constructor() : UpdatableRecordImpl<SubstituteOperatingDayByLineTypeRecord>(SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE) {

    open var substituteOperatingDayByLineTypeId: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var typeOfLine: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var supersededDate: LocalDate
        set(value): Unit = set(2, value)
        get(): LocalDate = get(2) as LocalDate

    open var substituteDayOfWeek: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var beginTime: YearToSecond?
        set(value): Unit = set(4, value)
        get(): YearToSecond? = get(4) as YearToSecond?

    open var endTime: YearToSecond?
        set(value): Unit = set(5, value)
        get(): YearToSecond? = get(5) as YearToSecond?

    open var timezone: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var substituteOperatingPeriodId: UUID
        set(value): Unit = set(7, value)
        get(): UUID = get(7) as UUID

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(8, value)
        get(): OffsetDateTime? = get(8) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised SubstituteOperatingDayByLineTypeRecord
     */
    constructor(substituteOperatingDayByLineTypeId: UUID? = null, typeOfLine: String, supersededDate: LocalDate, substituteDayOfWeek: Int? = null, beginTime: YearToSecond? = null, endTime: YearToSecond? = null, timezone: String? = null, substituteOperatingPeriodId: UUID, createdAt: OffsetDateTime? = null): this() {
        this.substituteOperatingDayByLineTypeId = substituteOperatingDayByLineTypeId
        this.typeOfLine = typeOfLine
        this.supersededDate = supersededDate
        this.substituteDayOfWeek = substituteDayOfWeek
        this.beginTime = beginTime
        this.endTime = endTime
        this.timezone = timezone
        this.substituteOperatingPeriodId = substituteOperatingPeriodId
        this.createdAt = createdAt
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised SubstituteOperatingDayByLineTypeRecord
     */
    constructor(value: fi.hsl.jore.jore4.jooq.service_calendar.tables.pojos.SubstituteOperatingDayByLineType?): this() {
        if (value != null) {
            this.substituteOperatingDayByLineTypeId = value.substituteOperatingDayByLineTypeId
            this.typeOfLine = value.typeOfLine
            this.supersededDate = value.supersededDate
            this.substituteDayOfWeek = value.substituteDayOfWeek
            this.beginTime = value.beginTime
            this.endTime = value.endTime
            this.timezone = value.timezone
            this.substituteOperatingPeriodId = value.substituteOperatingPeriodId
            this.createdAt = value.createdAt
            resetChangedOnNotNull()
        }
    }
}
