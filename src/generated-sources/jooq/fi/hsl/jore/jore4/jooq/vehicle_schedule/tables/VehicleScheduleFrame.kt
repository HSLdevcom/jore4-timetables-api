/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_schedule.tables


import fi.hsl.jore.jore4.jooq.vehicle_schedule.VehicleSchedule
import fi.hsl.jore.jore4.jooq.vehicle_schedule.keys.VEHICLE_SCHEDULE_FRAME_PKEY
import fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.records.VehicleScheduleFrameRecord
import fi.hsl.jore.jore4.jooq.vehicle_service.keys.VEHICLE_SERVICE__VEHICLE_SERVICE_VEHICLE_SCHEDULE_FRAME_ID_FKEY
import fi.hsl.jore.jore4.jooq.vehicle_service.tables.VehicleService.VehicleServicePath

import java.time.LocalDate
import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * A coherent set of BLOCKS, COMPOUND BLOCKs, COURSEs of JOURNEY and VEHICLE
 * SCHEDULEs to which the same set of VALIDITY CONDITIONs have been assigned.
 * Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=3:7:2:993 
 */
@Suppress("UNCHECKED_CAST")
open class VehicleScheduleFrame(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, VehicleScheduleFrameRecord>?,
    parentPath: InverseForeignKey<out Record, VehicleScheduleFrameRecord>?,
    aliased: Table<VehicleScheduleFrameRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<VehicleScheduleFrameRecord>(
    alias,
    VehicleSchedule.VEHICLE_SCHEDULE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("A coherent set of BLOCKS, COMPOUND BLOCKs, COURSEs of JOURNEY and VEHICLE SCHEDULEs to which the same set of VALIDITY CONDITIONs have been assigned. Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=3:7:2:993 "),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>vehicle_schedule.vehicle_schedule_frame</code>
         */
        val VEHICLE_SCHEDULE_FRAME: VehicleScheduleFrame = VehicleScheduleFrame()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<VehicleScheduleFrameRecord> = VehicleScheduleFrameRecord::class.java

    /**
     * The column
     * <code>vehicle_schedule.vehicle_schedule_frame.vehicle_schedule_frame_id</code>.
     */
    val VEHICLE_SCHEDULE_FRAME_ID: TableField<VehicleScheduleFrameRecord, UUID?> = createField(DSL.name("vehicle_schedule_frame_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "")

    /**
     * The column
     * <code>vehicle_schedule.vehicle_schedule_frame.name_i18n</code>.
     * Human-readable name for the VEHICLE SCHEDULE FRAME
     */
    val NAME_I18N: TableField<VehicleScheduleFrameRecord, JSONB?> = createField(DSL.name("name_i18n"), SQLDataType.JSONB, this, "Human-readable name for the VEHICLE SCHEDULE FRAME")

    /**
     * The column
     * <code>vehicle_schedule.vehicle_schedule_frame.validity_start</code>.
     * OPERATING DAY when the VEHICLE SCHEDULE FRAME validity starts
     * (inclusive). Null if always has been valid.
     */
    val VALIDITY_START: TableField<VehicleScheduleFrameRecord, LocalDate?> = createField(DSL.name("validity_start"), SQLDataType.LOCALDATE.nullable(false), this, "OPERATING DAY when the VEHICLE SCHEDULE FRAME validity starts (inclusive). Null if always has been valid.")

    /**
     * The column
     * <code>vehicle_schedule.vehicle_schedule_frame.validity_end</code>.
     * OPERATING DAY when the VEHICLE SCHEDULE FRAME validity ends (inclusive).
     * Null if always will be valid.
     */
    val VALIDITY_END: TableField<VehicleScheduleFrameRecord, LocalDate?> = createField(DSL.name("validity_end"), SQLDataType.LOCALDATE.nullable(false), this, "OPERATING DAY when the VEHICLE SCHEDULE FRAME validity ends (inclusive). Null if always will be valid.")

    /**
     * The column <code>vehicle_schedule.vehicle_schedule_frame.priority</code>.
     * The priority of the timetable definition. The definition may be
     * overridden by higher priority definitions.
     */
    val PRIORITY: TableField<VehicleScheduleFrameRecord, Int?> = createField(DSL.name("priority"), SQLDataType.INTEGER.nullable(false), this, "The priority of the timetable definition. The definition may be overridden by higher priority definitions.")

    /**
     * The column <code>vehicle_schedule.vehicle_schedule_frame.label</code>.
     * Label for the vehicle schedule frame. Comes from BookingRecord vsc_name
     * field from Hastus.
     */
    val LABEL: TableField<VehicleScheduleFrameRecord, String?> = createField(DSL.name("label"), SQLDataType.CLOB.nullable(false), this, "Label for the vehicle schedule frame. Comes from BookingRecord vsc_name field from Hastus.")

    /**
     * The column
     * <code>vehicle_schedule.vehicle_schedule_frame.booking_label</code>.
     * Booking label for the vehicle schedule frame. Comes from BookingRecord
     * vsc_booking field from Hastus.
     */
    val BOOKING_LABEL: TableField<VehicleScheduleFrameRecord, String?> = createField(DSL.name("booking_label"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("''::text"), SQLDataType.CLOB)), this, "Booking label for the vehicle schedule frame. Comes from BookingRecord vsc_booking field from Hastus.")

    /**
     * The column
     * <code>vehicle_schedule.vehicle_schedule_frame.booking_description_i18n</code>.
     * Booking description for the vehicle schedule frame. Comes from
     * BookingRecord vsc_booking_desc field from Hastus.
     */
    val BOOKING_DESCRIPTION_I18N: TableField<VehicleScheduleFrameRecord, JSONB?> = createField(DSL.name("booking_description_i18n"), SQLDataType.JSONB, this, "Booking description for the vehicle schedule frame. Comes from BookingRecord vsc_booking_desc field from Hastus.")

    /**
     * The column
     * <code>vehicle_schedule.vehicle_schedule_frame.created_at</code>.
     */
    val CREATED_AT: TableField<VehicleScheduleFrameRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<VehicleScheduleFrameRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<VehicleScheduleFrameRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<VehicleScheduleFrameRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>vehicle_schedule.vehicle_schedule_frame</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>vehicle_schedule.vehicle_schedule_frame</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>vehicle_schedule.vehicle_schedule_frame</code> table
     * reference
     */
    constructor(): this(DSL.name("vehicle_schedule_frame"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VehicleScheduleFrameRecord>?, parentPath: InverseForeignKey<out Record, VehicleScheduleFrameRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, VEHICLE_SCHEDULE_FRAME, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class VehicleScheduleFramePath : VehicleScheduleFrame, Path<VehicleScheduleFrameRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VehicleScheduleFrameRecord>?, parentPath: InverseForeignKey<out Record, VehicleScheduleFrameRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<VehicleScheduleFrameRecord>): super(alias, aliased)
        override fun `as`(alias: String): VehicleScheduleFramePath = VehicleScheduleFramePath(DSL.name(alias), this)
        override fun `as`(alias: Name): VehicleScheduleFramePath = VehicleScheduleFramePath(alias, this)
        override fun `as`(alias: Table<*>): VehicleScheduleFramePath = VehicleScheduleFramePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else VehicleSchedule.VEHICLE_SCHEDULE
    override fun getPrimaryKey(): UniqueKey<VehicleScheduleFrameRecord> = VEHICLE_SCHEDULE_FRAME_PKEY

    private lateinit var _vehicleService: VehicleServicePath

    /**
     * Get the implicit to-many join path to the
     * <code>vehicle_service.vehicle_service</code> table
     */
    fun vehicleService(): VehicleServicePath {
        if (!this::_vehicleService.isInitialized)
            _vehicleService = VehicleServicePath(this, null, VEHICLE_SERVICE__VEHICLE_SERVICE_VEHICLE_SCHEDULE_FRAME_ID_FKEY.inverseKey)

        return _vehicleService;
    }

    val vehicleService: VehicleServicePath
        get(): VehicleServicePath = vehicleService()
    override fun `as`(alias: String): VehicleScheduleFrame = VehicleScheduleFrame(DSL.name(alias), this)
    override fun `as`(alias: Name): VehicleScheduleFrame = VehicleScheduleFrame(alias, this)
    override fun `as`(alias: Table<*>): VehicleScheduleFrame = VehicleScheduleFrame(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VehicleScheduleFrame = VehicleScheduleFrame(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VehicleScheduleFrame = VehicleScheduleFrame(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): VehicleScheduleFrame = VehicleScheduleFrame(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): VehicleScheduleFrame = VehicleScheduleFrame(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): VehicleScheduleFrame = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): VehicleScheduleFrame = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): VehicleScheduleFrame = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): VehicleScheduleFrame = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): VehicleScheduleFrame = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): VehicleScheduleFrame = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): VehicleScheduleFrame = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): VehicleScheduleFrame = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): VehicleScheduleFrame = where(DSL.notExists(select))
}
