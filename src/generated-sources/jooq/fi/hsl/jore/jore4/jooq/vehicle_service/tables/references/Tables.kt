/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_service.tables.references


import fi.hsl.jore.jore4.jooq.return_value.tables.records.TimetableVersionRecord
import fi.hsl.jore.jore4.jooq.vehicle_service.tables.Block
import fi.hsl.jore.jore4.jooq.vehicle_service.tables.GetTimetableVersionsByJourneyPatternIds
import fi.hsl.jore.jore4.jooq.vehicle_service.tables.GetTimetablesAndSubstituteOperatingDays
import fi.hsl.jore.jore4.jooq.vehicle_service.tables.JourneyPatternsInVehicleService
import fi.hsl.jore.jore4.jooq.vehicle_service.tables.VehicleService

import java.time.LocalDate
import java.util.UUID

import org.jooq.Configuration
import org.jooq.Field
import org.jooq.Result



/**
 * The work of a vehicle from the time it leaves a PARKING POINT after parking
 * until its next return to park at a PARKING POINT. Any subsequent departure
 * from a PARKING POINT after parking marks the start of a new BLOCK. The period
 * of a BLOCK has to be covered by DUTies. Transmodel:
 * https://www.transmodel-cen.eu/model/index.htm?goto=3:5:958 
 */
val BLOCK: Block = Block.BLOCK

/**
 * The table
 * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids</code>.
 */
val GET_TIMETABLE_VERSIONS_BY_JOURNEY_PATTERN_IDS: GetTimetableVersionsByJourneyPatternIds = GetTimetableVersionsByJourneyPatternIds.GET_TIMETABLE_VERSIONS_BY_JOURNEY_PATTERN_IDS

/**
 * Call
 * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids</code>.
 */
fun GET_TIMETABLE_VERSIONS_BY_JOURNEY_PATTERN_IDS(
      configuration: Configuration
    , journeyPatternIds: Array<UUID?>?
    , startDate: LocalDate?
    , endDate: LocalDate?
    , observationDate: LocalDate?
): Result<TimetableVersionRecord> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.vehicle_service.tables.GetTimetableVersionsByJourneyPatternIds.GET_TIMETABLE_VERSIONS_BY_JOURNEY_PATTERN_IDS.call(
      journeyPatternIds
    , startDate
    , endDate
    , observationDate
)).fetch()

/**
 * Get
 * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids</code> as
 * a table.
 */
fun GET_TIMETABLE_VERSIONS_BY_JOURNEY_PATTERN_IDS(
      journeyPatternIds: Array<UUID?>?
    , startDate: LocalDate?
    , endDate: LocalDate?
    , observationDate: LocalDate?
): GetTimetableVersionsByJourneyPatternIds = fi.hsl.jore.jore4.jooq.vehicle_service.tables.GetTimetableVersionsByJourneyPatternIds.GET_TIMETABLE_VERSIONS_BY_JOURNEY_PATTERN_IDS.call(
    journeyPatternIds,
    startDate,
    endDate,
    observationDate
)

/**
 * Get
 * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids</code> as
 * a table.
 */
fun GET_TIMETABLE_VERSIONS_BY_JOURNEY_PATTERN_IDS(
      journeyPatternIds: Field<Array<UUID?>?>
    , startDate: Field<LocalDate?>
    , endDate: Field<LocalDate?>
    , observationDate: Field<LocalDate?>
): GetTimetableVersionsByJourneyPatternIds = fi.hsl.jore.jore4.jooq.vehicle_service.tables.GetTimetableVersionsByJourneyPatternIds.GET_TIMETABLE_VERSIONS_BY_JOURNEY_PATTERN_IDS.call(
    journeyPatternIds,
    startDate,
    endDate,
    observationDate
)

/**
 * The table
 * <code>vehicle_service.get_timetables_and_substitute_operating_days</code>.
 */
val GET_TIMETABLES_AND_SUBSTITUTE_OPERATING_DAYS: GetTimetablesAndSubstituteOperatingDays = GetTimetablesAndSubstituteOperatingDays.GET_TIMETABLES_AND_SUBSTITUTE_OPERATING_DAYS

/**
 * Call
 * <code>vehicle_service.get_timetables_and_substitute_operating_days</code>.
 */
fun GET_TIMETABLES_AND_SUBSTITUTE_OPERATING_DAYS(
      configuration: Configuration
    , journeyPatternIds: Array<UUID?>?
    , startDate: LocalDate?
    , endDate: LocalDate?
): Result<TimetableVersionRecord> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.vehicle_service.tables.GetTimetablesAndSubstituteOperatingDays.GET_TIMETABLES_AND_SUBSTITUTE_OPERATING_DAYS.call(
      journeyPatternIds
    , startDate
    , endDate
)).fetch()

/**
 * Get <code>vehicle_service.get_timetables_and_substitute_operating_days</code>
 * as a table.
 */
fun GET_TIMETABLES_AND_SUBSTITUTE_OPERATING_DAYS(
      journeyPatternIds: Array<UUID?>?
    , startDate: LocalDate?
    , endDate: LocalDate?
): GetTimetablesAndSubstituteOperatingDays = fi.hsl.jore.jore4.jooq.vehicle_service.tables.GetTimetablesAndSubstituteOperatingDays.GET_TIMETABLES_AND_SUBSTITUTE_OPERATING_DAYS.call(
    journeyPatternIds,
    startDate,
    endDate
)

/**
 * Get <code>vehicle_service.get_timetables_and_substitute_operating_days</code>
 * as a table.
 */
fun GET_TIMETABLES_AND_SUBSTITUTE_OPERATING_DAYS(
      journeyPatternIds: Field<Array<UUID?>?>
    , startDate: Field<LocalDate?>
    , endDate: Field<LocalDate?>
): GetTimetablesAndSubstituteOperatingDays = fi.hsl.jore.jore4.jooq.vehicle_service.tables.GetTimetablesAndSubstituteOperatingDays.GET_TIMETABLES_AND_SUBSTITUTE_OPERATING_DAYS.call(
    journeyPatternIds,
    startDate,
    endDate
)

/**
 * A denormalized table containing relationships between vehicle_services and
 * journey_patterns (via journey_pattern_ref.journey_pattern_id).
 *  Without this table this relationship could be found via vehicle_service
 * -&gt; block -&gt; vehicle_journey -&gt; journey_pattern_ref.
 *  Kept up to date with triggers, should not be updated manually.
 */
val JOURNEY_PATTERNS_IN_VEHICLE_SERVICE: JourneyPatternsInVehicleService = JourneyPatternsInVehicleService.JOURNEY_PATTERNS_IN_VEHICLE_SERVICE

/**
 * A work plan for a single vehicle for a whole day, planned for a specific DAY
 * TYPE. A VEHICLE SERVICE includes one or several BLOCKs. If there is no
 * service on a given day, it does not include any BLOCKs. Transmodel:
 * https://www.transmodel-cen.eu/model/index.htm?goto=3:5:965 
 */
val VEHICLE_SERVICE_: VehicleService = VehicleService.VEHICLE_SERVICE_
