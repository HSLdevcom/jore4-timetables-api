/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_schedule


import fi.hsl.jore.jore4.jooq.DefaultCatalog
import fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.GetOverlappingSchedules
import fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.VehicleScheduleFrame
import fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.records.GetOverlappingSchedulesRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Configuration
import org.jooq.Field
import org.jooq.Result
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class VehicleSchedule : SchemaImpl("vehicle_schedule", DefaultCatalog.DEFAULT_CATALOG) {
    public companion object {

        /**
         * The reference instance of <code>vehicle_schedule</code>
         */
        val VEHICLE_SCHEDULE: VehicleSchedule = VehicleSchedule()
    }

    /**
     * The table <code>vehicle_schedule.get_overlapping_schedules</code>.
     */
    val GET_OVERLAPPING_SCHEDULES: GetOverlappingSchedules get() = GetOverlappingSchedules.GET_OVERLAPPING_SCHEDULES

    /**
     * Call <code>vehicle_schedule.get_overlapping_schedules</code>.
     */
    fun GET_OVERLAPPING_SCHEDULES(
          configuration: Configuration
        , filterVehicleScheduleFrameIds: Array<UUID?>?
        , filterJourneyPatternRefIds: Array<UUID?>?
        , ignorePriority: Boolean?
    ): Result<GetOverlappingSchedulesRecord> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.GetOverlappingSchedules.GET_OVERLAPPING_SCHEDULES.call(
          filterVehicleScheduleFrameIds
        , filterJourneyPatternRefIds
        , ignorePriority
    )).fetch()

    /**
     * Get <code>vehicle_schedule.get_overlapping_schedules</code> as a table.
     */
    fun GET_OVERLAPPING_SCHEDULES(
          filterVehicleScheduleFrameIds: Array<UUID?>?
        , filterJourneyPatternRefIds: Array<UUID?>?
        , ignorePriority: Boolean?
    ): GetOverlappingSchedules = fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.GetOverlappingSchedules.GET_OVERLAPPING_SCHEDULES.call(
        filterVehicleScheduleFrameIds,
        filterJourneyPatternRefIds,
        ignorePriority
    )

    /**
     * Get <code>vehicle_schedule.get_overlapping_schedules</code> as a table.
     */
    fun GET_OVERLAPPING_SCHEDULES(
          filterVehicleScheduleFrameIds: Field<Array<UUID?>?>
        , filterJourneyPatternRefIds: Field<Array<UUID?>?>
        , ignorePriority: Field<Boolean?>
    ): GetOverlappingSchedules = fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.GetOverlappingSchedules.GET_OVERLAPPING_SCHEDULES.call(
        filterVehicleScheduleFrameIds,
        filterJourneyPatternRefIds,
        ignorePriority
    )

    /**
     * A coherent set of BLOCKS, COMPOUND BLOCKs, COURSEs of JOURNEY and VEHICLE
     * SCHEDULEs to which the same set of VALIDITY CONDITIONs have been
     * assigned. Transmodel:
     * https://www.transmodel-cen.eu/model/index.htm?goto=3:7:2:993 
     */
    val VEHICLE_SCHEDULE_FRAME: VehicleScheduleFrame get() = VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        GetOverlappingSchedules.GET_OVERLAPPING_SCHEDULES,
        VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME
    )
}
