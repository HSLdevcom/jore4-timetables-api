/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_type.tables


import fi.hsl.jore.jore4.jooq.vehicle_service.keys.BLOCK__VEHICLE_TYPE_FKEY
import fi.hsl.jore.jore4.jooq.vehicle_service.tables.Block.BlockPath
import fi.hsl.jore.jore4.jooq.vehicle_type.keys.VEHICLE_TYPE_PKEY
import fi.hsl.jore.jore4.jooq.vehicle_type.tables.records.VehicleTypeRecord

import java.util.UUID

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * The VEHICLE entity is used to describe the physical public transport vehicles
 * available for short-term planning of operations and daily assignment (in
 * contrast to logical vehicles considered for resource planning of operations
 * and daily assignment (in contrast to logical vehicles cplanning). Each
 * VEHICLE shall be classified as of a particular VEHICLE TYPE.
 */
@Suppress("UNCHECKED_CAST")
open class VehicleType(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, VehicleTypeRecord>?,
    parentPath: InverseForeignKey<out Record, VehicleTypeRecord>?,
    aliased: Table<VehicleTypeRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<VehicleTypeRecord>(
    alias,
    fi.hsl.jore.jore4.jooq.vehicle_type.VehicleType.VEHICLE_TYPE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("The VEHICLE entity is used to describe the physical public transport vehicles available for short-term planning of operations and daily assignment (in contrast to logical vehicles considered for resource planning of operations and daily assignment (in contrast to logical vehicles cplanning). Each VEHICLE shall be classified as of a particular VEHICLE TYPE."),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>vehicle_type.vehicle_type</code>
         */
        val VEHICLE_TYPE_: VehicleType = VehicleType()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<VehicleTypeRecord> = VehicleTypeRecord::class.java

    /**
     * The column <code>vehicle_type.vehicle_type.vehicle_type_id</code>.
     */
    val VEHICLE_TYPE_ID: TableField<VehicleTypeRecord, UUID?> = createField(DSL.name("vehicle_type_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>vehicle_type.vehicle_type.label</code>. Label of the
     * vehicle type.
     */
    val LABEL: TableField<VehicleTypeRecord, String?> = createField(DSL.name("label"), SQLDataType.CLOB.nullable(false), this, "Label of the vehicle type.")

    /**
     * The column <code>vehicle_type.vehicle_type.description_i18n</code>.
     * Description of the vehicle type.
     */
    val DESCRIPTION_I18N: TableField<VehicleTypeRecord, JSONB?> = createField(DSL.name("description_i18n"), SQLDataType.JSONB, this, "Description of the vehicle type.")

    /**
     * The column <code>vehicle_type.vehicle_type.hsl_id</code>. ID used in
     * Hastus to represent the vehicle type.
     */
    val HSL_ID: TableField<VehicleTypeRecord, Short?> = createField(DSL.name("hsl_id"), SQLDataType.SMALLINT.nullable(false), this, "ID used in Hastus to represent the vehicle type.")

    private constructor(alias: Name, aliased: Table<VehicleTypeRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<VehicleTypeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<VehicleTypeRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>vehicle_type.vehicle_type</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>vehicle_type.vehicle_type</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>vehicle_type.vehicle_type</code> table reference
     */
    constructor(): this(DSL.name("vehicle_type"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VehicleTypeRecord>?, parentPath: InverseForeignKey<out Record, VehicleTypeRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, VEHICLE_TYPE_, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class VehicleTypePath : VehicleType, Path<VehicleTypeRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VehicleTypeRecord>?, parentPath: InverseForeignKey<out Record, VehicleTypeRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<VehicleTypeRecord>): super(alias, aliased)
        override fun `as`(alias: String): VehicleTypePath = VehicleTypePath(DSL.name(alias), this)
        override fun `as`(alias: Name): VehicleTypePath = VehicleTypePath(alias, this)
        override fun `as`(alias: Table<*>): VehicleTypePath = VehicleTypePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else fi.hsl.jore.jore4.jooq.vehicle_type.VehicleType.VEHICLE_TYPE
    override fun getPrimaryKey(): UniqueKey<VehicleTypeRecord> = VEHICLE_TYPE_PKEY

    private lateinit var _block: BlockPath

    /**
     * Get the implicit to-many join path to the
     * <code>vehicle_service.block</code> table
     */
    fun block(): BlockPath {
        if (!this::_block.isInitialized)
            _block = BlockPath(this, null, BLOCK__VEHICLE_TYPE_FKEY.inverseKey)

        return _block;
    }

    val block: BlockPath
        get(): BlockPath = block()
    override fun `as`(alias: String): VehicleType = VehicleType(DSL.name(alias), this)
    override fun `as`(alias: Name): VehicleType = VehicleType(alias, this)
    override fun `as`(alias: Table<*>): VehicleType = VehicleType(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VehicleType = VehicleType(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VehicleType = VehicleType(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): VehicleType = VehicleType(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): VehicleType = VehicleType(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): VehicleType = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): VehicleType = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): VehicleType = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): VehicleType = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): VehicleType = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): VehicleType = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): VehicleType = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): VehicleType = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): VehicleType = where(DSL.notExists(select))
}
