/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.service_calendar.tables


import fi.hsl.jore.jore4.jooq.service_calendar.ServiceCalendar
import fi.hsl.jore.jore4.jooq.service_calendar.keys.DAY_TYPE_PKEY

import java.util.UUID

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * A type of day characterised by one or more properties which affect public 
 * transport operation. For example: weekday in school holidays. Transmodel: 
 * https://www.transmodel-cen.eu/model/index.htm?goto=1:6:3:299 
 */
@Suppress("UNCHECKED_CAST")
open class DayType(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    ServiceCalendar.SERVICE_CALENDAR,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("A type of day characterised by one or more properties which affect public transport operation. For example: weekday in school holidays. Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=1:6:3:299 "),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>service_calendar.day_type</code>
         */
        val DAY_TYPE = DayType()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>service_calendar.day_type.day_type_id</code>.
     */
    val DAY_TYPE_ID: TableField<Record, UUID?> = createField(DSL.name("day_type_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "")

    /**
     * The column <code>service_calendar.day_type.label</code>. The label for the DAY TYPE. Used for identifying the DAY TYPE when importing data from Hastus. Includes both basic (e.g. "Monday-Thursday") and special ("Easter Sunday") day types
     */
    val LABEL: TableField<Record, String?> = createField(DSL.name("label"), SQLDataType.CLOB.nullable(false), this, "The label for the DAY TYPE. Used for identifying the DAY TYPE when importing data from Hastus. Includes both basic (e.g. \"Monday-Thursday\") and special (\"Easter Sunday\") day types")

    /**
     * The column <code>service_calendar.day_type.name_i18n</code>. Human-readable name for the DAY TYPE
     */
    val NAME_I18N: TableField<Record, JSONB?> = createField(DSL.name("name_i18n"), SQLDataType.JSONB.nullable(false), this, "Human-readable name for the DAY TYPE")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>service_calendar.day_type</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>service_calendar.day_type</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>service_calendar.day_type</code> table reference
     */
    constructor(): this(DSL.name("day_type"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, DAY_TYPE, null)
    override fun getSchema(): Schema = ServiceCalendar.SERVICE_CALENDAR
    override fun getPrimaryKey(): UniqueKey<Record> = DAY_TYPE_PKEY
    override fun getKeys(): List<UniqueKey<Record>> = listOf(DAY_TYPE_PKEY)
    override fun `as`(alias: String): DayType = DayType(DSL.name(alias), this)
    override fun `as`(alias: Name): DayType = DayType(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DayType = DayType(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DayType = DayType(name, null)
}
