/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.route.tables.daos


import fi.hsl.jore.jore4.jooq.AbstractSpringDAOImpl
import fi.hsl.jore.jore4.jooq.route.tables.Direction
import fi.hsl.jore.jore4.jooq.route.tables.records.DirectionRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.springframework.stereotype.Repository


/**
 * The route directions from Transmodel
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class DirectionDao(configuration: Configuration?) : AbstractSpringDAOImpl<DirectionRecord, fi.hsl.jore.jore4.jooq.route.tables.pojos.Direction, String>(Direction.DIRECTION, fi.hsl.jore.jore4.jooq.route.tables.pojos.Direction::class.java, configuration) {

    /**
     * Create a new DirectionDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: fi.hsl.jore.jore4.jooq.route.tables.pojos.Direction): String = o.direction

    /**
     * Fetch records that have <code>direction BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDirection(lowerInclusive: String, upperInclusive: String): List<fi.hsl.jore.jore4.jooq.route.tables.pojos.Direction> = fetchRange(Direction.DIRECTION.DIRECTION_, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>direction IN (values)</code>
     */
    fun fetchByDirection(vararg values: String): List<fi.hsl.jore.jore4.jooq.route.tables.pojos.Direction> = fetch(Direction.DIRECTION.DIRECTION_, *values)

    /**
     * Fetch a unique record that has <code>direction = value</code>
     */
    fun fetchOneByDirection(value: String): fi.hsl.jore.jore4.jooq.route.tables.pojos.Direction? = fetchOne(Direction.DIRECTION.DIRECTION_, value)

    /**
     * Fetch records that have <code>the_opposite_of_direction BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfTheOppositeOfDirection(lowerInclusive: String?, upperInclusive: String?): List<fi.hsl.jore.jore4.jooq.route.tables.pojos.Direction> = fetchRange(Direction.DIRECTION.THE_OPPOSITE_OF_DIRECTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>the_opposite_of_direction IN
     * (values)</code>
     */
    fun fetchByTheOppositeOfDirection(vararg values: String): List<fi.hsl.jore.jore4.jooq.route.tables.pojos.Direction> = fetch(Direction.DIRECTION.THE_OPPOSITE_OF_DIRECTION, *values)
}
