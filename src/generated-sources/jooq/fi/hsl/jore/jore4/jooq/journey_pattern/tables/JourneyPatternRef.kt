/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.journey_pattern.tables


import fi.hsl.jore.jore4.jooq.journey_pattern.JourneyPattern
import fi.hsl.jore.jore4.jooq.journey_pattern.keys.JOURNEY_PATTERN_REF_PKEY
import fi.hsl.jore.jore4.jooq.journey_pattern.keys.JOURNEY_PATTERN_REF__JOURNEY_PATTERN_REF_ROUTE_DIRECTION_FKEY
import fi.hsl.jore.jore4.jooq.journey_pattern.keys.JOURNEY_PATTERN_REF__JOURNEY_PATTERN_REF_TYPE_OF_LINE_FKEY
import fi.hsl.jore.jore4.jooq.journey_pattern.tables.records.JourneyPatternRefRecord
import fi.hsl.jore.jore4.jooq.route.tables.Direction.DirectionPath
import fi.hsl.jore.jore4.jooq.route.tables.TypeOfLine.TypeOfLinePath
import fi.hsl.jore.jore4.jooq.service_pattern.keys.SCHEDULED_STOP_POINT_IN_JOURNEY_PATTERN_REF__SCHEDULED_STOP_POINT_IN_JOURNEY_PAT_JOURNEY_PATTERN_REF_ID_FKEY
import fi.hsl.jore.jore4.jooq.service_pattern.tables.ScheduledStopPointInJourneyPatternRef.ScheduledStopPointInJourneyPatternRefPath
import fi.hsl.jore.jore4.jooq.vehicle_journey.keys.VEHICLE_JOURNEY__VEHICLE_JOURNEY_JOURNEY_PATTERN_REF_ID_FKEY
import fi.hsl.jore.jore4.jooq.vehicle_journey.tables.VehicleJourney.VehicleJourneyPath

import java.time.LocalDate
import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Reference to a given snapshot of a JOURNEY PATTERN for a given operating day.
 * Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=2:3:4:729 
 */
@Suppress("UNCHECKED_CAST")
open class JourneyPatternRef(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, JourneyPatternRefRecord>?,
    parentPath: InverseForeignKey<out Record, JourneyPatternRefRecord>?,
    aliased: Table<JourneyPatternRefRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<JourneyPatternRefRecord>(
    alias,
    JourneyPattern.JOURNEY_PATTERN,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("Reference to a given snapshot of a JOURNEY PATTERN for a given operating day. Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=2:3:4:729 "),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>journey_pattern.journey_pattern_ref</code>
         */
        val JOURNEY_PATTERN_REF: JourneyPatternRef = JourneyPatternRef()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JourneyPatternRefRecord> = JourneyPatternRefRecord::class.java

    /**
     * The column
     * <code>journey_pattern.journey_pattern_ref.journey_pattern_ref_id</code>.
     */
    val JOURNEY_PATTERN_REF_ID: TableField<JourneyPatternRefRecord, UUID?> = createField(DSL.name("journey_pattern_ref_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "")

    /**
     * The column
     * <code>journey_pattern.journey_pattern_ref.journey_pattern_id</code>. The
     * ID of the referenced JOURNEY PATTERN
     */
    val JOURNEY_PATTERN_ID: TableField<JourneyPatternRefRecord, UUID?> = createField(DSL.name("journey_pattern_id"), SQLDataType.UUID.nullable(false), this, "The ID of the referenced JOURNEY PATTERN")

    /**
     * The column
     * <code>journey_pattern.journey_pattern_ref.observation_timestamp</code>.
     * The user-given point of time used to pick one journey pattern (with route
     * and scheduled stop points) among possibly many variants. The selected,
     * unambiguous journey pattern variant is used as a basis for schedule
     * planning.
     */
    val OBSERVATION_TIMESTAMP: TableField<JourneyPatternRefRecord, OffsetDateTime?> = createField(DSL.name("observation_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "The user-given point of time used to pick one journey pattern (with route and scheduled stop points) among possibly many variants. The selected, unambiguous journey pattern variant is used as a basis for schedule planning.")

    /**
     * The column
     * <code>journey_pattern.journey_pattern_ref.snapshot_timestamp</code>. The
     * timestamp when the snapshot was taken
     */
    val SNAPSHOT_TIMESTAMP: TableField<JourneyPatternRefRecord, OffsetDateTime?> = createField(DSL.name("snapshot_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "The timestamp when the snapshot was taken")

    /**
     * The column <code>journey_pattern.journey_pattern_ref.type_of_line</code>.
     * The type of line (GTFS route type):
     * https://developers.google.com/transit/gtfs/reference/extended-route-types
     */
    val TYPE_OF_LINE: TableField<JourneyPatternRefRecord, String?> = createField(DSL.name("type_of_line"), SQLDataType.CLOB.nullable(false), this, "The type of line (GTFS route type): https://developers.google.com/transit/gtfs/reference/extended-route-types")

    /**
     * The column <code>journey_pattern.journey_pattern_ref.route_label</code>.
     * The label of the route associated with the referenced journey pattern
     */
    val ROUTE_LABEL: TableField<JourneyPatternRefRecord, String?> = createField(DSL.name("route_label"), SQLDataType.CLOB.nullable(false), this, "The label of the route associated with the referenced journey pattern")

    /**
     * The column
     * <code>journey_pattern.journey_pattern_ref.route_direction</code>. The
     * direction of the route associated with the referenced journey pattern
     */
    val ROUTE_DIRECTION: TableField<JourneyPatternRefRecord, String?> = createField(DSL.name("route_direction"), SQLDataType.CLOB.nullable(false), this, "The direction of the route associated with the referenced journey pattern")

    /**
     * The column
     * <code>journey_pattern.journey_pattern_ref.route_validity_start</code>.
     * The start date of the validity period of the route associated with the
     * referenced journey pattern. If NULL, then the start of the validity
     * period is unbounded (-infinity).
     */
    val ROUTE_VALIDITY_START: TableField<JourneyPatternRefRecord, LocalDate?> = createField(DSL.name("route_validity_start"), SQLDataType.LOCALDATE, this, "The start date of the validity period of the route associated with the referenced journey pattern. If NULL, then the start of the validity period is unbounded (-infinity).")

    /**
     * The column
     * <code>journey_pattern.journey_pattern_ref.route_validity_end</code>. The
     * end date of the validity period of the route associated with the
     * referenced journey pattern. If NULL, then the end of the validity period
     * is unbounded (infinity).
     */
    val ROUTE_VALIDITY_END: TableField<JourneyPatternRefRecord, LocalDate?> = createField(DSL.name("route_validity_end"), SQLDataType.LOCALDATE, this, "The end date of the validity period of the route associated with the referenced journey pattern. If NULL, then the end of the validity period is unbounded (infinity).")

    private constructor(alias: Name, aliased: Table<JourneyPatternRefRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<JourneyPatternRefRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<JourneyPatternRefRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>journey_pattern.journey_pattern_ref</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>journey_pattern.journey_pattern_ref</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>journey_pattern.journey_pattern_ref</code> table reference
     */
    constructor(): this(DSL.name("journey_pattern_ref"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JourneyPatternRefRecord>?, parentPath: InverseForeignKey<out Record, JourneyPatternRefRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, JOURNEY_PATTERN_REF, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class JourneyPatternRefPath : JourneyPatternRef, Path<JourneyPatternRefRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JourneyPatternRefRecord>?, parentPath: InverseForeignKey<out Record, JourneyPatternRefRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<JourneyPatternRefRecord>): super(alias, aliased)
        override fun `as`(alias: String): JourneyPatternRefPath = JourneyPatternRefPath(DSL.name(alias), this)
        override fun `as`(alias: Name): JourneyPatternRefPath = JourneyPatternRefPath(alias, this)
        override fun `as`(alias: Table<*>): JourneyPatternRefPath = JourneyPatternRefPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else JourneyPattern.JOURNEY_PATTERN
    override fun getPrimaryKey(): UniqueKey<JourneyPatternRefRecord> = JOURNEY_PATTERN_REF_PKEY
    override fun getReferences(): List<ForeignKey<JourneyPatternRefRecord, *>> = listOf(JOURNEY_PATTERN_REF__JOURNEY_PATTERN_REF_TYPE_OF_LINE_FKEY, JOURNEY_PATTERN_REF__JOURNEY_PATTERN_REF_ROUTE_DIRECTION_FKEY)

    private lateinit var _typeOfLine: TypeOfLinePath

    /**
     * Get the implicit join path to the <code>route.type_of_line</code> table.
     */
    fun typeOfLine(): TypeOfLinePath {
        if (!this::_typeOfLine.isInitialized)
            _typeOfLine = TypeOfLinePath(this, JOURNEY_PATTERN_REF__JOURNEY_PATTERN_REF_TYPE_OF_LINE_FKEY, null)

        return _typeOfLine;
    }

    val typeOfLine: TypeOfLinePath
        get(): TypeOfLinePath = typeOfLine()

    private lateinit var _direction: DirectionPath

    /**
     * Get the implicit join path to the <code>route.direction</code> table.
     */
    fun direction(): DirectionPath {
        if (!this::_direction.isInitialized)
            _direction = DirectionPath(this, JOURNEY_PATTERN_REF__JOURNEY_PATTERN_REF_ROUTE_DIRECTION_FKEY, null)

        return _direction;
    }

    val direction: DirectionPath
        get(): DirectionPath = direction()

    private lateinit var _scheduledStopPointInJourneyPatternRef: ScheduledStopPointInJourneyPatternRefPath

    /**
     * Get the implicit to-many join path to the
     * <code>service_pattern.scheduled_stop_point_in_journey_pattern_ref</code>
     * table
     */
    fun scheduledStopPointInJourneyPatternRef(): ScheduledStopPointInJourneyPatternRefPath {
        if (!this::_scheduledStopPointInJourneyPatternRef.isInitialized)
            _scheduledStopPointInJourneyPatternRef = ScheduledStopPointInJourneyPatternRefPath(this, null, SCHEDULED_STOP_POINT_IN_JOURNEY_PATTERN_REF__SCHEDULED_STOP_POINT_IN_JOURNEY_PAT_JOURNEY_PATTERN_REF_ID_FKEY.inverseKey)

        return _scheduledStopPointInJourneyPatternRef;
    }

    val scheduledStopPointInJourneyPatternRef: ScheduledStopPointInJourneyPatternRefPath
        get(): ScheduledStopPointInJourneyPatternRefPath = scheduledStopPointInJourneyPatternRef()

    private lateinit var _vehicleJourney: VehicleJourneyPath

    /**
     * Get the implicit to-many join path to the
     * <code>vehicle_journey.vehicle_journey</code> table
     */
    fun vehicleJourney(): VehicleJourneyPath {
        if (!this::_vehicleJourney.isInitialized)
            _vehicleJourney = VehicleJourneyPath(this, null, VEHICLE_JOURNEY__VEHICLE_JOURNEY_JOURNEY_PATTERN_REF_ID_FKEY.inverseKey)

        return _vehicleJourney;
    }

    val vehicleJourney: VehicleJourneyPath
        get(): VehicleJourneyPath = vehicleJourney()
    override fun `as`(alias: String): JourneyPatternRef = JourneyPatternRef(DSL.name(alias), this)
    override fun `as`(alias: Name): JourneyPatternRef = JourneyPatternRef(alias, this)
    override fun `as`(alias: Table<*>): JourneyPatternRef = JourneyPatternRef(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JourneyPatternRef = JourneyPatternRef(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JourneyPatternRef = JourneyPatternRef(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JourneyPatternRef = JourneyPatternRef(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): JourneyPatternRef = JourneyPatternRef(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JourneyPatternRef = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): JourneyPatternRef = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): JourneyPatternRef = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): JourneyPatternRef = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): JourneyPatternRef = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JourneyPatternRef = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JourneyPatternRef = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JourneyPatternRef = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JourneyPatternRef = where(DSL.notExists(select))
}
