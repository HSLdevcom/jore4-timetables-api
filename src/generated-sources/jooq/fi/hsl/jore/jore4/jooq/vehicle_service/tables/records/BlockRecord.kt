/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_service.tables.records


import fi.hsl.jore.jore4.jooq.vehicle_service.tables.Block

import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.YearToSecond


/**
 * The work of a vehicle from the time it leaves a PARKING POINT after parking
 * until its next return to park at a PARKING POINT. Any subsequent departure
 * from a PARKING POINT after parking marks the start of a new BLOCK. The period
 * of a BLOCK has to be covered by DUTies. Transmodel:
 * https://www.transmodel-cen.eu/model/index.htm?goto=3:5:958 
 */
@Suppress("UNCHECKED_CAST")
open class BlockRecord private constructor() : UpdatableRecordImpl<BlockRecord>(Block.BLOCK), Record5<UUID?, UUID?, YearToSecond?, YearToSecond?, UUID?> {

    open var blockId: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var vehicleServiceId: UUID
        set(value): Unit = set(1, value)
        get(): UUID = get(1) as UUID

    open var preparingTime: YearToSecond?
        set(value): Unit = set(2, value)
        get(): YearToSecond? = get(2) as YearToSecond?

    open var finishingTime: YearToSecond?
        set(value): Unit = set(3, value)
        get(): YearToSecond? = get(3) as YearToSecond?

    open var vehicleTypeId: UUID?
        set(value): Unit = set(4, value)
        get(): UUID? = get(4) as UUID?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<UUID?, UUID?, YearToSecond?, YearToSecond?, UUID?> = super.fieldsRow() as Row5<UUID?, UUID?, YearToSecond?, YearToSecond?, UUID?>
    override fun valuesRow(): Row5<UUID?, UUID?, YearToSecond?, YearToSecond?, UUID?> = super.valuesRow() as Row5<UUID?, UUID?, YearToSecond?, YearToSecond?, UUID?>
    override fun field1(): Field<UUID?> = Block.BLOCK.BLOCK_ID
    override fun field2(): Field<UUID?> = Block.BLOCK.VEHICLE_SERVICE_ID
    override fun field3(): Field<YearToSecond?> = Block.BLOCK.PREPARING_TIME
    override fun field4(): Field<YearToSecond?> = Block.BLOCK.FINISHING_TIME
    override fun field5(): Field<UUID?> = Block.BLOCK.VEHICLE_TYPE_ID
    override fun component1(): UUID? = blockId
    override fun component2(): UUID = vehicleServiceId
    override fun component3(): YearToSecond? = preparingTime
    override fun component4(): YearToSecond? = finishingTime
    override fun component5(): UUID? = vehicleTypeId
    override fun value1(): UUID? = blockId
    override fun value2(): UUID = vehicleServiceId
    override fun value3(): YearToSecond? = preparingTime
    override fun value4(): YearToSecond? = finishingTime
    override fun value5(): UUID? = vehicleTypeId

    override fun value1(value: UUID?): BlockRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UUID?): BlockRecord {
        set(1, value)
        return this
    }

    override fun value3(value: YearToSecond?): BlockRecord {
        set(2, value)
        return this
    }

    override fun value4(value: YearToSecond?): BlockRecord {
        set(3, value)
        return this
    }

    override fun value5(value: UUID?): BlockRecord {
        set(4, value)
        return this
    }

    override fun values(value1: UUID?, value2: UUID?, value3: YearToSecond?, value4: YearToSecond?, value5: UUID?): BlockRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised BlockRecord
     */
    constructor(blockId: UUID? = null, vehicleServiceId: UUID, preparingTime: YearToSecond? = null, finishingTime: YearToSecond? = null, vehicleTypeId: UUID? = null): this() {
        this.blockId = blockId
        this.vehicleServiceId = vehicleServiceId
        this.preparingTime = preparingTime
        this.finishingTime = finishingTime
        this.vehicleTypeId = vehicleTypeId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised BlockRecord
     */
    constructor(value: fi.hsl.jore.jore4.jooq.vehicle_service.tables.pojos.Block?): this() {
        if (value != null) {
            this.blockId = value.blockId
            this.vehicleServiceId = value.vehicleServiceId
            this.preparingTime = value.preparingTime
            this.finishingTime = value.finishingTime
            this.vehicleTypeId = value.vehicleTypeId
            resetChangedOnNotNull()
        }
    }
}
