/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_journey.tables


import fi.hsl.jore.jore4.jooq.vehicle_journey.VehicleJourney
import fi.hsl.jore.jore4.jooq.vehicle_journey.keys.JOURNEY_TYPE_PKEY
import fi.hsl.jore.jore4.jooq.vehicle_journey.tables.records.JourneyTypeRecord

import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row1
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Enum table for defining allowed journey types.
 */
@Suppress("UNCHECKED_CAST")
open class JourneyType(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, JourneyTypeRecord>?,
    aliased: Table<JourneyTypeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<JourneyTypeRecord>(
    alias,
    VehicleJourney.VEHICLE_JOURNEY,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Enum table for defining allowed journey types."),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>vehicle_journey.journey_type</code>
         */
        val JOURNEY_TYPE: JourneyType = JourneyType()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JourneyTypeRecord> = JourneyTypeRecord::class.java

    /**
     * The column <code>vehicle_journey.journey_type.type</code>.
     */
    val TYPE: TableField<JourneyTypeRecord, String?> = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<JourneyTypeRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<JourneyTypeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>vehicle_journey.journey_type</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>vehicle_journey.journey_type</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>vehicle_journey.journey_type</code> table reference
     */
    constructor(): this(DSL.name("journey_type"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, JourneyTypeRecord>): this(Internal.createPathAlias(child, key), child, key, JOURNEY_TYPE, null)
    override fun getSchema(): Schema? = if (aliased()) null else VehicleJourney.VEHICLE_JOURNEY
    override fun getPrimaryKey(): UniqueKey<JourneyTypeRecord> = JOURNEY_TYPE_PKEY
    override fun `as`(alias: String): JourneyType = JourneyType(DSL.name(alias), this)
    override fun `as`(alias: Name): JourneyType = JourneyType(alias, this)
    override fun `as`(alias: Table<*>): JourneyType = JourneyType(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JourneyType = JourneyType(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JourneyType = JourneyType(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JourneyType = JourneyType(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row1<String?> = super.fieldsRow() as Row1<String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
