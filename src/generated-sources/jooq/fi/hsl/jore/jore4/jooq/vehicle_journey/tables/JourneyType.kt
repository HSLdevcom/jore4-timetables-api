/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_journey.tables


import fi.hsl.jore.jore4.jooq.vehicle_journey.VehicleJourney
import fi.hsl.jore.jore4.jooq.vehicle_journey.keys.JOURNEY_TYPE_PKEY
import fi.hsl.jore.jore4.jooq.vehicle_journey.keys.VEHICLE_JOURNEY__VEHICLE_JOURNEY_JOURNEY_TYPE_FKEY
import fi.hsl.jore.jore4.jooq.vehicle_journey.tables.VehicleJourney.VehicleJourneyPath
import fi.hsl.jore.jore4.jooq.vehicle_journey.tables.records.JourneyTypeRecord

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Enum table for defining allowed journey types.
 */
@Suppress("UNCHECKED_CAST")
open class JourneyType(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, JourneyTypeRecord>?,
    parentPath: InverseForeignKey<out Record, JourneyTypeRecord>?,
    aliased: Table<JourneyTypeRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<JourneyTypeRecord>(
    alias,
    VehicleJourney.VEHICLE_JOURNEY,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("Enum table for defining allowed journey types."),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>vehicle_journey.journey_type</code>
         */
        val JOURNEY_TYPE: JourneyType = JourneyType()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JourneyTypeRecord> = JourneyTypeRecord::class.java

    /**
     * The column <code>vehicle_journey.journey_type.type</code>.
     */
    val TYPE: TableField<JourneyTypeRecord, String?> = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<JourneyTypeRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<JourneyTypeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<JourneyTypeRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>vehicle_journey.journey_type</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>vehicle_journey.journey_type</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>vehicle_journey.journey_type</code> table reference
     */
    constructor(): this(DSL.name("journey_type"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JourneyTypeRecord>?, parentPath: InverseForeignKey<out Record, JourneyTypeRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, JOURNEY_TYPE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class JourneyTypePath : JourneyType, Path<JourneyTypeRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JourneyTypeRecord>?, parentPath: InverseForeignKey<out Record, JourneyTypeRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<JourneyTypeRecord>): super(alias, aliased)
        override fun `as`(alias: String): JourneyTypePath = JourneyTypePath(DSL.name(alias), this)
        override fun `as`(alias: Name): JourneyTypePath = JourneyTypePath(alias, this)
        override fun `as`(alias: Table<*>): JourneyTypePath = JourneyTypePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else VehicleJourney.VEHICLE_JOURNEY
    override fun getPrimaryKey(): UniqueKey<JourneyTypeRecord> = JOURNEY_TYPE_PKEY

    private lateinit var _vehicleJourney: VehicleJourneyPath

    /**
     * Get the implicit to-many join path to the
     * <code>vehicle_journey.vehicle_journey</code> table
     */
    fun vehicleJourney(): VehicleJourneyPath {
        if (!this::_vehicleJourney.isInitialized)
            _vehicleJourney = VehicleJourneyPath(this, null, VEHICLE_JOURNEY__VEHICLE_JOURNEY_JOURNEY_TYPE_FKEY.inverseKey)

        return _vehicleJourney;
    }

    val vehicleJourney: VehicleJourneyPath
        get(): VehicleJourneyPath = vehicleJourney()
    override fun `as`(alias: String): JourneyType = JourneyType(DSL.name(alias), this)
    override fun `as`(alias: Name): JourneyType = JourneyType(alias, this)
    override fun `as`(alias: Table<*>): JourneyType = JourneyType(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JourneyType = JourneyType(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JourneyType = JourneyType(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JourneyType = JourneyType(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): JourneyType = JourneyType(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JourneyType = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): JourneyType = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): JourneyType = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): JourneyType = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): JourneyType = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JourneyType = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JourneyType = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JourneyType = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JourneyType = where(DSL.notExists(select))
}
