/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_service.tables


import fi.hsl.jore.jore4.jooq.return_value.tables.records.TimetableVersionRecord
import fi.hsl.jore.jore4.jooq.vehicle_service.VehicleService

import java.time.LocalDate
import java.util.UUID

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GetTimetableVersionsByJourneyPatternIds(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TimetableVersionRecord>?,
    parentPath: InverseForeignKey<out Record, TimetableVersionRecord>?,
    aliased: Table<TimetableVersionRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TimetableVersionRecord>(
    alias,
    VehicleService.VEHICLE_SERVICE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids</code>
         */
        val GET_TIMETABLE_VERSIONS_BY_JOURNEY_PATTERN_IDS: GetTimetableVersionsByJourneyPatternIds = GetTimetableVersionsByJourneyPatternIds()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TimetableVersionRecord> = TimetableVersionRecord::class.java

    /**
     * The column
     * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids.vehicle_schedule_frame_id</code>.
     */
    val VEHICLE_SCHEDULE_FRAME_ID: TableField<TimetableVersionRecord, UUID?> = createField(DSL.name("vehicle_schedule_frame_id"), SQLDataType.UUID, this, "")

    /**
     * The column
     * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids.substitute_operating_day_by_line_type_id</code>.
     */
    val SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE_ID: TableField<TimetableVersionRecord, UUID?> = createField(DSL.name("substitute_operating_day_by_line_type_id"), SQLDataType.UUID, this, "")

    /**
     * The column
     * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids.validity_start</code>.
     */
    val VALIDITY_START: TableField<TimetableVersionRecord, LocalDate?> = createField(DSL.name("validity_start"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column
     * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids.validity_end</code>.
     */
    val VALIDITY_END: TableField<TimetableVersionRecord, LocalDate?> = createField(DSL.name("validity_end"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column
     * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids.priority</code>.
     */
    val PRIORITY: TableField<TimetableVersionRecord, Int?> = createField(DSL.name("priority"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column
     * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids.in_effect</code>.
     */
    val IN_EFFECT: TableField<TimetableVersionRecord, Boolean?> = createField(DSL.name("in_effect"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column
     * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids.day_type_id</code>.
     */
    val DAY_TYPE_ID: TableField<TimetableVersionRecord, UUID?> = createField(DSL.name("day_type_id"), SQLDataType.UUID.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TimetableVersionRecord>?): this(alias, null, null, null, aliased, arrayOf(
        DSL.value(null, SQLDataType.UUID.array()),
        DSL.value(null, SQLDataType.LOCALDATE),
        DSL.value(null, SQLDataType.LOCALDATE),
        DSL.value(null, SQLDataType.LOCALDATE)
    ), null)
    private constructor(alias: Name, aliased: Table<TimetableVersionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased
     * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a
     * <code>vehicle_service.get_timetable_versions_by_journey_pattern_ids</code>
     * table reference
     */
    constructor(): this(DSL.name("get_timetable_versions_by_journey_pattern_ids"), null)
    override fun getSchema(): Schema? = if (aliased()) null else VehicleService.VEHICLE_SERVICE
    override fun `as`(alias: String): GetTimetableVersionsByJourneyPatternIds = GetTimetableVersionsByJourneyPatternIds(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): GetTimetableVersionsByJourneyPatternIds = GetTimetableVersionsByJourneyPatternIds(alias, this, parameters)
    override fun `as`(alias: Table<*>): GetTimetableVersionsByJourneyPatternIds = GetTimetableVersionsByJourneyPatternIds(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): GetTimetableVersionsByJourneyPatternIds = GetTimetableVersionsByJourneyPatternIds(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GetTimetableVersionsByJourneyPatternIds = GetTimetableVersionsByJourneyPatternIds(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GetTimetableVersionsByJourneyPatternIds = GetTimetableVersionsByJourneyPatternIds(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(
          journeyPatternIds: Array<UUID?>?
        , startDate: LocalDate?
        , endDate: LocalDate?
        , observationDate: LocalDate?
    ): GetTimetableVersionsByJourneyPatternIds = GetTimetableVersionsByJourneyPatternIds(DSL.name("get_timetable_versions_by_journey_pattern_ids"), null, arrayOf(
        DSL.value(journeyPatternIds, SQLDataType.UUID.array()),
        DSL.value(startDate, SQLDataType.LOCALDATE),
        DSL.value(endDate, SQLDataType.LOCALDATE),
        DSL.value(observationDate, SQLDataType.LOCALDATE)
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          journeyPatternIds: Field<Array<UUID?>?>
        , startDate: Field<LocalDate?>
        , endDate: Field<LocalDate?>
        , observationDate: Field<LocalDate?>
    ): GetTimetableVersionsByJourneyPatternIds = GetTimetableVersionsByJourneyPatternIds(DSL.name("get_timetable_versions_by_journey_pattern_ids"), null, arrayOf(
        journeyPatternIds,
        startDate,
        endDate,
        observationDate
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
