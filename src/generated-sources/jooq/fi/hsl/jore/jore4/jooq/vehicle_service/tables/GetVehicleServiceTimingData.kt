/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_service.tables


import fi.hsl.jore.jore4.jooq.vehicle_service.VehicleService
import fi.hsl.jore.jore4.jooq.vehicle_service.tables.records.GetVehicleServiceTimingDataRecord

import java.util.UUID

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.YearToSecond


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GetVehicleServiceTimingData(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, GetVehicleServiceTimingDataRecord>?,
    parentPath: InverseForeignKey<out Record, GetVehicleServiceTimingDataRecord>?,
    aliased: Table<GetVehicleServiceTimingDataRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<GetVehicleServiceTimingDataRecord>(
    alias,
    VehicleService.VEHICLE_SERVICE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>vehicle_service.get_vehicle_service_timing_data</code>
         */
        val GET_VEHICLE_SERVICE_TIMING_DATA: GetVehicleServiceTimingData = GetVehicleServiceTimingData()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GetVehicleServiceTimingDataRecord> = GetVehicleServiceTimingDataRecord::class.java

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.vehicle_service_id</code>.
     */
    val VEHICLE_SERVICE_ID: TableField<GetVehicleServiceTimingDataRecord, UUID?> = createField(DSL.name("vehicle_service_id"), SQLDataType.UUID, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.service_start</code>.
     */
    val SERVICE_START: TableField<GetVehicleServiceTimingDataRecord, YearToSecond?> = createField(DSL.name("service_start"), SQLDataType.INTERVAL, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.service_end</code>.
     */
    val SERVICE_END: TableField<GetVehicleServiceTimingDataRecord, YearToSecond?> = createField(DSL.name("service_end"), SQLDataType.INTERVAL, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.block_id</code>.
     */
    val BLOCK_ID: TableField<GetVehicleServiceTimingDataRecord, UUID?> = createField(DSL.name("block_id"), SQLDataType.UUID, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.block_start</code>.
     */
    val BLOCK_START: TableField<GetVehicleServiceTimingDataRecord, YearToSecond?> = createField(DSL.name("block_start"), SQLDataType.INTERVAL, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.block_end</code>.
     */
    val BLOCK_END: TableField<GetVehicleServiceTimingDataRecord, YearToSecond?> = createField(DSL.name("block_end"), SQLDataType.INTERVAL, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.preparing_time</code>.
     */
    val PREPARING_TIME: TableField<GetVehicleServiceTimingDataRecord, YearToSecond?> = createField(DSL.name("preparing_time"), SQLDataType.INTERVAL, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.finishing_time</code>.
     */
    val FINISHING_TIME: TableField<GetVehicleServiceTimingDataRecord, YearToSecond?> = createField(DSL.name("finishing_time"), SQLDataType.INTERVAL, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.vehicle_journey_id</code>.
     */
    val VEHICLE_JOURNEY_ID: TableField<GetVehicleServiceTimingDataRecord, UUID?> = createField(DSL.name("vehicle_journey_id"), SQLDataType.UUID, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.journey_start</code>.
     */
    val JOURNEY_START: TableField<GetVehicleServiceTimingDataRecord, YearToSecond?> = createField(DSL.name("journey_start"), SQLDataType.INTERVAL, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.journey_end</code>.
     */
    val JOURNEY_END: TableField<GetVehicleServiceTimingDataRecord, YearToSecond?> = createField(DSL.name("journey_end"), SQLDataType.INTERVAL, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.journey_first_stop_departure</code>.
     */
    val JOURNEY_FIRST_STOP_DEPARTURE: TableField<GetVehicleServiceTimingDataRecord, YearToSecond?> = createField(DSL.name("journey_first_stop_departure"), SQLDataType.INTERVAL, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.journey_last_stop_arrival</code>.
     */
    val JOURNEY_LAST_STOP_ARRIVAL: TableField<GetVehicleServiceTimingDataRecord, YearToSecond?> = createField(DSL.name("journey_last_stop_arrival"), SQLDataType.INTERVAL, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.turnaround_time</code>.
     */
    val TURNAROUND_TIME: TableField<GetVehicleServiceTimingDataRecord, YearToSecond?> = createField(DSL.name("turnaround_time"), SQLDataType.INTERVAL, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.layover_time</code>.
     */
    val LAYOVER_TIME: TableField<GetVehicleServiceTimingDataRecord, YearToSecond?> = createField(DSL.name("layover_time"), SQLDataType.INTERVAL, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.timetabled_passing_time_id</code>.
     */
    val TIMETABLED_PASSING_TIME_ID: TableField<GetVehicleServiceTimingDataRecord, UUID?> = createField(DSL.name("timetabled_passing_time_id"), SQLDataType.UUID, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.stop_departure_time</code>.
     */
    val STOP_DEPARTURE_TIME: TableField<GetVehicleServiceTimingDataRecord, YearToSecond?> = createField(DSL.name("stop_departure_time"), SQLDataType.INTERVAL, this, "")

    /**
     * The column
     * <code>vehicle_service.get_vehicle_service_timing_data.stop_arrival_time</code>.
     */
    val STOP_ARRIVAL_TIME: TableField<GetVehicleServiceTimingDataRecord, YearToSecond?> = createField(DSL.name("stop_arrival_time"), SQLDataType.INTERVAL, this, "")

    private constructor(alias: Name, aliased: Table<GetVehicleServiceTimingDataRecord>?): this(alias, null, null, null, aliased, arrayOf(
        DSL.value(null, SQLDataType.UUID.array())
    ), null)
    private constructor(alias: Name, aliased: Table<GetVehicleServiceTimingDataRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased
     * <code>vehicle_service.get_vehicle_service_timing_data</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>vehicle_service.get_vehicle_service_timing_data</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>vehicle_service.get_vehicle_service_timing_data</code>
     * table reference
     */
    constructor(): this(DSL.name("get_vehicle_service_timing_data"), null)
    override fun getSchema(): Schema? = if (aliased()) null else VehicleService.VEHICLE_SERVICE
    override fun `as`(alias: String): GetVehicleServiceTimingData = GetVehicleServiceTimingData(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): GetVehicleServiceTimingData = GetVehicleServiceTimingData(alias, this, parameters)
    override fun `as`(alias: Table<*>): GetVehicleServiceTimingData = GetVehicleServiceTimingData(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): GetVehicleServiceTimingData = GetVehicleServiceTimingData(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GetVehicleServiceTimingData = GetVehicleServiceTimingData(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GetVehicleServiceTimingData = GetVehicleServiceTimingData(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(
          vehicleServiceIds: Array<UUID?>?
    ): GetVehicleServiceTimingData = GetVehicleServiceTimingData(DSL.name("get_vehicle_service_timing_data"), null, arrayOf(
        DSL.value(vehicleServiceIds, SQLDataType.UUID.array())
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          vehicleServiceIds: Field<Array<UUID?>?>
    ): GetVehicleServiceTimingData = GetVehicleServiceTimingData(DSL.name("get_vehicle_service_timing_data"), null, arrayOf(
        vehicleServiceIds
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
