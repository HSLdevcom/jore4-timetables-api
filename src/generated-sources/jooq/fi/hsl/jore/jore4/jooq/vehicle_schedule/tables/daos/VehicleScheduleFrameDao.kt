/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.daos


import fi.hsl.jore.jore4.jooq.AbstractSpringDAOImpl
import fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.VehicleScheduleFrame
import fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.records.VehicleScheduleFrameRecord

import java.time.LocalDate
import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.JSONB
import org.springframework.stereotype.Repository


/**
 * A coherent set of BLOCKS, COMPOUND BLOCKs, COURSEs of JOURNEY and VEHICLE
 * SCHEDULEs to which the same set of VALIDITY CONDITIONs have been assigned.
 * Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=3:7:2:993 
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class VehicleScheduleFrameDao(configuration: Configuration?) : AbstractSpringDAOImpl<VehicleScheduleFrameRecord, fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame, UUID>(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME, fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame::class.java, configuration) {

    /**
     * Create a new VehicleScheduleFrameDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame): UUID? = o.vehicleScheduleFrameId

    /**
     * Fetch records that have <code>vehicle_schedule_frame_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfVehicleScheduleFrameId(lowerInclusive: UUID?, upperInclusive: UUID?): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetchRange(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.VEHICLE_SCHEDULE_FRAME_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vehicle_schedule_frame_id IN
     * (values)</code>
     */
    fun fetchByVehicleScheduleFrameId(vararg values: UUID): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetch(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.VEHICLE_SCHEDULE_FRAME_ID, *values)

    /**
     * Fetch a unique record that has <code>vehicle_schedule_frame_id =
     * value</code>
     */
    fun fetchOneByVehicleScheduleFrameId(value: UUID): fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame? = fetchOne(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.VEHICLE_SCHEDULE_FRAME_ID, value)

    /**
     * Fetch records that have <code>name_i18n BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfNameI18n(lowerInclusive: JSONB?, upperInclusive: JSONB?): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetchRange(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.NAME_I18N, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name_i18n IN (values)</code>
     */
    fun fetchByNameI18n(vararg values: JSONB): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetch(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.NAME_I18N, *values)

    /**
     * Fetch records that have <code>validity_start BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfValidityStart(lowerInclusive: LocalDate, upperInclusive: LocalDate): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetchRange(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.VALIDITY_START, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>validity_start IN (values)</code>
     */
    fun fetchByValidityStart(vararg values: LocalDate): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetch(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.VALIDITY_START, *values)

    /**
     * Fetch records that have <code>validity_end BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfValidityEnd(lowerInclusive: LocalDate, upperInclusive: LocalDate): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetchRange(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.VALIDITY_END, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>validity_end IN (values)</code>
     */
    fun fetchByValidityEnd(vararg values: LocalDate): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetch(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.VALIDITY_END, *values)

    /**
     * Fetch records that have <code>priority BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPriority(lowerInclusive: Int, upperInclusive: Int): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetchRange(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.PRIORITY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>priority IN (values)</code>
     */
    fun fetchByPriority(vararg values: Int): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetch(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.PRIORITY, *values.toTypedArray())

    /**
     * Fetch records that have <code>label BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLabel(lowerInclusive: String, upperInclusive: String): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetchRange(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.LABEL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>label IN (values)</code>
     */
    fun fetchByLabel(vararg values: String): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetch(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.LABEL, *values)

    /**
     * Fetch records that have <code>booking_label BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfBookingLabel(lowerInclusive: String?, upperInclusive: String?): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetchRange(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.BOOKING_LABEL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>booking_label IN (values)</code>
     */
    fun fetchByBookingLabel(vararg values: String): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetch(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.BOOKING_LABEL, *values)

    /**
     * Fetch records that have <code>booking_description_i18n BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfBookingDescriptionI18n(lowerInclusive: JSONB?, upperInclusive: JSONB?): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetchRange(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.BOOKING_DESCRIPTION_I18N, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>booking_description_i18n IN (values)</code>
     */
    fun fetchByBookingDescriptionI18n(vararg values: JSONB): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetch(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.BOOKING_DESCRIPTION_I18N, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetchRange(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos.VehicleScheduleFrame> = fetch(VehicleScheduleFrame.VEHICLE_SCHEDULE_FRAME.CREATED_AT, *values)
}
