/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.return_value.tables.records


import fi.hsl.jore.jore4.jooq.return_value.tables.TimetableVersion

import java.time.LocalDate
import java.util.UUID

import org.jooq.impl.TableRecordImpl


/**
 * This return value is used for functions that determine what timetable
 * versions are in effect. In effect will be true for all the timetable version
 * rows that
 * are valid on given observation day and are the highest priority of that day
 * type. As an example if we have:
 * Saturday Standard priority valid for 1.1.2023 - 30.6.2023
 * Saturday Temporary priority valid for 1.5.2023 - 31.5.2023
 * Saturday Special priority valid for 20.5.2023 - 20.5.2023
 * 
 * If we check the timetable versions for the date 1.2.2023, for Saturday we
 * only get the Standard priority, beacuse it is the only one valid on that
 * time. So that 
 * row would have in_effect = true. 
 * If we check the timetable versions for the date 1.5.2023, for Saturday we
 * would get the Standard and the Temporary priority for this date, as they are
 * both valid.
 * But only the higher priority is in effect on this date. So the Saturday
 * Temporary priority would have in_effect = true, and the Saturday Standard
 * priority would 
 * have in_effect = false.
 * If we check the timetable versions for the date 20.5.2023, for Saturday we
 * have all three valid, but only one can be in_effect, and that would be the
 * Special 
 * priority in this case.

 */
@Suppress("UNCHECKED_CAST")
open class TimetableVersionRecord private constructor() : TableRecordImpl<TimetableVersionRecord>(TimetableVersion.TIMETABLE_VERSION) {

    open var vehicleScheduleFrameId: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var substituteOperatingDayByLineTypeId: UUID?
        set(value): Unit = set(1, value)
        get(): UUID? = get(1) as UUID?

    open var validityStart: LocalDate
        set(value): Unit = set(2, value)
        get(): LocalDate = get(2) as LocalDate

    open var validityEnd: LocalDate
        set(value): Unit = set(3, value)
        get(): LocalDate = get(3) as LocalDate

    open var priority: Int
        set(value): Unit = set(4, value)
        get(): Int = get(4) as Int

    open var inEffect: Boolean
        set(value): Unit = set(5, value)
        get(): Boolean = get(5) as Boolean

    open var dayTypeId: UUID
        set(value): Unit = set(6, value)
        get(): UUID = get(6) as UUID

    /**
     * Create a detached, initialised TimetableVersionRecord
     */
    constructor(vehicleScheduleFrameId: UUID? = null, substituteOperatingDayByLineTypeId: UUID? = null, validityStart: LocalDate, validityEnd: LocalDate, priority: Int, inEffect: Boolean, dayTypeId: UUID): this() {
        this.vehicleScheduleFrameId = vehicleScheduleFrameId
        this.substituteOperatingDayByLineTypeId = substituteOperatingDayByLineTypeId
        this.validityStart = validityStart
        this.validityEnd = validityEnd
        this.priority = priority
        this.inEffect = inEffect
        this.dayTypeId = dayTypeId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised TimetableVersionRecord
     */
    constructor(value: fi.hsl.jore.jore4.jooq.return_value.tables.pojos.TimetableVersion?): this() {
        if (value != null) {
            this.vehicleScheduleFrameId = value.vehicleScheduleFrameId
            this.substituteOperatingDayByLineTypeId = value.substituteOperatingDayByLineTypeId
            this.validityStart = value.validityStart
            this.validityEnd = value.validityEnd
            this.priority = value.priority
            this.inEffect = value.inEffect
            this.dayTypeId = value.dayTypeId
            resetChangedOnNotNull()
        }
    }
}
