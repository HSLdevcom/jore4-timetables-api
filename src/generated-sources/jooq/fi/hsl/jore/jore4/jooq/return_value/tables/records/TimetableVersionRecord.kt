/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.return_value.tables.records


import fi.hsl.jore.jore4.jooq.return_value.tables.TimetableVersion

import java.time.LocalDate
import java.util.UUID

import org.jooq.Field
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.TableRecordImpl


/**
 * This return value is used for functions that determine what timetable
 * versions are in effect. In effect will be true for all the timetable version
 * rows that
 * are valid on given observation day and are the highest priority of that day
 * type. As an example if we have:
 * Saturday Standard priority valid for 1.1.2023 - 30.6.2023
 * Saturday Temporary priority valid for 1.5.2023 - 31.5.2023
 * Saturday Special priority valid for 20.5.2023 - 20.5.2023
 * 
 * If we check the timetable versions for the date 1.2.2023, for Saturday we
 * only get the Standard priority, beacuse it is the only one valid on that
 * time. So that 
 * row would have in_effect = true. 
 * If we check the timetable versions for the date 1.5.2023, for Saturday we
 * would get the Standard and the Temporary priority for this date, as they are
 * both valid.
 * But only the higher priority is in effect on this date. So the Saturday
 * Temporary priority would have in_effect = true, and the Saturday Standard
 * priority would 
 * have in_effect = false.
 * If we check the timetable versions for the date 20.5.2023, for Saturday we
 * have all three valid, but only one can be in_effect, and that would be the
 * Special 
 * priority in this case.

 */
@Suppress("UNCHECKED_CAST")
open class TimetableVersionRecord() : TableRecordImpl<TimetableVersionRecord>(TimetableVersion.TIMETABLE_VERSION), Record7<UUID?, UUID?, LocalDate?, LocalDate?, Int?, Boolean?, UUID?> {

    open var vehicleScheduleFrameId: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var substituteOperatingDayByLineTypeId: UUID?
        set(value): Unit = set(1, value)
        get(): UUID? = get(1) as UUID?

    open var validityStart: LocalDate?
        set(value): Unit = set(2, value)
        get(): LocalDate? = get(2) as LocalDate?

    open var validityEnd: LocalDate?
        set(value): Unit = set(3, value)
        get(): LocalDate? = get(3) as LocalDate?

    open var priority: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var inEffect: Boolean?
        set(value): Unit = set(5, value)
        get(): Boolean? = get(5) as Boolean?

    open var dayTypeId: UUID?
        set(value): Unit = set(6, value)
        get(): UUID? = get(6) as UUID?

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<UUID?, UUID?, LocalDate?, LocalDate?, Int?, Boolean?, UUID?> = super.fieldsRow() as Row7<UUID?, UUID?, LocalDate?, LocalDate?, Int?, Boolean?, UUID?>
    override fun valuesRow(): Row7<UUID?, UUID?, LocalDate?, LocalDate?, Int?, Boolean?, UUID?> = super.valuesRow() as Row7<UUID?, UUID?, LocalDate?, LocalDate?, Int?, Boolean?, UUID?>
    override fun field1(): Field<UUID?> = TimetableVersion.TIMETABLE_VERSION.VEHICLE_SCHEDULE_FRAME_ID
    override fun field2(): Field<UUID?> = TimetableVersion.TIMETABLE_VERSION.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE_ID
    override fun field3(): Field<LocalDate?> = TimetableVersion.TIMETABLE_VERSION.VALIDITY_START
    override fun field4(): Field<LocalDate?> = TimetableVersion.TIMETABLE_VERSION.VALIDITY_END
    override fun field5(): Field<Int?> = TimetableVersion.TIMETABLE_VERSION.PRIORITY
    override fun field6(): Field<Boolean?> = TimetableVersion.TIMETABLE_VERSION.IN_EFFECT
    override fun field7(): Field<UUID?> = TimetableVersion.TIMETABLE_VERSION.DAY_TYPE_ID
    override fun component1(): UUID? = vehicleScheduleFrameId
    override fun component2(): UUID? = substituteOperatingDayByLineTypeId
    override fun component3(): LocalDate? = validityStart
    override fun component4(): LocalDate? = validityEnd
    override fun component5(): Int? = priority
    override fun component6(): Boolean? = inEffect
    override fun component7(): UUID? = dayTypeId
    override fun value1(): UUID? = vehicleScheduleFrameId
    override fun value2(): UUID? = substituteOperatingDayByLineTypeId
    override fun value3(): LocalDate? = validityStart
    override fun value4(): LocalDate? = validityEnd
    override fun value5(): Int? = priority
    override fun value6(): Boolean? = inEffect
    override fun value7(): UUID? = dayTypeId

    override fun value1(value: UUID?): TimetableVersionRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UUID?): TimetableVersionRecord {
        set(1, value)
        return this
    }

    override fun value3(value: LocalDate?): TimetableVersionRecord {
        set(2, value)
        return this
    }

    override fun value4(value: LocalDate?): TimetableVersionRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Int?): TimetableVersionRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Boolean?): TimetableVersionRecord {
        set(5, value)
        return this
    }

    override fun value7(value: UUID?): TimetableVersionRecord {
        set(6, value)
        return this
    }

    override fun values(value1: UUID?, value2: UUID?, value3: LocalDate?, value4: LocalDate?, value5: Int?, value6: Boolean?, value7: UUID?): TimetableVersionRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised TimetableVersionRecord
     */
    constructor(vehicleScheduleFrameId: UUID? = null, substituteOperatingDayByLineTypeId: UUID? = null, validityStart: LocalDate? = null, validityEnd: LocalDate? = null, priority: Int? = null, inEffect: Boolean? = null, dayTypeId: UUID? = null): this() {
        this.vehicleScheduleFrameId = vehicleScheduleFrameId
        this.substituteOperatingDayByLineTypeId = substituteOperatingDayByLineTypeId
        this.validityStart = validityStart
        this.validityEnd = validityEnd
        this.priority = priority
        this.inEffect = inEffect
        this.dayTypeId = dayTypeId
        resetChangedOnNotNull()
    }
}
