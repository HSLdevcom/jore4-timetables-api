/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.journey_pattern.tables.daos


import fi.hsl.jore.jore4.jooq.AbstractSpringDAOImpl
import fi.hsl.jore.jore4.jooq.journey_pattern.tables.JourneyPatternRef
import fi.hsl.jore.jore4.jooq.journey_pattern.tables.records.JourneyPatternRefRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.springframework.stereotype.Repository


/**
 * Reference to a given snapshot of a JOURNEY PATTERN for a given operating day.
 * Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=2:3:4:729 
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class JourneyPatternRefDao(configuration: Configuration?) : AbstractSpringDAOImpl<JourneyPatternRefRecord, fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef, UUID>(JourneyPatternRef.JOURNEY_PATTERN_REF, fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef::class.java, configuration) {

    /**
     * Create a new JourneyPatternRefDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef): UUID? = o.journeyPatternRefId

    /**
     * Fetch records that have <code>journey_pattern_ref_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfJourneyPatternRefId(lowerInclusive: UUID?, upperInclusive: UUID?): List<fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef> = fetchRange(JourneyPatternRef.JOURNEY_PATTERN_REF.JOURNEY_PATTERN_REF_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>journey_pattern_ref_id IN (values)</code>
     */
    fun fetchByJourneyPatternRefId(vararg values: UUID): List<fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef> = fetch(JourneyPatternRef.JOURNEY_PATTERN_REF.JOURNEY_PATTERN_REF_ID, *values)

    /**
     * Fetch a unique record that has <code>journey_pattern_ref_id =
     * value</code>
     */
    fun fetchOneByJourneyPatternRefId(value: UUID): fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef? = fetchOne(JourneyPatternRef.JOURNEY_PATTERN_REF.JOURNEY_PATTERN_REF_ID, value)

    /**
     * Fetch records that have <code>journey_pattern_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfJourneyPatternId(lowerInclusive: UUID, upperInclusive: UUID): List<fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef> = fetchRange(JourneyPatternRef.JOURNEY_PATTERN_REF.JOURNEY_PATTERN_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>journey_pattern_id IN (values)</code>
     */
    fun fetchByJourneyPatternId(vararg values: UUID): List<fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef> = fetch(JourneyPatternRef.JOURNEY_PATTERN_REF.JOURNEY_PATTERN_ID, *values)

    /**
     * Fetch records that have <code>observation_timestamp BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfObservationTimestamp(lowerInclusive: OffsetDateTime, upperInclusive: OffsetDateTime): List<fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef> = fetchRange(JourneyPatternRef.JOURNEY_PATTERN_REF.OBSERVATION_TIMESTAMP, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>observation_timestamp IN (values)</code>
     */
    fun fetchByObservationTimestamp(vararg values: OffsetDateTime): List<fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef> = fetch(JourneyPatternRef.JOURNEY_PATTERN_REF.OBSERVATION_TIMESTAMP, *values)

    /**
     * Fetch records that have <code>snapshot_timestamp BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfSnapshotTimestamp(lowerInclusive: OffsetDateTime, upperInclusive: OffsetDateTime): List<fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef> = fetchRange(JourneyPatternRef.JOURNEY_PATTERN_REF.SNAPSHOT_TIMESTAMP, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>snapshot_timestamp IN (values)</code>
     */
    fun fetchBySnapshotTimestamp(vararg values: OffsetDateTime): List<fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef> = fetch(JourneyPatternRef.JOURNEY_PATTERN_REF.SNAPSHOT_TIMESTAMP, *values)

    /**
     * Fetch records that have <code>type_of_line BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTypeOfLine(lowerInclusive: String, upperInclusive: String): List<fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef> = fetchRange(JourneyPatternRef.JOURNEY_PATTERN_REF.TYPE_OF_LINE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>type_of_line IN (values)</code>
     */
    fun fetchByTypeOfLine(vararg values: String): List<fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef> = fetch(JourneyPatternRef.JOURNEY_PATTERN_REF.TYPE_OF_LINE, *values)
}
