/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_schedule.tables.pojos


import java.io.Serializable
import java.util.UUID


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
data class GetOverlappingSchedules(
    var currentVehicleScheduleFrameId: UUID? = null,
    var otherVehicleScheduleFrameId: UUID? = null,
    var journeyPatternId: UUID? = null,
    var activeOnDayOfWeek: Int? = null,
    var priority: Int? = null,
    var currentValidityRange: Any? = null,
    var otherValidityRange: Any? = null,
    var validityIntersection: Any? = null
): Serializable {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: GetOverlappingSchedules = other as GetOverlappingSchedules
        if (this.currentVehicleScheduleFrameId == null) {
            if (o.currentVehicleScheduleFrameId != null)
                return false
        }
        else if (this.currentVehicleScheduleFrameId != o.currentVehicleScheduleFrameId)
            return false
        if (this.otherVehicleScheduleFrameId == null) {
            if (o.otherVehicleScheduleFrameId != null)
                return false
        }
        else if (this.otherVehicleScheduleFrameId != o.otherVehicleScheduleFrameId)
            return false
        if (this.journeyPatternId == null) {
            if (o.journeyPatternId != null)
                return false
        }
        else if (this.journeyPatternId != o.journeyPatternId)
            return false
        if (this.activeOnDayOfWeek == null) {
            if (o.activeOnDayOfWeek != null)
                return false
        }
        else if (this.activeOnDayOfWeek != o.activeOnDayOfWeek)
            return false
        if (this.priority == null) {
            if (o.priority != null)
                return false
        }
        else if (this.priority != o.priority)
            return false
        if (this.currentValidityRange == null) {
            if (o.currentValidityRange != null)
                return false
        }
        else if (this.currentValidityRange != o.currentValidityRange)
            return false
        if (this.otherValidityRange == null) {
            if (o.otherValidityRange != null)
                return false
        }
        else if (this.otherValidityRange != o.otherValidityRange)
            return false
        if (this.validityIntersection == null) {
            if (o.validityIntersection != null)
                return false
        }
        else if (this.validityIntersection != o.validityIntersection)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.currentVehicleScheduleFrameId == null) 0 else this.currentVehicleScheduleFrameId.hashCode())
        result = prime * result + (if (this.otherVehicleScheduleFrameId == null) 0 else this.otherVehicleScheduleFrameId.hashCode())
        result = prime * result + (if (this.journeyPatternId == null) 0 else this.journeyPatternId.hashCode())
        result = prime * result + (if (this.activeOnDayOfWeek == null) 0 else this.activeOnDayOfWeek.hashCode())
        result = prime * result + (if (this.priority == null) 0 else this.priority.hashCode())
        result = prime * result + (if (this.currentValidityRange == null) 0 else this.currentValidityRange.hashCode())
        result = prime * result + (if (this.otherValidityRange == null) 0 else this.otherValidityRange.hashCode())
        result = prime * result + (if (this.validityIntersection == null) 0 else this.validityIntersection.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("GetOverlappingSchedules (")

        sb.append(currentVehicleScheduleFrameId)
        sb.append(", ").append(otherVehicleScheduleFrameId)
        sb.append(", ").append(journeyPatternId)
        sb.append(", ").append(activeOnDayOfWeek)
        sb.append(", ").append(priority)
        sb.append(", ").append(currentValidityRange)
        sb.append(", ").append(otherValidityRange)
        sb.append(", ").append(validityIntersection)

        sb.append(")")
        return sb.toString()
    }
}
