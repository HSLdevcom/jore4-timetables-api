/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.journey_pattern.tables.records


import fi.hsl.jore.jore4.jooq.journey_pattern.tables.JourneyPatternRef

import java.time.LocalDate
import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * Reference to a given snapshot of a JOURNEY PATTERN for a given operating day.
 * Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=2:3:4:729 
 */
@Suppress("UNCHECKED_CAST")
open class JourneyPatternRefRecord private constructor() : UpdatableRecordImpl<JourneyPatternRefRecord>(JourneyPatternRef.JOURNEY_PATTERN_REF) {

    open var journeyPatternRefId: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var journeyPatternId: UUID
        set(value): Unit = set(1, value)
        get(): UUID = get(1) as UUID

    open var observationTimestamp: OffsetDateTime
        set(value): Unit = set(2, value)
        get(): OffsetDateTime = get(2) as OffsetDateTime

    open var snapshotTimestamp: OffsetDateTime
        set(value): Unit = set(3, value)
        get(): OffsetDateTime = get(3) as OffsetDateTime

    open var typeOfLine: String
        set(value): Unit = set(4, value)
        get(): String = get(4) as String

    open var routeLabel: String
        set(value): Unit = set(5, value)
        get(): String = get(5) as String

    open var routeDirection: String
        set(value): Unit = set(6, value)
        get(): String = get(6) as String

    open var routeValidityStart: LocalDate?
        set(value): Unit = set(7, value)
        get(): LocalDate? = get(7) as LocalDate?

    open var routeValidityEnd: LocalDate?
        set(value): Unit = set(8, value)
        get(): LocalDate? = get(8) as LocalDate?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised JourneyPatternRefRecord
     */
    constructor(journeyPatternRefId: UUID? = null, journeyPatternId: UUID, observationTimestamp: OffsetDateTime, snapshotTimestamp: OffsetDateTime, typeOfLine: String, routeLabel: String, routeDirection: String, routeValidityStart: LocalDate? = null, routeValidityEnd: LocalDate? = null): this() {
        this.journeyPatternRefId = journeyPatternRefId
        this.journeyPatternId = journeyPatternId
        this.observationTimestamp = observationTimestamp
        this.snapshotTimestamp = snapshotTimestamp
        this.typeOfLine = typeOfLine
        this.routeLabel = routeLabel
        this.routeDirection = routeDirection
        this.routeValidityStart = routeValidityStart
        this.routeValidityEnd = routeValidityEnd
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised JourneyPatternRefRecord
     */
    constructor(value: fi.hsl.jore.jore4.jooq.journey_pattern.tables.pojos.JourneyPatternRef?): this() {
        if (value != null) {
            this.journeyPatternRefId = value.journeyPatternRefId
            this.journeyPatternId = value.journeyPatternId
            this.observationTimestamp = value.observationTimestamp
            this.snapshotTimestamp = value.snapshotTimestamp
            this.typeOfLine = value.typeOfLine
            this.routeLabel = value.routeLabel
            this.routeDirection = value.routeDirection
            this.routeValidityStart = value.routeValidityStart
            this.routeValidityEnd = value.routeValidityEnd
            resetChangedOnNotNull()
        }
    }
}
