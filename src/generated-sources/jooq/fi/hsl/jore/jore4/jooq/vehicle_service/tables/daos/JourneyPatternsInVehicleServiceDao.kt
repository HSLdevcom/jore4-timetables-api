/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_service.tables.daos


import fi.hsl.jore.jore4.jooq.AbstractSpringDAOImpl
import fi.hsl.jore.jore4.jooq.vehicle_service.tables.JourneyPatternsInVehicleService
import fi.hsl.jore.jore4.jooq.vehicle_service.tables.records.JourneyPatternsInVehicleServiceRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.Record2
import org.springframework.stereotype.Repository


/**
 * A denormalized table containing relationships between vehicle_services and
 * journey_patterns (via journey_pattern_ref.journey_pattern_id).
 *  Without this table this relationship could be found via vehicle_service
 * -&gt; block -&gt; vehicle_journey -&gt; journey_pattern_ref.
 *  Kept up to date with triggers, should not be updated manually.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class JourneyPatternsInVehicleServiceDao(configuration: Configuration?) : AbstractSpringDAOImpl<JourneyPatternsInVehicleServiceRecord, fi.hsl.jore.jore4.jooq.vehicle_service.tables.pojos.JourneyPatternsInVehicleService, Record2<UUID?, UUID?>>(JourneyPatternsInVehicleService.JOURNEY_PATTERNS_IN_VEHICLE_SERVICE, fi.hsl.jore.jore4.jooq.vehicle_service.tables.pojos.JourneyPatternsInVehicleService::class.java, configuration) {

    /**
     * Create a new JourneyPatternsInVehicleServiceDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: fi.hsl.jore.jore4.jooq.vehicle_service.tables.pojos.JourneyPatternsInVehicleService): Record2<UUID?, UUID?> = compositeKeyRecord(o.vehicleServiceId, o.journeyPatternId)

    /**
     * Fetch records that have <code>vehicle_service_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfVehicleServiceId(lowerInclusive: UUID, upperInclusive: UUID): List<fi.hsl.jore.jore4.jooq.vehicle_service.tables.pojos.JourneyPatternsInVehicleService> = fetchRange(JourneyPatternsInVehicleService.JOURNEY_PATTERNS_IN_VEHICLE_SERVICE.VEHICLE_SERVICE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vehicle_service_id IN (values)</code>
     */
    fun fetchByVehicleServiceId(vararg values: UUID): List<fi.hsl.jore.jore4.jooq.vehicle_service.tables.pojos.JourneyPatternsInVehicleService> = fetch(JourneyPatternsInVehicleService.JOURNEY_PATTERNS_IN_VEHICLE_SERVICE.VEHICLE_SERVICE_ID, *values)

    /**
     * Fetch records that have <code>journey_pattern_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfJourneyPatternId(lowerInclusive: UUID, upperInclusive: UUID): List<fi.hsl.jore.jore4.jooq.vehicle_service.tables.pojos.JourneyPatternsInVehicleService> = fetchRange(JourneyPatternsInVehicleService.JOURNEY_PATTERNS_IN_VEHICLE_SERVICE.JOURNEY_PATTERN_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>journey_pattern_id IN (values)</code>
     */
    fun fetchByJourneyPatternId(vararg values: UUID): List<fi.hsl.jore.jore4.jooq.vehicle_service.tables.pojos.JourneyPatternsInVehicleService> = fetch(JourneyPatternsInVehicleService.JOURNEY_PATTERNS_IN_VEHICLE_SERVICE.JOURNEY_PATTERN_ID, *values)

    /**
     * Fetch records that have <code>reference_count BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfReferenceCount(lowerInclusive: Int, upperInclusive: Int): List<fi.hsl.jore.jore4.jooq.vehicle_service.tables.pojos.JourneyPatternsInVehicleService> = fetchRange(JourneyPatternsInVehicleService.JOURNEY_PATTERNS_IN_VEHICLE_SERVICE.REFERENCE_COUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>reference_count IN (values)</code>
     */
    fun fetchByReferenceCount(vararg values: Int): List<fi.hsl.jore.jore4.jooq.vehicle_service.tables.pojos.JourneyPatternsInVehicleService> = fetch(JourneyPatternsInVehicleService.JOURNEY_PATTERNS_IN_VEHICLE_SERVICE.REFERENCE_COUNT, *values.toTypedArray())
}
