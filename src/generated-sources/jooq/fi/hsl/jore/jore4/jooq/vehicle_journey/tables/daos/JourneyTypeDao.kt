/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_journey.tables.daos


import fi.hsl.jore.jore4.jooq.AbstractSpringDAOImpl
import fi.hsl.jore.jore4.jooq.vehicle_journey.tables.JourneyType
import fi.hsl.jore.jore4.jooq.vehicle_journey.tables.records.JourneyTypeRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.springframework.stereotype.Repository


/**
 * Enum table for defining allowed journey types.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class JourneyTypeDao(configuration: Configuration?) : AbstractSpringDAOImpl<JourneyTypeRecord, fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.JourneyType, String>(JourneyType.JOURNEY_TYPE, fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.JourneyType::class.java, configuration) {

    /**
     * Create a new JourneyTypeDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.JourneyType): String = o.type

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfType(lowerInclusive: String, upperInclusive: String): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.JourneyType> = fetchRange(JourneyType.JOURNEY_TYPE.TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    fun fetchByType(vararg values: String): List<fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.JourneyType> = fetch(JourneyType.JOURNEY_TYPE.TYPE, *values)

    /**
     * Fetch a unique record that has <code>type = value</code>
     */
    fun fetchOneByType(value: String): fi.hsl.jore.jore4.jooq.vehicle_journey.tables.pojos.JourneyType? = fetchOne(JourneyType.JOURNEY_TYPE.TYPE, value)
}
