/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.route.tables


import fi.hsl.jore.jore4.jooq.journey_pattern.keys.JOURNEY_PATTERN_REF__JOURNEY_PATTERN_REF_ROUTE_DIRECTION_FKEY
import fi.hsl.jore.jore4.jooq.journey_pattern.tables.JourneyPatternRef.JourneyPatternRefPath
import fi.hsl.jore.jore4.jooq.route.Route
import fi.hsl.jore.jore4.jooq.route.keys.DIRECTION_PKEY
import fi.hsl.jore.jore4.jooq.route.keys.DIRECTION__DIRECTION_THE_OPPOSITE_OF_DIRECTION_FKEY
import fi.hsl.jore.jore4.jooq.route.tables.Direction.DirectionPath
import fi.hsl.jore.jore4.jooq.route.tables.records.DirectionRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * The route directions from Transmodel
 */
@Suppress("UNCHECKED_CAST")
open class Direction(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, DirectionRecord>?,
    parentPath: InverseForeignKey<out Record, DirectionRecord>?,
    aliased: Table<DirectionRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<DirectionRecord>(
    alias,
    Route.ROUTE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("The route directions from Transmodel"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>route.direction</code>
         */
        val DIRECTION: Direction = Direction()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DirectionRecord> = DirectionRecord::class.java

    /**
     * The column <code>route.direction.direction</code>. The name of the route
     * direction
     */
    val DIRECTION_: TableField<DirectionRecord, String?> = createField(DSL.name("direction"), SQLDataType.CLOB.nullable(false), this, "The name of the route direction")

    /**
     * The column <code>route.direction.the_opposite_of_direction</code>. The
     * opposite direction
     */
    val THE_OPPOSITE_OF_DIRECTION: TableField<DirectionRecord, String?> = createField(DSL.name("the_opposite_of_direction"), SQLDataType.CLOB, this, "The opposite direction")

    private constructor(alias: Name, aliased: Table<DirectionRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<DirectionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<DirectionRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>route.direction</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>route.direction</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>route.direction</code> table reference
     */
    constructor(): this(DSL.name("direction"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, DirectionRecord>?, parentPath: InverseForeignKey<out Record, DirectionRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, DIRECTION, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class DirectionPath : Direction, Path<DirectionRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, DirectionRecord>?, parentPath: InverseForeignKey<out Record, DirectionRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<DirectionRecord>): super(alias, aliased)
        override fun `as`(alias: String): DirectionPath = DirectionPath(DSL.name(alias), this)
        override fun `as`(alias: Name): DirectionPath = DirectionPath(alias, this)
        override fun `as`(alias: Table<*>): DirectionPath = DirectionPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Route.ROUTE
    override fun getPrimaryKey(): UniqueKey<DirectionRecord> = DIRECTION_PKEY
    override fun getReferences(): List<ForeignKey<DirectionRecord, *>> = listOf(DIRECTION__DIRECTION_THE_OPPOSITE_OF_DIRECTION_FKEY)

    private lateinit var _direction: DirectionPath

    /**
     * Get the implicit join path to the <code>route.direction</code> table.
     */
    fun direction(): DirectionPath {
        if (!this::_direction.isInitialized)
            _direction = DirectionPath(this, DIRECTION__DIRECTION_THE_OPPOSITE_OF_DIRECTION_FKEY, null)

        return _direction;
    }

    val direction: DirectionPath
        get(): DirectionPath = direction()

    private lateinit var _journeyPatternRef: JourneyPatternRefPath

    /**
     * Get the implicit to-many join path to the
     * <code>journey_pattern.journey_pattern_ref</code> table
     */
    fun journeyPatternRef(): JourneyPatternRefPath {
        if (!this::_journeyPatternRef.isInitialized)
            _journeyPatternRef = JourneyPatternRefPath(this, null, JOURNEY_PATTERN_REF__JOURNEY_PATTERN_REF_ROUTE_DIRECTION_FKEY.inverseKey)

        return _journeyPatternRef;
    }

    val journeyPatternRef: JourneyPatternRefPath
        get(): JourneyPatternRefPath = journeyPatternRef()
    override fun `as`(alias: String): Direction = Direction(DSL.name(alias), this)
    override fun `as`(alias: Name): Direction = Direction(alias, this)
    override fun `as`(alias: Table<*>): Direction = Direction(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Direction = Direction(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Direction = Direction(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Direction = Direction(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Direction = Direction(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Direction = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Direction = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Direction = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Direction = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Direction = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Direction = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Direction = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Direction = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Direction = where(DSL.notExists(select))
}
