/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.information_schema.tables


import fi.hsl.jore.jore4.jooq.information_schema.InformationSchema

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Routines(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view()
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.routines</code>
         */
        val ROUTINES = Routines()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.routines.specific_catalog</code>.
     */
    val SPECIFIC_CATALOG: TableField<Record, String?> = createField(DSL.name("specific_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.specific_schema</code>.
     */
    val SPECIFIC_SCHEMA: TableField<Record, String?> = createField(DSL.name("specific_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.specific_name</code>.
     */
    val SPECIFIC_NAME: TableField<Record, String?> = createField(DSL.name("specific_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.routine_catalog</code>.
     */
    val ROUTINE_CATALOG: TableField<Record, String?> = createField(DSL.name("routine_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.routine_schema</code>.
     */
    val ROUTINE_SCHEMA: TableField<Record, String?> = createField(DSL.name("routine_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.routine_name</code>.
     */
    val ROUTINE_NAME: TableField<Record, String?> = createField(DSL.name("routine_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.routine_type</code>.
     */
    val ROUTINE_TYPE: TableField<Record, String?> = createField(DSL.name("routine_type"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.module_catalog</code>.
     */
    val MODULE_CATALOG: TableField<Record, String?> = createField(DSL.name("module_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.module_schema</code>.
     */
    val MODULE_SCHEMA: TableField<Record, String?> = createField(DSL.name("module_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.module_name</code>.
     */
    val MODULE_NAME: TableField<Record, String?> = createField(DSL.name("module_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.udt_catalog</code>.
     */
    val UDT_CATALOG: TableField<Record, String?> = createField(DSL.name("udt_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.udt_schema</code>.
     */
    val UDT_SCHEMA: TableField<Record, String?> = createField(DSL.name("udt_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.udt_name</code>.
     */
    val UDT_NAME: TableField<Record, String?> = createField(DSL.name("udt_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.data_type</code>.
     */
    val DATA_TYPE: TableField<Record, String?> = createField(DSL.name("data_type"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.character_maximum_length</code>.
     */
    val CHARACTER_MAXIMUM_LENGTH: TableField<Record, Int?> = createField(DSL.name("character_maximum_length"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.character_octet_length</code>.
     */
    val CHARACTER_OCTET_LENGTH: TableField<Record, Int?> = createField(DSL.name("character_octet_length"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.character_set_catalog</code>.
     */
    val CHARACTER_SET_CATALOG: TableField<Record, String?> = createField(DSL.name("character_set_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.character_set_schema</code>.
     */
    val CHARACTER_SET_SCHEMA: TableField<Record, String?> = createField(DSL.name("character_set_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.character_set_name</code>.
     */
    val CHARACTER_SET_NAME: TableField<Record, String?> = createField(DSL.name("character_set_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.collation_catalog</code>.
     */
    val COLLATION_CATALOG: TableField<Record, String?> = createField(DSL.name("collation_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.collation_schema</code>.
     */
    val COLLATION_SCHEMA: TableField<Record, String?> = createField(DSL.name("collation_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.collation_name</code>.
     */
    val COLLATION_NAME: TableField<Record, String?> = createField(DSL.name("collation_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.numeric_precision</code>.
     */
    val NUMERIC_PRECISION: TableField<Record, Int?> = createField(DSL.name("numeric_precision"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.numeric_precision_radix</code>.
     */
    val NUMERIC_PRECISION_RADIX: TableField<Record, Int?> = createField(DSL.name("numeric_precision_radix"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.numeric_scale</code>.
     */
    val NUMERIC_SCALE: TableField<Record, Int?> = createField(DSL.name("numeric_scale"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.datetime_precision</code>.
     */
    val DATETIME_PRECISION: TableField<Record, Int?> = createField(DSL.name("datetime_precision"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.interval_type</code>.
     */
    val INTERVAL_TYPE: TableField<Record, String?> = createField(DSL.name("interval_type"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.interval_precision</code>.
     */
    val INTERVAL_PRECISION: TableField<Record, Int?> = createField(DSL.name("interval_precision"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.type_udt_catalog</code>.
     */
    val TYPE_UDT_CATALOG: TableField<Record, String?> = createField(DSL.name("type_udt_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.type_udt_schema</code>.
     */
    val TYPE_UDT_SCHEMA: TableField<Record, String?> = createField(DSL.name("type_udt_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.type_udt_name</code>.
     */
    val TYPE_UDT_NAME: TableField<Record, String?> = createField(DSL.name("type_udt_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.scope_catalog</code>.
     */
    val SCOPE_CATALOG: TableField<Record, String?> = createField(DSL.name("scope_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.scope_schema</code>.
     */
    val SCOPE_SCHEMA: TableField<Record, String?> = createField(DSL.name("scope_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.scope_name</code>.
     */
    val SCOPE_NAME: TableField<Record, String?> = createField(DSL.name("scope_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.maximum_cardinality</code>.
     */
    val MAXIMUM_CARDINALITY: TableField<Record, Int?> = createField(DSL.name("maximum_cardinality"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.dtd_identifier</code>.
     */
    val DTD_IDENTIFIER: TableField<Record, String?> = createField(DSL.name("dtd_identifier"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.routine_body</code>.
     */
    val ROUTINE_BODY: TableField<Record, String?> = createField(DSL.name("routine_body"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.routine_definition</code>.
     */
    val ROUTINE_DEFINITION: TableField<Record, String?> = createField(DSL.name("routine_definition"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.external_name</code>.
     */
    val EXTERNAL_NAME: TableField<Record, String?> = createField(DSL.name("external_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.external_language</code>.
     */
    val EXTERNAL_LANGUAGE: TableField<Record, String?> = createField(DSL.name("external_language"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.parameter_style</code>.
     */
    val PARAMETER_STYLE: TableField<Record, String?> = createField(DSL.name("parameter_style"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.is_deterministic</code>.
     */
    val IS_DETERMINISTIC: TableField<Record, String?> = createField(DSL.name("is_deterministic"), SQLDataType.VARCHAR(3), this, "")

    /**
     * The column <code>information_schema.routines.sql_data_access</code>.
     */
    val SQL_DATA_ACCESS: TableField<Record, String?> = createField(DSL.name("sql_data_access"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.is_null_call</code>.
     */
    val IS_NULL_CALL: TableField<Record, String?> = createField(DSL.name("is_null_call"), SQLDataType.VARCHAR(3), this, "")

    /**
     * The column <code>information_schema.routines.sql_path</code>.
     */
    val SQL_PATH: TableField<Record, String?> = createField(DSL.name("sql_path"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.schema_level_routine</code>.
     */
    val SCHEMA_LEVEL_ROUTINE: TableField<Record, String?> = createField(DSL.name("schema_level_routine"), SQLDataType.VARCHAR(3), this, "")

    /**
     * The column <code>information_schema.routines.max_dynamic_result_sets</code>.
     */
    val MAX_DYNAMIC_RESULT_SETS: TableField<Record, Int?> = createField(DSL.name("max_dynamic_result_sets"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.is_user_defined_cast</code>.
     */
    val IS_USER_DEFINED_CAST: TableField<Record, String?> = createField(DSL.name("is_user_defined_cast"), SQLDataType.VARCHAR(3), this, "")

    /**
     * The column <code>information_schema.routines.is_implicitly_invocable</code>.
     */
    val IS_IMPLICITLY_INVOCABLE: TableField<Record, String?> = createField(DSL.name("is_implicitly_invocable"), SQLDataType.VARCHAR(3), this, "")

    /**
     * The column <code>information_schema.routines.security_type</code>.
     */
    val SECURITY_TYPE: TableField<Record, String?> = createField(DSL.name("security_type"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.to_sql_specific_catalog</code>.
     */
    val TO_SQL_SPECIFIC_CATALOG: TableField<Record, String?> = createField(DSL.name("to_sql_specific_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.to_sql_specific_schema</code>.
     */
    val TO_SQL_SPECIFIC_SCHEMA: TableField<Record, String?> = createField(DSL.name("to_sql_specific_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.to_sql_specific_name</code>.
     */
    val TO_SQL_SPECIFIC_NAME: TableField<Record, String?> = createField(DSL.name("to_sql_specific_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.as_locator</code>.
     */
    val AS_LOCATOR: TableField<Record, String?> = createField(DSL.name("as_locator"), SQLDataType.VARCHAR(3), this, "")

    /**
     * The column <code>information_schema.routines.created</code>.
     */
    val CREATED: TableField<Record, OffsetDateTime?> = createField(DSL.name("created"), SQLDataType.TIMESTAMPWITHTIMEZONE(2), this, "")

    /**
     * The column <code>information_schema.routines.last_altered</code>.
     */
    val LAST_ALTERED: TableField<Record, OffsetDateTime?> = createField(DSL.name("last_altered"), SQLDataType.TIMESTAMPWITHTIMEZONE(2), this, "")

    /**
     * The column <code>information_schema.routines.new_savepoint_level</code>.
     */
    val NEW_SAVEPOINT_LEVEL: TableField<Record, String?> = createField(DSL.name("new_savepoint_level"), SQLDataType.VARCHAR(3), this, "")

    /**
     * The column <code>information_schema.routines.is_udt_dependent</code>.
     */
    val IS_UDT_DEPENDENT: TableField<Record, String?> = createField(DSL.name("is_udt_dependent"), SQLDataType.VARCHAR(3), this, "")

    /**
     * The column <code>information_schema.routines.result_cast_from_data_type</code>.
     */
    val RESULT_CAST_FROM_DATA_TYPE: TableField<Record, String?> = createField(DSL.name("result_cast_from_data_type"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_as_locator</code>.
     */
    val RESULT_CAST_AS_LOCATOR: TableField<Record, String?> = createField(DSL.name("result_cast_as_locator"), SQLDataType.VARCHAR(3), this, "")

    /**
     * The column <code>information_schema.routines.result_cast_char_max_length</code>.
     */
    val RESULT_CAST_CHAR_MAX_LENGTH: TableField<Record, Int?> = createField(DSL.name("result_cast_char_max_length"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_char_octet_length</code>.
     */
    val RESULT_CAST_CHAR_OCTET_LENGTH: TableField<Record, Int?> = createField(DSL.name("result_cast_char_octet_length"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_char_set_catalog</code>.
     */
    val RESULT_CAST_CHAR_SET_CATALOG: TableField<Record, String?> = createField(DSL.name("result_cast_char_set_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_char_set_schema</code>.
     */
    val RESULT_CAST_CHAR_SET_SCHEMA: TableField<Record, String?> = createField(DSL.name("result_cast_char_set_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_char_set_name</code>.
     */
    val RESULT_CAST_CHAR_SET_NAME: TableField<Record, String?> = createField(DSL.name("result_cast_char_set_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_collation_catalog</code>.
     */
    val RESULT_CAST_COLLATION_CATALOG: TableField<Record, String?> = createField(DSL.name("result_cast_collation_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_collation_schema</code>.
     */
    val RESULT_CAST_COLLATION_SCHEMA: TableField<Record, String?> = createField(DSL.name("result_cast_collation_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_collation_name</code>.
     */
    val RESULT_CAST_COLLATION_NAME: TableField<Record, String?> = createField(DSL.name("result_cast_collation_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_numeric_precision</code>.
     */
    val RESULT_CAST_NUMERIC_PRECISION: TableField<Record, Int?> = createField(DSL.name("result_cast_numeric_precision"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_numeric_precision_radix</code>.
     */
    val RESULT_CAST_NUMERIC_PRECISION_RADIX: TableField<Record, Int?> = createField(DSL.name("result_cast_numeric_precision_radix"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_numeric_scale</code>.
     */
    val RESULT_CAST_NUMERIC_SCALE: TableField<Record, Int?> = createField(DSL.name("result_cast_numeric_scale"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_datetime_precision</code>.
     */
    val RESULT_CAST_DATETIME_PRECISION: TableField<Record, Int?> = createField(DSL.name("result_cast_datetime_precision"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_interval_type</code>.
     */
    val RESULT_CAST_INTERVAL_TYPE: TableField<Record, String?> = createField(DSL.name("result_cast_interval_type"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_interval_precision</code>.
     */
    val RESULT_CAST_INTERVAL_PRECISION: TableField<Record, Int?> = createField(DSL.name("result_cast_interval_precision"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_type_udt_catalog</code>.
     */
    val RESULT_CAST_TYPE_UDT_CATALOG: TableField<Record, String?> = createField(DSL.name("result_cast_type_udt_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_type_udt_schema</code>.
     */
    val RESULT_CAST_TYPE_UDT_SCHEMA: TableField<Record, String?> = createField(DSL.name("result_cast_type_udt_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_type_udt_name</code>.
     */
    val RESULT_CAST_TYPE_UDT_NAME: TableField<Record, String?> = createField(DSL.name("result_cast_type_udt_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_scope_catalog</code>.
     */
    val RESULT_CAST_SCOPE_CATALOG: TableField<Record, String?> = createField(DSL.name("result_cast_scope_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_scope_schema</code>.
     */
    val RESULT_CAST_SCOPE_SCHEMA: TableField<Record, String?> = createField(DSL.name("result_cast_scope_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_scope_name</code>.
     */
    val RESULT_CAST_SCOPE_NAME: TableField<Record, String?> = createField(DSL.name("result_cast_scope_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_maximum_cardinality</code>.
     */
    val RESULT_CAST_MAXIMUM_CARDINALITY: TableField<Record, Int?> = createField(DSL.name("result_cast_maximum_cardinality"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.routines.result_cast_dtd_identifier</code>.
     */
    val RESULT_CAST_DTD_IDENTIFIER: TableField<Record, String?> = createField(DSL.name("result_cast_dtd_identifier"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.routines</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.routines</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.routines</code> table reference
     */
    constructor(): this(DSL.name("routines"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, ROUTINES, null)
    override fun getSchema(): Schema = InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Routines = Routines(DSL.name(alias), this)
    override fun `as`(alias: Name): Routines = Routines(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Routines = Routines(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Routines = Routines(name, null)
}
