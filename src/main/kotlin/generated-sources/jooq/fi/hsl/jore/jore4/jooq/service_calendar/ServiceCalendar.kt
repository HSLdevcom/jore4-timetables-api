/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.service_calendar


import fi.hsl.jore.jore4.jooq.DefaultCatalog
import fi.hsl.jore.jore4.jooq.service_calendar.tables.DayType
import fi.hsl.jore.jore4.jooq.service_calendar.tables.DayTypeActiveOnDayOfWeek
import fi.hsl.jore.jore4.jooq.service_calendar.tables.GetActiveDayTypesForDate
import fi.hsl.jore.jore4.jooq.service_calendar.tables.SubstituteOperatingDayByLineType
import fi.hsl.jore.jore4.jooq.service_calendar.tables.SubstituteOperatingPeriod

import java.time.LocalDate

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Configuration
import org.jooq.Field
import org.jooq.Record
import org.jooq.Result
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ServiceCalendar : SchemaImpl("service_calendar", DefaultCatalog.DEFAULT_CATALOG) {
    companion object {

        /**
         * The reference instance of <code>service_calendar</code>
         */
        val SERVICE_CALENDAR = ServiceCalendar()
    }

    /**
     * A type of day characterised by one or more properties which affect public transport operation. For example: weekday in school holidays. Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=1:6:3:299 
     */
    val DAY_TYPE get() = DayType.DAY_TYPE

    /**
     * Tells on which days of week a particular DAY TYPE is active
     */
    val DAY_TYPE_ACTIVE_ON_DAY_OF_WEEK get() = DayTypeActiveOnDayOfWeek.DAY_TYPE_ACTIVE_ON_DAY_OF_WEEK

    /**
     * The table <code>service_calendar.get_active_day_types_for_date</code>.
     */
    val GET_ACTIVE_DAY_TYPES_FOR_DATE get() = GetActiveDayTypesForDate.GET_ACTIVE_DAY_TYPES_FOR_DATE

    /**
     * Call <code>service_calendar.get_active_day_types_for_date</code>.
     */
    fun GET_ACTIVE_DAY_TYPES_FOR_DATE(
          configuration: Configuration
        , observationDate: LocalDate?
    ): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.service_calendar.tables.GetActiveDayTypesForDate.GET_ACTIVE_DAY_TYPES_FOR_DATE.call(
          observationDate
    )).fetch()

    /**
     * Get <code>service_calendar.get_active_day_types_for_date</code> as a table.
     */
    fun GET_ACTIVE_DAY_TYPES_FOR_DATE(
          observationDate: LocalDate?
    ): GetActiveDayTypesForDate = fi.hsl.jore.jore4.jooq.service_calendar.tables.GetActiveDayTypesForDate.GET_ACTIVE_DAY_TYPES_FOR_DATE.call(
          observationDate
    )

    /**
     * Get <code>service_calendar.get_active_day_types_for_date</code> as a table.
     */
    fun GET_ACTIVE_DAY_TYPES_FOR_DATE(
          observationDate: Field<LocalDate?>
    ): GetActiveDayTypesForDate = fi.hsl.jore.jore4.jooq.service_calendar.tables.GetActiveDayTypesForDate.GET_ACTIVE_DAY_TYPES_FOR_DATE.call(
          observationDate
    )

    /**
     * Models substitute public transit as (1) a reference day or (2) indicating that public transit does not occur on certain date. Substitute operating days are always bound to a type of line.
     */
    val SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE get() = SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE

    /**
     * Models substitute operating period that consists of substitute operating days by line types.
     */
    val SUBSTITUTE_OPERATING_PERIOD get() = SubstituteOperatingPeriod.SUBSTITUTE_OPERATING_PERIOD

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        DayType.DAY_TYPE,
        DayTypeActiveOnDayOfWeek.DAY_TYPE_ACTIVE_ON_DAY_OF_WEEK,
        GetActiveDayTypesForDate.GET_ACTIVE_DAY_TYPES_FOR_DATE,
        SubstituteOperatingDayByLineType.SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE,
        SubstituteOperatingPeriod.SUBSTITUTE_OPERATING_PERIOD
    )
}
