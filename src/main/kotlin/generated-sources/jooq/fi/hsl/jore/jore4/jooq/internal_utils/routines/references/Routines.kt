/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.internal_utils.routines.references


import fi.hsl.jore.jore4.jooq.internal_utils.routines.ConstDefaultTimezone
import fi.hsl.jore.jore4.jooq.internal_utils.routines.ConstTimetablesPriorityDraft
import fi.hsl.jore.jore4.jooq.internal_utils.routines.ConstTimetablesPrioritySpecial
import fi.hsl.jore.jore4.jooq.internal_utils.routines.ConstTimetablesPriorityStaging
import fi.hsl.jore.jore4.jooq.internal_utils.routines.ConstTimetablesPrioritySubstituteByLineType
import fi.hsl.jore.jore4.jooq.internal_utils.routines.CreateValidationQueueTempTables
import fi.hsl.jore.jore4.jooq.internal_utils.routines.QueuedValidationsAlreadyProcessed
import fi.hsl.jore.jore4.jooq.internal_utils.routines.VehicleJourneyEndTimeInterval
import fi.hsl.jore.jore4.jooq.internal_utils.routines.VehicleJourneyStartTimeInterval

import org.jooq.Configuration
import org.jooq.Field
import org.jooq.Record
import org.jooq.types.YearToSecond



/**
 * Call <code>internal_utils.const_default_timezone</code>
 */
fun constDefaultTimezone(
      configuration: Configuration
): String? {
    val f = ConstDefaultTimezone()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>internal_utils.const_default_timezone</code> as a field.
 */
fun constDefaultTimezone(): Field<String?> {
    val f = ConstDefaultTimezone()

    return f.asField()
}

/**
 * Call <code>internal_utils.const_timetables_priority_draft</code>
 */
fun constTimetablesPriorityDraft(
      configuration: Configuration
): Int? {
    val f = ConstTimetablesPriorityDraft()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>internal_utils.const_timetables_priority_draft</code> as a field.
 */
fun constTimetablesPriorityDraft(): Field<Int?> {
    val f = ConstTimetablesPriorityDraft()

    return f.asField()
}

/**
 * Call <code>internal_utils.const_timetables_priority_special</code>
 */
fun constTimetablesPrioritySpecial(
      configuration: Configuration
): Int? {
    val f = ConstTimetablesPrioritySpecial()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>internal_utils.const_timetables_priority_special</code> as a field.
 */
fun constTimetablesPrioritySpecial(): Field<Int?> {
    val f = ConstTimetablesPrioritySpecial()

    return f.asField()
}

/**
 * Call <code>internal_utils.const_timetables_priority_staging</code>
 */
fun constTimetablesPriorityStaging(
      configuration: Configuration
): Int? {
    val f = ConstTimetablesPriorityStaging()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>internal_utils.const_timetables_priority_staging</code> as a field.
 */
fun constTimetablesPriorityStaging(): Field<Int?> {
    val f = ConstTimetablesPriorityStaging()

    return f.asField()
}

/**
 * Call
 * <code>internal_utils.const_timetables_priority_substitute_by_line_type</code>
 */
fun constTimetablesPrioritySubstituteByLineType(
      configuration: Configuration
): Int? {
    val f = ConstTimetablesPrioritySubstituteByLineType()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get
 * <code>internal_utils.const_timetables_priority_substitute_by_line_type</code>
 * as a field.
 */
fun constTimetablesPrioritySubstituteByLineType(): Field<Int?> {
    val f = ConstTimetablesPrioritySubstituteByLineType()

    return f.asField()
}

/**
 * Call <code>internal_utils.create_validation_queue_temp_tables</code>
 */
fun createValidationQueueTempTables(
      configuration: Configuration
): Unit {
    val p = CreateValidationQueueTempTables()

    p.execute(configuration)
}

/**
 * Call <code>internal_utils.queued_validations_already_processed</code>
 */
fun queuedValidationsAlreadyProcessed(
      configuration: Configuration
): Boolean? {
    val f = QueuedValidationsAlreadyProcessed()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>internal_utils.queued_validations_already_processed</code> as a
 * field.
 */
fun queuedValidationsAlreadyProcessed(): Field<Boolean?> {
    val f = QueuedValidationsAlreadyProcessed()

    return f.asField()
}

/**
 * Call <code>internal_utils.vehicle_journey_end_time_interval</code>
 */
fun vehicleJourneyEndTimeInterval(
      configuration: Configuration
    , vj: Record?
): YearToSecond? {
    val f = VehicleJourneyEndTimeInterval()
    f.setVj(vj)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>internal_utils.vehicle_journey_end_time_interval</code> as a field.
 */
fun vehicleJourneyEndTimeInterval(
      vj: Record?
): Field<YearToSecond?> {
    val f = VehicleJourneyEndTimeInterval()
    f.setVj(vj)

    return f.asField()
}

/**
 * Get <code>internal_utils.vehicle_journey_end_time_interval</code> as a field.
 */
fun vehicleJourneyEndTimeInterval(
      vj: Field<Record?>
): Field<YearToSecond?> {
    val f = VehicleJourneyEndTimeInterval()
    f.setVj(vj)

    return f.asField()
}

/**
 * Call <code>internal_utils.vehicle_journey_start_time_interval</code>
 */
fun vehicleJourneyStartTimeInterval(
      configuration: Configuration
    , vj: Record?
): YearToSecond? {
    val f = VehicleJourneyStartTimeInterval()
    f.setVj(vj)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>internal_utils.vehicle_journey_start_time_interval</code> as a
 * field.
 */
fun vehicleJourneyStartTimeInterval(
      vj: Record?
): Field<YearToSecond?> {
    val f = VehicleJourneyStartTimeInterval()
    f.setVj(vj)

    return f.asField()
}

/**
 * Get <code>internal_utils.vehicle_journey_start_time_interval</code> as a
 * field.
 */
fun vehicleJourneyStartTimeInterval(
      vj: Field<Record?>
): Field<YearToSecond?> {
    val f = VehicleJourneyStartTimeInterval()
    f.setVj(vj)

    return f.asField()
}
