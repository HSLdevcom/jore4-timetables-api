/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.service_calendar.tables


import fi.hsl.jore.jore4.jooq.service_calendar.ServiceCalendar

import java.time.LocalDate
import java.util.UUID

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GetActiveDayTypesForDate(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    ServiceCalendar.SERVICE_CALENDAR,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of
         * <code>service_calendar.get_active_day_types_for_date</code>
         */
        val GET_ACTIVE_DAY_TYPES_FOR_DATE: GetActiveDayTypesForDate = GetActiveDayTypesForDate()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>service_calendar.get_active_day_types_for_date.day_type_id</code>.
     */
    val DAY_TYPE_ID: TableField<Record, UUID?> = createField(DSL.name("day_type_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "")

    /**
     * The column
     * <code>service_calendar.get_active_day_types_for_date.label</code>.
     */
    val LABEL: TableField<Record, String?> = createField(DSL.name("label"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column
     * <code>service_calendar.get_active_day_types_for_date.name_i18n</code>.
     */
    val NAME_I18N: TableField<Record, JSONB?> = createField(DSL.name("name_i18n"), SQLDataType.JSONB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, arrayOf(
        DSL.value(null, SQLDataType.LOCALDATE)
    ))
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased
     * <code>service_calendar.get_active_day_types_for_date</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>service_calendar.get_active_day_types_for_date</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>service_calendar.get_active_day_types_for_date</code>
     * table reference
     */
    constructor(): this(DSL.name("get_active_day_types_for_date"), null)
    override fun getSchema(): Schema? = if (aliased()) null else ServiceCalendar.SERVICE_CALENDAR
    override fun `as`(alias: String): GetActiveDayTypesForDate = GetActiveDayTypesForDate(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): GetActiveDayTypesForDate = GetActiveDayTypesForDate(alias, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): GetActiveDayTypesForDate = GetActiveDayTypesForDate(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GetActiveDayTypesForDate = GetActiveDayTypesForDate(name, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(
          observationDate: LocalDate?
    ): GetActiveDayTypesForDate = GetActiveDayTypesForDate(DSL.name("get_active_day_types_for_date"), null, arrayOf(
        DSL.value(observationDate, SQLDataType.LOCALDATE)
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          observationDate: Field<LocalDate?>
    ): GetActiveDayTypesForDate = GetActiveDayTypesForDate(DSL.name("get_active_day_types_for_date"), null, arrayOf(
        observationDate
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
