/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.pg_catalog.tables


import fi.hsl.jore.jore4.jooq.pg_catalog.PgCatalog

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatProgressCluster(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view()
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_stat_progress_cluster</code>
         */
        val PG_STAT_PROGRESS_CLUSTER: PgStatProgressCluster = PgStatProgressCluster()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_stat_progress_cluster.pid</code>.
     */
    val PID: TableField<Record, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_cluster.datid</code>.
     */
    val DATID: TableField<Record, Long?> = createField(DSL.name("datid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_cluster.datname</code>.
     */
    val DATNAME: TableField<Record, String?> = createField(DSL.name("datname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_cluster.relid</code>.
     */
    val RELID: TableField<Record, Long?> = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_cluster.command</code>.
     */
    val COMMAND: TableField<Record, String?> = createField(DSL.name("command"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_cluster.phase</code>.
     */
    val PHASE: TableField<Record, String?> = createField(DSL.name("phase"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_cluster.cluster_index_relid</code>.
     */
    val CLUSTER_INDEX_RELID: TableField<Record, Long?> = createField(DSL.name("cluster_index_relid"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_cluster.heap_tuples_scanned</code>.
     */
    val HEAP_TUPLES_SCANNED: TableField<Record, Long?> = createField(DSL.name("heap_tuples_scanned"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_cluster.heap_tuples_written</code>.
     */
    val HEAP_TUPLES_WRITTEN: TableField<Record, Long?> = createField(DSL.name("heap_tuples_written"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_cluster.heap_blks_total</code>.
     */
    val HEAP_BLKS_TOTAL: TableField<Record, Long?> = createField(DSL.name("heap_blks_total"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_cluster.heap_blks_scanned</code>.
     */
    val HEAP_BLKS_SCANNED: TableField<Record, Long?> = createField(DSL.name("heap_blks_scanned"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_cluster.index_rebuild_count</code>.
     */
    val INDEX_REBUILD_COUNT: TableField<Record, Long?> = createField(DSL.name("index_rebuild_count"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_cluster</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_cluster</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_progress_cluster</code> table reference
     */
    constructor(): this(DSL.name("pg_stat_progress_cluster"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_STAT_PROGRESS_CLUSTER, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatProgressCluster = PgStatProgressCluster(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatProgressCluster = PgStatProgressCluster(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatProgressCluster = PgStatProgressCluster(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatProgressCluster = PgStatProgressCluster(name, null)
}
