/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.return_value.tables


import fi.hsl.jore.jore4.jooq.return_value.ReturnValue

import java.time.LocalDate
import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This return value table is used in function
 * vehicle_journey.get_vehicle_schedules_on_date. It consists of
 * vehicle_journey_id, vehicle_schedule_frame_id or
 * substitute_operating_day_by_line_type_id and also enriched with data, which
 * are used in the UI side.
 */
@Suppress("UNCHECKED_CAST")
open class VehicleSchedule(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    ReturnValue.RETURN_VALUE,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("This return value table is used in function vehicle_journey.get_vehicle_schedules_on_date. It consists of vehicle_journey_id, vehicle_schedule_frame_id or\nsubstitute_operating_day_by_line_type_id and also enriched with data, which are used in the UI side."),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>return_value.vehicle_schedule</code>
         */
        val VEHICLE_SCHEDULE: VehicleSchedule = VehicleSchedule()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>return_value.vehicle_schedule.vehicle_journey_id</code>.
     */
    val VEHICLE_JOURNEY_ID: TableField<Record, UUID?> = createField(DSL.name("vehicle_journey_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>return_value.vehicle_schedule.validity_start</code>.
     */
    val VALIDITY_START: TableField<Record, LocalDate?> = createField(DSL.name("validity_start"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>return_value.vehicle_schedule.validity_end</code>.
     */
    val VALIDITY_END: TableField<Record, LocalDate?> = createField(DSL.name("validity_end"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>return_value.vehicle_schedule.priority</code>.
     */
    val PRIORITY: TableField<Record, Int?> = createField(DSL.name("priority"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>return_value.vehicle_schedule.day_type_id</code>.
     */
    val DAY_TYPE_ID: TableField<Record, UUID?> = createField(DSL.name("day_type_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>return_value.vehicle_schedule.vehicle_schedule_frame_id</code>.
     */
    val VEHICLE_SCHEDULE_FRAME_ID: TableField<Record, UUID?> = createField(DSL.name("vehicle_schedule_frame_id"), SQLDataType.UUID, this, "")

    /**
     * The column
     * <code>return_value.vehicle_schedule.substitute_operating_day_by_line_type_id</code>.
     */
    val SUBSTITUTE_OPERATING_DAY_BY_LINE_TYPE_ID: TableField<Record, UUID?> = createField(DSL.name("substitute_operating_day_by_line_type_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>return_value.vehicle_schedule.created_at</code>.
     */
    val CREATED_AT: TableField<Record, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>return_value.vehicle_schedule</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>return_value.vehicle_schedule</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>return_value.vehicle_schedule</code> table reference
     */
    constructor(): this(DSL.name("vehicle_schedule"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, VEHICLE_SCHEDULE, null)
    override fun getSchema(): Schema? = if (aliased()) null else ReturnValue.RETURN_VALUE
    override fun `as`(alias: String): VehicleSchedule = VehicleSchedule(DSL.name(alias), this)
    override fun `as`(alias: Name): VehicleSchedule = VehicleSchedule(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VehicleSchedule = VehicleSchedule(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VehicleSchedule = VehicleSchedule(name, null)
}
