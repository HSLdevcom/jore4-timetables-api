/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.service_calendar.tables


import fi.hsl.jore.jore4.jooq.service_calendar.ServiceCalendar

import java.util.UUID

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Tells on which days of week a particular DAY TYPE is active
 */
@Suppress("UNCHECKED_CAST")
open class DayTypeActiveOnDayOfWeek(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    ServiceCalendar.SERVICE_CALENDAR,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Tells on which days of week a particular DAY TYPE is active"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>service_calendar.day_type_active_on_day_of_week</code>
         */
        val DAY_TYPE_ACTIVE_ON_DAY_OF_WEEK = DayTypeActiveOnDayOfWeek()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>service_calendar.day_type_active_on_day_of_week.day_type_id</code>. The DAY TYPE for which we define the activeness
     */
    val DAY_TYPE_ID: TableField<Record, UUID?> = createField(DSL.name("day_type_id"), SQLDataType.UUID.nullable(false), this, "The DAY TYPE for which we define the activeness")

    /**
     * The column <code>service_calendar.day_type_active_on_day_of_week.day_of_week</code>. ISO week day definition (1 = Monday, 7 = Sunday)
     */
    val DAY_OF_WEEK: TableField<Record, Int?> = createField(DSL.name("day_of_week"), SQLDataType.INTEGER.nullable(false), this, "ISO week day definition (1 = Monday, 7 = Sunday)")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>service_calendar.day_type_active_on_day_of_week</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>service_calendar.day_type_active_on_day_of_week</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>service_calendar.day_type_active_on_day_of_week</code> table reference
     */
    constructor(): this(DSL.name("day_type_active_on_day_of_week"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, DAY_TYPE_ACTIVE_ON_DAY_OF_WEEK, null)
    override fun getSchema(): Schema = ServiceCalendar.SERVICE_CALENDAR
    override fun `as`(alias: String): DayTypeActiveOnDayOfWeek = DayTypeActiveOnDayOfWeek(DSL.name(alias), this)
    override fun `as`(alias: Name): DayTypeActiveOnDayOfWeek = DayTypeActiveOnDayOfWeek(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DayTypeActiveOnDayOfWeek = DayTypeActiveOnDayOfWeek(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DayTypeActiveOnDayOfWeek = DayTypeActiveOnDayOfWeek(name, null)
}
