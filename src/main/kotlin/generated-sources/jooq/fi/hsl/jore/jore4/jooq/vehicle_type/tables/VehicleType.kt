/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.vehicle_type.tables


import java.util.UUID

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * The VEHICLE entity is used to describe the physical public transport vehicles 
 * available for short-term planning of operations and daily assignment (    in 
     * contrast to logical vehicles considered for resource planning of operations 
     * and daily assignment (in contrast to logical vehicles cplanning). Each 
     * VEHICLE shall be classified as of a particular VEHICLE TYPE.
     */
    @Suppress("UNCHECKED_CAST")
    open class VehicleType(
        alias: Name,
        child: Table<out Record>?,
        path: ForeignKey<out Record, Record>?,
        aliased: Table<Record>?,
        parameters: Array<Field<*>?>?
    ): TableImpl<Record>(
        alias,
        fi.hsl.jore.jore4.jooq.vehicle_type.VehicleType.VEHICLE_TYPE,
        child,
        path,
        aliased,
        parameters,
        DSL.comment("The VEHICLE entity is used to describe the physical public transport vehicles available for short-term planning of operations and daily assignment (in contrast to logical vehicles considered for resource planning of operations and daily assignment (in contrast to logical vehicles cplanning). Each VEHICLE shall be classified as of a particular VEHICLE TYPE."),
        TableOptions.table()
    ) {
        companion object {

            /**
             * The reference instance of <code>vehicle_type.vehicle_type</code>
             */
            val VEHICLE_TYPE_ = VehicleType()
        }

        /**
         * The class holding records for this type
         */
        override fun getRecordType(): Class<Record> = Record::class.java

        /**
         * The column <code>vehicle_type.vehicle_type.vehicle_type_id</code>.
         */
        val VEHICLE_TYPE_ID: TableField<Record, UUID?> = createField(DSL.name("vehicle_type_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "")

        /**
         * The column <code>vehicle_type.vehicle_type.label</code>. Label of the vehicle type.
         */
        val LABEL: TableField<Record, String?> = createField(DSL.name("label"), SQLDataType.CLOB.nullable(false), this, "Label of the vehicle type.")

        /**
         * The column <code>vehicle_type.vehicle_type.description_i18n</code>. Description of the vehicle type.
         */
        val DESCRIPTION_I18N: TableField<Record, JSONB?> = createField(DSL.name("description_i18n"), SQLDataType.JSONB, this, "Description of the vehicle type.")

        /**
         * The column <code>vehicle_type.vehicle_type.hsl_id</code>. ID used in Hastus to represent the vehicle type.
         */
        val HSL_ID: TableField<Record, Short?> = createField(DSL.name("hsl_id"), SQLDataType.SMALLINT.nullable(false), this, "ID used in Hastus to represent the vehicle type.")

        private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
        private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

        /**
         * Create an aliased <code>vehicle_type.vehicle_type</code> table reference
         */
        constructor(alias: String): this(DSL.name(alias))

        /**
         * Create an aliased <code>vehicle_type.vehicle_type</code> table reference
         */
        constructor(alias: Name): this(alias, null)

        /**
         * Create a <code>vehicle_type.vehicle_type</code> table reference
         */
        constructor(): this(DSL.name("vehicle_type"), null)

        constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, VEHICLE_TYPE_, null)
        override fun getSchema(): Schema = fi.hsl.jore.jore4.jooq.vehicle_type.VehicleType.VEHICLE_TYPE
        override fun `as`(alias: String): VehicleType = VehicleType(DSL.name(alias), this)
        override fun `as`(alias: Name): VehicleType = VehicleType(alias, this)

        /**
         * Rename this table
         */
        override fun rename(name: String): VehicleType = VehicleType(DSL.name(name), null)

        /**
         * Rename this table
         */
        override fun rename(name: Name): VehicleType = VehicleType(name, null)
    }
