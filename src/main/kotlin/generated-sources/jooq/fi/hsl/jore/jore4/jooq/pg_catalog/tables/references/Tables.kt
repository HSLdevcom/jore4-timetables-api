/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.pg_catalog.tables.references


import fi.hsl.jore.jore4.jooq.pg_catalog.tables.Aclexplode
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.GenerateSeries
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.GenerateSubscripts
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonArrayElements
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonArrayElementsText
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonEach
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonEachText
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonObjectKeys
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonPopulateRecordset
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonToRecordset
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbArrayElements
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbArrayElementsText
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbEach
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbEachText
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbObjectKeys
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbPathQuery
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbPopulateRecordset
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbToRecordset
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgAggregate
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgAm
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgAmop
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgAmproc
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgAttrdef
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgAttribute
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgAuthMembers
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgAvailableExtensionVersions
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgAvailableExtensions
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgCast
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgClass
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgCollation
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgConstraint
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgConversion
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgCursor
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgCursors
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgDatabase
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgDbRoleSetting
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgDefaultAcl
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgDepend
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgDescription
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgEnum
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgEventTrigger
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgEventTriggerDdlCommands
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgEventTriggerDroppedObjects
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgExtension
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgExtensionUpdatePaths
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgForeignDataWrapper
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgForeignServer
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgForeignTable
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGetKeywords
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGetMultixactMembers
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGetPublicationTables
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGetReplicationSlots
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGroup
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgIndex
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgIndexes
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgInherits
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgInitPrivs
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLanguage
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLargeobjectMetadata
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgListeningChannels
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLockStatus
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLocks
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotGetBinaryChanges
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotGetChanges
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotPeekChanges
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgMatviews
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgMcvListItems
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgNamespace
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgOpclass
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgOperator
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgOpfamily
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgOptionsToTable
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPartitionAncestors
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPartitionTree
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPartitionedTable
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPltemplate
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPolicies
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPolicy
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPreparedStatement
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPreparedStatements
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPreparedXact
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPreparedXacts
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgProc
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPublication
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPublicationRel
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPublicationTables
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgRange
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgReplicationOrigin
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgReplicationSlots
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgRewrite
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgRoles
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgRules
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgSeclabel
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgSeclabels
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgSequence
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgSequences
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgSettings
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgShdepend
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgShdescription
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgShowAllSettings
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgShowReplicationOriginStatus
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgShseclabel
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatActivity
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatAllIndexes
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatAllTables
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatArchiver
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatBgwriter
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatDatabase
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatDatabaseConflicts
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGetActivity
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGetBackendIdset
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGetProgressInfo
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGetWalSenders
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGssapi
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatProgressCluster
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatProgressCreateIndex
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatProgressVacuum
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatReplication
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatSsl
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatSubscription
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatSysIndexes
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatSysTables
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatUserFunctions
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatUserIndexes
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatUserTables
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatWalReceiver
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatXactAllTables
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatXactSysTables
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatXactUserFunctions
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatXactUserTables
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatioAllIndexes
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatioAllSequences
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatioAllTables
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatioSysIndexes
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatioSysSequences
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatioSysTables
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatioUserIndexes
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatioUserSequences
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatioUserTables
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatisticExt
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStats
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatsExt
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgSubscription
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgSubscriptionRel
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTables
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTablespace
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTablespaceDatabases
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTimezoneAbbrevs
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTimezoneNames
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTransform
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTrigger
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTsConfig
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTsConfigMap
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTsDict
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTsParser
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTsTemplate
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgType
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgUser
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgUserMappings
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgViews
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.RegexpMatches
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.RegexpSplitToTable
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsDebug
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsParse
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsStat
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsTokenType
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.TxidSnapshotXip
import fi.hsl.jore.jore4.jooq.pg_catalog.tables.Unnest

import org.jooq.Configuration
import org.jooq.Field
import org.jooq.JSON
import org.jooq.JSONB
import org.jooq.Record
import org.jooq.Result



/**
 * The table <code>pg_catalog.aclexplode</code>.
 */
val ACLEXPLODE: Aclexplode = Aclexplode.ACLEXPLODE

/**
 * Call <code>pg_catalog.aclexplode</code>.
 */
fun ACLEXPLODE(
      configuration: Configuration
    , acl: Array<String?>?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(
      acl
)).fetch()

/**
 * Get <code>pg_catalog.aclexplode</code> as a table.
 */
fun ACLEXPLODE(
      acl: Array<String?>?
): Aclexplode = fi.hsl.jore.jore4.jooq.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(
    acl
)

/**
 * Get <code>pg_catalog.aclexplode</code> as a table.
 */
fun ACLEXPLODE(
      acl: Field<Array<String?>?>
): Aclexplode = fi.hsl.jore.jore4.jooq.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(
    acl
)

/**
 * The table <code>pg_catalog.generate_series</code>.
 */
val GENERATE_SERIES: GenerateSeries = GenerateSeries.GENERATE_SERIES

/**
 * Call <code>pg_catalog.generate_series</code>.
 */
fun GENERATE_SERIES(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(
      __1
    , __2
)).fetch()

/**
 * Get <code>pg_catalog.generate_series</code> as a table.
 */
fun GENERATE_SERIES(
      __1: Long?
    , __2: Long?
): GenerateSeries = fi.hsl.jore.jore4.jooq.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(
    __1,
    __2
)

/**
 * Get <code>pg_catalog.generate_series</code> as a table.
 */
fun GENERATE_SERIES(
      __1: Field<Long?>
    , __2: Field<Long?>
): GenerateSeries = fi.hsl.jore.jore4.jooq.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(
    __1,
    __2
)

/**
 * The table <code>pg_catalog.generate_subscripts</code>.
 */
val GENERATE_SUBSCRIPTS: GenerateSubscripts = GenerateSubscripts.GENERATE_SUBSCRIPTS

/**
 * Call <code>pg_catalog.generate_subscripts</code>.
 */
fun GENERATE_SUBSCRIPTS(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Int?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(
      __1
    , __2
)).fetch()

/**
 * Get <code>pg_catalog.generate_subscripts</code> as a table.
 */
fun GENERATE_SUBSCRIPTS(
      __1: Array<Any?>?
    , __2: Int?
): GenerateSubscripts = fi.hsl.jore.jore4.jooq.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(
    __1,
    __2
)

/**
 * Get <code>pg_catalog.generate_subscripts</code> as a table.
 */
fun GENERATE_SUBSCRIPTS(
      __1: Field<Array<Any?>?>
    , __2: Field<Int?>
): GenerateSubscripts = fi.hsl.jore.jore4.jooq.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(
    __1,
    __2
)

/**
 * The table <code>pg_catalog.json_array_elements</code>.
 */
val JSON_ARRAY_ELEMENTS: JsonArrayElements = JsonArrayElements.JSON_ARRAY_ELEMENTS

/**
 * Call <code>pg_catalog.json_array_elements</code>.
 */
fun JSON_ARRAY_ELEMENTS(
      configuration: Configuration
    , fromJson: JSON?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.json_array_elements</code> as a table.
 */
fun JSON_ARRAY_ELEMENTS(
      fromJson: JSON?
): JsonArrayElements = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(
    fromJson
)

/**
 * Get <code>pg_catalog.json_array_elements</code> as a table.
 */
fun JSON_ARRAY_ELEMENTS(
      fromJson: Field<JSON?>
): JsonArrayElements = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(
    fromJson
)

/**
 * The table <code>pg_catalog.json_array_elements_text</code>.
 */
val JSON_ARRAY_ELEMENTS_TEXT: JsonArrayElementsText = JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT

/**
 * Call <code>pg_catalog.json_array_elements_text</code>.
 */
fun JSON_ARRAY_ELEMENTS_TEXT(
      configuration: Configuration
    , fromJson: JSON?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.json_array_elements_text</code> as a table.
 */
fun JSON_ARRAY_ELEMENTS_TEXT(
      fromJson: JSON?
): JsonArrayElementsText = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(
    fromJson
)

/**
 * Get <code>pg_catalog.json_array_elements_text</code> as a table.
 */
fun JSON_ARRAY_ELEMENTS_TEXT(
      fromJson: Field<JSON?>
): JsonArrayElementsText = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(
    fromJson
)

/**
 * The table <code>pg_catalog.json_each</code>.
 */
val JSON_EACH: JsonEach = JsonEach.JSON_EACH

/**
 * Call <code>pg_catalog.json_each</code>.
 */
fun JSON_EACH(
      configuration: Configuration
    , fromJson: JSON?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonEach.JSON_EACH.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.json_each</code> as a table.
 */
fun JSON_EACH(
      fromJson: JSON?
): JsonEach = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonEach.JSON_EACH.call(
    fromJson
)

/**
 * Get <code>pg_catalog.json_each</code> as a table.
 */
fun JSON_EACH(
      fromJson: Field<JSON?>
): JsonEach = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonEach.JSON_EACH.call(
    fromJson
)

/**
 * The table <code>pg_catalog.json_each_text</code>.
 */
val JSON_EACH_TEXT: JsonEachText = JsonEachText.JSON_EACH_TEXT

/**
 * Call <code>pg_catalog.json_each_text</code>.
 */
fun JSON_EACH_TEXT(
      configuration: Configuration
    , fromJson: JSON?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.json_each_text</code> as a table.
 */
fun JSON_EACH_TEXT(
      fromJson: JSON?
): JsonEachText = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(
    fromJson
)

/**
 * Get <code>pg_catalog.json_each_text</code> as a table.
 */
fun JSON_EACH_TEXT(
      fromJson: Field<JSON?>
): JsonEachText = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(
    fromJson
)

/**
 * The table <code>pg_catalog.json_object_keys</code>.
 */
val JSON_OBJECT_KEYS: JsonObjectKeys = JsonObjectKeys.JSON_OBJECT_KEYS

/**
 * Call <code>pg_catalog.json_object_keys</code>.
 */
fun JSON_OBJECT_KEYS(
      configuration: Configuration
    , __1: JSON?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(
      __1
)).fetch()

/**
 * Get <code>pg_catalog.json_object_keys</code> as a table.
 */
fun JSON_OBJECT_KEYS(
      __1: JSON?
): JsonObjectKeys = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(
    __1
)

/**
 * Get <code>pg_catalog.json_object_keys</code> as a table.
 */
fun JSON_OBJECT_KEYS(
      __1: Field<JSON?>
): JsonObjectKeys = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(
    __1
)

/**
 * The table <code>pg_catalog.json_populate_recordset</code>.
 */
val JSON_POPULATE_RECORDSET: JsonPopulateRecordset = JsonPopulateRecordset.JSON_POPULATE_RECORDSET
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun JSON_POPULATE_RECORDSET(
      configuration: Configuration
    , base: Any?
    , fromJson: JSON?
    , useJsonAsText: Boolean?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(
      base
    , fromJson
    , useJsonAsText
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun JSON_POPULATE_RECORDSET(
      base: Any?
    , fromJson: JSON?
    , useJsonAsText: Boolean?
): JsonPopulateRecordset = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(
    base,
    fromJson,
    useJsonAsText
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun JSON_POPULATE_RECORDSET(
      base: Field<Any?>
    , fromJson: Field<JSON?>
    , useJsonAsText: Field<Boolean?>
): JsonPopulateRecordset = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(
    base,
    fromJson,
    useJsonAsText
)

/**
 * The table <code>pg_catalog.json_to_recordset</code>.
 */
val JSON_TO_RECORDSET: JsonToRecordset = JsonToRecordset.JSON_TO_RECORDSET

/**
 * Call <code>pg_catalog.json_to_recordset</code>.
 */
fun JSON_TO_RECORDSET(
      configuration: Configuration
    , __1: JSON?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(
      __1
)).fetch()

/**
 * Get <code>pg_catalog.json_to_recordset</code> as a table.
 */
fun JSON_TO_RECORDSET(
      __1: JSON?
): JsonToRecordset = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(
    __1
)

/**
 * Get <code>pg_catalog.json_to_recordset</code> as a table.
 */
fun JSON_TO_RECORDSET(
      __1: Field<JSON?>
): JsonToRecordset = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(
    __1
)

/**
 * The table <code>pg_catalog.jsonb_array_elements</code>.
 */
val JSONB_ARRAY_ELEMENTS: JsonbArrayElements = JsonbArrayElements.JSONB_ARRAY_ELEMENTS

/**
 * Call <code>pg_catalog.jsonb_array_elements</code>.
 */
fun JSONB_ARRAY_ELEMENTS(
      configuration: Configuration
    , fromJson: JSONB?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.jsonb_array_elements</code> as a table.
 */
fun JSONB_ARRAY_ELEMENTS(
      fromJson: JSONB?
): JsonbArrayElements = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(
    fromJson
)

/**
 * Get <code>pg_catalog.jsonb_array_elements</code> as a table.
 */
fun JSONB_ARRAY_ELEMENTS(
      fromJson: Field<JSONB?>
): JsonbArrayElements = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(
    fromJson
)

/**
 * The table <code>pg_catalog.jsonb_array_elements_text</code>.
 */
val JSONB_ARRAY_ELEMENTS_TEXT: JsonbArrayElementsText = JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT

/**
 * Call <code>pg_catalog.jsonb_array_elements_text</code>.
 */
fun JSONB_ARRAY_ELEMENTS_TEXT(
      configuration: Configuration
    , fromJson: JSONB?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.jsonb_array_elements_text</code> as a table.
 */
fun JSONB_ARRAY_ELEMENTS_TEXT(
      fromJson: JSONB?
): JsonbArrayElementsText = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(
    fromJson
)

/**
 * Get <code>pg_catalog.jsonb_array_elements_text</code> as a table.
 */
fun JSONB_ARRAY_ELEMENTS_TEXT(
      fromJson: Field<JSONB?>
): JsonbArrayElementsText = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(
    fromJson
)

/**
 * The table <code>pg_catalog.jsonb_each</code>.
 */
val JSONB_EACH: JsonbEach = JsonbEach.JSONB_EACH

/**
 * Call <code>pg_catalog.jsonb_each</code>.
 */
fun JSONB_EACH(
      configuration: Configuration
    , fromJson: JSONB?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbEach.JSONB_EACH.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.jsonb_each</code> as a table.
 */
fun JSONB_EACH(
      fromJson: JSONB?
): JsonbEach = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbEach.JSONB_EACH.call(
    fromJson
)

/**
 * Get <code>pg_catalog.jsonb_each</code> as a table.
 */
fun JSONB_EACH(
      fromJson: Field<JSONB?>
): JsonbEach = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbEach.JSONB_EACH.call(
    fromJson
)

/**
 * The table <code>pg_catalog.jsonb_each_text</code>.
 */
val JSONB_EACH_TEXT: JsonbEachText = JsonbEachText.JSONB_EACH_TEXT

/**
 * Call <code>pg_catalog.jsonb_each_text</code>.
 */
fun JSONB_EACH_TEXT(
      configuration: Configuration
    , fromJson: JSONB?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.jsonb_each_text</code> as a table.
 */
fun JSONB_EACH_TEXT(
      fromJson: JSONB?
): JsonbEachText = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(
    fromJson
)

/**
 * Get <code>pg_catalog.jsonb_each_text</code> as a table.
 */
fun JSONB_EACH_TEXT(
      fromJson: Field<JSONB?>
): JsonbEachText = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(
    fromJson
)

/**
 * The table <code>pg_catalog.jsonb_object_keys</code>.
 */
val JSONB_OBJECT_KEYS: JsonbObjectKeys = JsonbObjectKeys.JSONB_OBJECT_KEYS

/**
 * Call <code>pg_catalog.jsonb_object_keys</code>.
 */
fun JSONB_OBJECT_KEYS(
      configuration: Configuration
    , __1: JSONB?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(
      __1
)).fetch()

/**
 * Get <code>pg_catalog.jsonb_object_keys</code> as a table.
 */
fun JSONB_OBJECT_KEYS(
      __1: JSONB?
): JsonbObjectKeys = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(
    __1
)

/**
 * Get <code>pg_catalog.jsonb_object_keys</code> as a table.
 */
fun JSONB_OBJECT_KEYS(
      __1: Field<JSONB?>
): JsonbObjectKeys = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(
    __1
)

/**
 * The table <code>pg_catalog.jsonb_path_query</code>.
 */
val JSONB_PATH_QUERY: JsonbPathQuery = JsonbPathQuery.JSONB_PATH_QUERY
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun JSONB_PATH_QUERY(
      configuration: Configuration
    , target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbPathQuery.JSONB_PATH_QUERY.call(
      target
    , path
    , vars
    , silent
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun JSONB_PATH_QUERY(
      target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): JsonbPathQuery = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbPathQuery.JSONB_PATH_QUERY.call(
    target,
    path,
    vars,
    silent
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun JSONB_PATH_QUERY(
      target: Field<JSONB?>
    , path: Field<Any?>
    , vars: Field<JSONB?>
    , silent: Field<Boolean?>
): JsonbPathQuery = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbPathQuery.JSONB_PATH_QUERY.call(
    target,
    path,
    vars,
    silent
)

/**
 * The table <code>pg_catalog.jsonb_populate_recordset</code>.
 */
val JSONB_POPULATE_RECORDSET: JsonbPopulateRecordset = JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun JSONB_POPULATE_RECORDSET(
      configuration: Configuration
    , __1: Any?
    , __2: JSONB?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(
      __1
    , __2
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun JSONB_POPULATE_RECORDSET(
      __1: Any?
    , __2: JSONB?
): JsonbPopulateRecordset = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(
    __1,
    __2
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun JSONB_POPULATE_RECORDSET(
      __1: Field<Any?>
    , __2: Field<JSONB?>
): JsonbPopulateRecordset = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(
    __1,
    __2
)

/**
 * The table <code>pg_catalog.jsonb_to_recordset</code>.
 */
val JSONB_TO_RECORDSET: JsonbToRecordset = JsonbToRecordset.JSONB_TO_RECORDSET

/**
 * Call <code>pg_catalog.jsonb_to_recordset</code>.
 */
fun JSONB_TO_RECORDSET(
      configuration: Configuration
    , __1: JSONB?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(
      __1
)).fetch()

/**
 * Get <code>pg_catalog.jsonb_to_recordset</code> as a table.
 */
fun JSONB_TO_RECORDSET(
      __1: JSONB?
): JsonbToRecordset = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(
    __1
)

/**
 * Get <code>pg_catalog.jsonb_to_recordset</code> as a table.
 */
fun JSONB_TO_RECORDSET(
      __1: Field<JSONB?>
): JsonbToRecordset = fi.hsl.jore.jore4.jooq.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(
    __1
)

/**
 * The table <code>pg_catalog.pg_aggregate</code>.
 */
val PG_AGGREGATE: PgAggregate = PgAggregate.PG_AGGREGATE

/**
 * The table <code>pg_catalog.pg_am</code>.
 */
val PG_AM: PgAm = PgAm.PG_AM

/**
 * The table <code>pg_catalog.pg_amop</code>.
 */
val PG_AMOP: PgAmop = PgAmop.PG_AMOP

/**
 * The table <code>pg_catalog.pg_amproc</code>.
 */
val PG_AMPROC: PgAmproc = PgAmproc.PG_AMPROC

/**
 * The table <code>pg_catalog.pg_attrdef</code>.
 */
val PG_ATTRDEF: PgAttrdef = PgAttrdef.PG_ATTRDEF

/**
 * The table <code>pg_catalog.pg_attribute</code>.
 */
val PG_ATTRIBUTE: PgAttribute = PgAttribute.PG_ATTRIBUTE

/**
 * The table <code>pg_catalog.pg_auth_members</code>.
 */
val PG_AUTH_MEMBERS: PgAuthMembers = PgAuthMembers.PG_AUTH_MEMBERS

/**
 * The table <code>pg_catalog.pg_available_extension_versions</code>.
 */
val PG_AVAILABLE_EXTENSION_VERSIONS: PgAvailableExtensionVersions = PgAvailableExtensionVersions.PG_AVAILABLE_EXTENSION_VERSIONS

/**
 * The table <code>pg_catalog.pg_available_extensions</code>.
 */
val PG_AVAILABLE_EXTENSIONS: PgAvailableExtensions = PgAvailableExtensions.PG_AVAILABLE_EXTENSIONS

/**
 * The table <code>pg_catalog.pg_cast</code>.
 */
val PG_CAST: PgCast = PgCast.PG_CAST

/**
 * The table <code>pg_catalog.pg_class</code>.
 */
val PG_CLASS: PgClass = PgClass.PG_CLASS

/**
 * The table <code>pg_catalog.pg_collation</code>.
 */
val PG_COLLATION: PgCollation = PgCollation.PG_COLLATION

/**
 * The table <code>pg_catalog.pg_constraint</code>.
 */
val PG_CONSTRAINT: PgConstraint = PgConstraint.PG_CONSTRAINT

/**
 * The table <code>pg_catalog.pg_conversion</code>.
 */
val PG_CONVERSION: PgConversion = PgConversion.PG_CONVERSION

/**
 * The table <code>pg_catalog.pg_cursor</code>.
 */
val PG_CURSOR: PgCursor = PgCursor.PG_CURSOR

/**
 * Call <code>pg_catalog.pg_cursor</code>.
 */
fun PG_CURSOR(
      configuration: Configuration
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgCursor.PG_CURSOR.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_cursor</code> as a table.
 */
fun PG_CURSOR(): PgCursor = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgCursor.PG_CURSOR.call(
)

/**
 * The table <code>pg_catalog.pg_cursors</code>.
 */
val PG_CURSORS: PgCursors = PgCursors.PG_CURSORS

/**
 * The table <code>pg_catalog.pg_database</code>.
 */
val PG_DATABASE: PgDatabase = PgDatabase.PG_DATABASE

/**
 * The table <code>pg_catalog.pg_db_role_setting</code>.
 */
val PG_DB_ROLE_SETTING: PgDbRoleSetting = PgDbRoleSetting.PG_DB_ROLE_SETTING

/**
 * The table <code>pg_catalog.pg_default_acl</code>.
 */
val PG_DEFAULT_ACL: PgDefaultAcl = PgDefaultAcl.PG_DEFAULT_ACL

/**
 * The table <code>pg_catalog.pg_depend</code>.
 */
val PG_DEPEND: PgDepend = PgDepend.PG_DEPEND

/**
 * The table <code>pg_catalog.pg_description</code>.
 */
val PG_DESCRIPTION: PgDescription = PgDescription.PG_DESCRIPTION

/**
 * The table <code>pg_catalog.pg_enum</code>.
 */
val PG_ENUM: PgEnum = PgEnum.PG_ENUM

/**
 * The table <code>pg_catalog.pg_event_trigger</code>.
 */
val PG_EVENT_TRIGGER: PgEventTrigger = PgEventTrigger.PG_EVENT_TRIGGER

/**
 * The table <code>pg_catalog.pg_event_trigger_ddl_commands</code>.
 */
val PG_EVENT_TRIGGER_DDL_COMMANDS: PgEventTriggerDdlCommands = PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS

/**
 * Call <code>pg_catalog.pg_event_trigger_ddl_commands</code>.
 */
fun PG_EVENT_TRIGGER_DDL_COMMANDS(
      configuration: Configuration
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_event_trigger_ddl_commands</code> as a table.
 */
fun PG_EVENT_TRIGGER_DDL_COMMANDS(): PgEventTriggerDdlCommands = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS.call(
)

/**
 * The table <code>pg_catalog.pg_event_trigger_dropped_objects</code>.
 */
val PG_EVENT_TRIGGER_DROPPED_OBJECTS: PgEventTriggerDroppedObjects = PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS

/**
 * Call <code>pg_catalog.pg_event_trigger_dropped_objects</code>.
 */
fun PG_EVENT_TRIGGER_DROPPED_OBJECTS(
      configuration: Configuration
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_event_trigger_dropped_objects</code> as a table.
 */
fun PG_EVENT_TRIGGER_DROPPED_OBJECTS(): PgEventTriggerDroppedObjects = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS.call(
)

/**
 * The table <code>pg_catalog.pg_extension</code>.
 */
val PG_EXTENSION: PgExtension = PgExtension.PG_EXTENSION

/**
 * The table <code>pg_catalog.pg_extension_update_paths</code>.
 */
val PG_EXTENSION_UPDATE_PATHS: PgExtensionUpdatePaths = PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS

/**
 * Call <code>pg_catalog.pg_extension_update_paths</code>.
 */
fun PG_EXTENSION_UPDATE_PATHS(
      configuration: Configuration
    , name: String?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(
      name
)).fetch()

/**
 * Get <code>pg_catalog.pg_extension_update_paths</code> as a table.
 */
fun PG_EXTENSION_UPDATE_PATHS(
      name: String?
): PgExtensionUpdatePaths = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(
    name
)

/**
 * Get <code>pg_catalog.pg_extension_update_paths</code> as a table.
 */
fun PG_EXTENSION_UPDATE_PATHS(
      name: Field<String?>
): PgExtensionUpdatePaths = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(
    name
)

/**
 * The table <code>pg_catalog.pg_foreign_data_wrapper</code>.
 */
val PG_FOREIGN_DATA_WRAPPER: PgForeignDataWrapper = PgForeignDataWrapper.PG_FOREIGN_DATA_WRAPPER

/**
 * The table <code>pg_catalog.pg_foreign_server</code>.
 */
val PG_FOREIGN_SERVER: PgForeignServer = PgForeignServer.PG_FOREIGN_SERVER

/**
 * The table <code>pg_catalog.pg_foreign_table</code>.
 */
val PG_FOREIGN_TABLE: PgForeignTable = PgForeignTable.PG_FOREIGN_TABLE

/**
 * The table <code>pg_catalog.pg_get_keywords</code>.
 */
val PG_GET_KEYWORDS: PgGetKeywords = PgGetKeywords.PG_GET_KEYWORDS

/**
 * Call <code>pg_catalog.pg_get_keywords</code>.
 */
fun PG_GET_KEYWORDS(
      configuration: Configuration
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGetKeywords.PG_GET_KEYWORDS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_get_keywords</code> as a table.
 */
fun PG_GET_KEYWORDS(): PgGetKeywords = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGetKeywords.PG_GET_KEYWORDS.call(
)

/**
 * The table <code>pg_catalog.pg_get_multixact_members</code>.
 */
val PG_GET_MULTIXACT_MEMBERS: PgGetMultixactMembers = PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS

/**
 * Call <code>pg_catalog.pg_get_multixact_members</code>.
 */
fun PG_GET_MULTIXACT_MEMBERS(
      configuration: Configuration
    , multixid: Long?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(
      multixid
)).fetch()

/**
 * Get <code>pg_catalog.pg_get_multixact_members</code> as a table.
 */
fun PG_GET_MULTIXACT_MEMBERS(
      multixid: Long?
): PgGetMultixactMembers = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(
    multixid
)

/**
 * Get <code>pg_catalog.pg_get_multixact_members</code> as a table.
 */
fun PG_GET_MULTIXACT_MEMBERS(
      multixid: Field<Long?>
): PgGetMultixactMembers = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(
    multixid
)

/**
 * The table <code>pg_catalog.pg_get_publication_tables</code>.
 */
val PG_GET_PUBLICATION_TABLES: PgGetPublicationTables = PgGetPublicationTables.PG_GET_PUBLICATION_TABLES

/**
 * Call <code>pg_catalog.pg_get_publication_tables</code>.
 */
fun PG_GET_PUBLICATION_TABLES(
      configuration: Configuration
    , pubname: String?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(
      pubname
)).fetch()

/**
 * Get <code>pg_catalog.pg_get_publication_tables</code> as a table.
 */
fun PG_GET_PUBLICATION_TABLES(
      pubname: String?
): PgGetPublicationTables = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(
    pubname
)

/**
 * Get <code>pg_catalog.pg_get_publication_tables</code> as a table.
 */
fun PG_GET_PUBLICATION_TABLES(
      pubname: Field<String?>
): PgGetPublicationTables = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(
    pubname
)

/**
 * The table <code>pg_catalog.pg_get_replication_slots</code>.
 */
val PG_GET_REPLICATION_SLOTS: PgGetReplicationSlots = PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS

/**
 * Call <code>pg_catalog.pg_get_replication_slots</code>.
 */
fun PG_GET_REPLICATION_SLOTS(
      configuration: Configuration
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_get_replication_slots</code> as a table.
 */
fun PG_GET_REPLICATION_SLOTS(): PgGetReplicationSlots = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS.call(
)

/**
 * The table <code>pg_catalog.pg_group</code>.
 */
val PG_GROUP: PgGroup = PgGroup.PG_GROUP

/**
 * The table <code>pg_catalog.pg_index</code>.
 */
val PG_INDEX: PgIndex = PgIndex.PG_INDEX

/**
 * The table <code>pg_catalog.pg_indexes</code>.
 */
val PG_INDEXES: PgIndexes = PgIndexes.PG_INDEXES

/**
 * The table <code>pg_catalog.pg_inherits</code>.
 */
val PG_INHERITS: PgInherits = PgInherits.PG_INHERITS

/**
 * The table <code>pg_catalog.pg_init_privs</code>.
 */
val PG_INIT_PRIVS: PgInitPrivs = PgInitPrivs.PG_INIT_PRIVS

/**
 * The table <code>pg_catalog.pg_language</code>.
 */
val PG_LANGUAGE: PgLanguage = PgLanguage.PG_LANGUAGE

/**
 * The table <code>pg_catalog.pg_largeobject_metadata</code>.
 */
val PG_LARGEOBJECT_METADATA: PgLargeobjectMetadata = PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA

/**
 * The table <code>pg_catalog.pg_listening_channels</code>.
 */
val PG_LISTENING_CHANNELS: PgListeningChannels = PgListeningChannels.PG_LISTENING_CHANNELS

/**
 * Call <code>pg_catalog.pg_listening_channels</code>.
 */
fun PG_LISTENING_CHANNELS(
      configuration: Configuration
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgListeningChannels.PG_LISTENING_CHANNELS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_listening_channels</code> as a table.
 */
fun PG_LISTENING_CHANNELS(): PgListeningChannels = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgListeningChannels.PG_LISTENING_CHANNELS.call(
)

/**
 * The table <code>pg_catalog.pg_lock_status</code>.
 */
val PG_LOCK_STATUS: PgLockStatus = PgLockStatus.PG_LOCK_STATUS

/**
 * Call <code>pg_catalog.pg_lock_status</code>.
 */
fun PG_LOCK_STATUS(
      configuration: Configuration
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLockStatus.PG_LOCK_STATUS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_lock_status</code> as a table.
 */
fun PG_LOCK_STATUS(): PgLockStatus = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLockStatus.PG_LOCK_STATUS.call(
)

/**
 * The table <code>pg_catalog.pg_locks</code>.
 */
val PG_LOCKS: PgLocks = PgLocks.PG_LOCKS

/**
 * The table <code>pg_catalog.pg_logical_slot_get_binary_changes</code>.
 */
val PG_LOGICAL_SLOT_GET_BINARY_CHANGES: PgLogicalSlotGetBinaryChanges = PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_LOGICAL_SLOT_GET_BINARY_CHANGES(
      configuration: Configuration
    , slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(
      slotName
    , uptoLsn
    , uptoNchanges
    , options
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_LOGICAL_SLOT_GET_BINARY_CHANGES(
      slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): PgLogicalSlotGetBinaryChanges = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_LOGICAL_SLOT_GET_BINARY_CHANGES(
      slotName: Field<String?>
    , uptoLsn: Field<Any?>
    , uptoNchanges: Field<Int?>
    , options: Field<Array<String?>?>
): PgLogicalSlotGetBinaryChanges = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)

/**
 * The table <code>pg_catalog.pg_logical_slot_get_changes</code>.
 */
val PG_LOGICAL_SLOT_GET_CHANGES: PgLogicalSlotGetChanges = PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_LOGICAL_SLOT_GET_CHANGES(
      configuration: Configuration
    , slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(
      slotName
    , uptoLsn
    , uptoNchanges
    , options
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_LOGICAL_SLOT_GET_CHANGES(
      slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): PgLogicalSlotGetChanges = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_LOGICAL_SLOT_GET_CHANGES(
      slotName: Field<String?>
    , uptoLsn: Field<Any?>
    , uptoNchanges: Field<Int?>
    , options: Field<Array<String?>?>
): PgLogicalSlotGetChanges = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)

/**
 * The table <code>pg_catalog.pg_logical_slot_peek_binary_changes</code>.
 */
val PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES: PgLogicalSlotPeekBinaryChanges = PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES(
      configuration: Configuration
    , slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(
      slotName
    , uptoLsn
    , uptoNchanges
    , options
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES(
      slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): PgLogicalSlotPeekBinaryChanges = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES(
      slotName: Field<String?>
    , uptoLsn: Field<Any?>
    , uptoNchanges: Field<Int?>
    , options: Field<Array<String?>?>
): PgLogicalSlotPeekBinaryChanges = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)

/**
 * The table <code>pg_catalog.pg_logical_slot_peek_changes</code>.
 */
val PG_LOGICAL_SLOT_PEEK_CHANGES: PgLogicalSlotPeekChanges = PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_LOGICAL_SLOT_PEEK_CHANGES(
      configuration: Configuration
    , slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(
      slotName
    , uptoLsn
    , uptoNchanges
    , options
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_LOGICAL_SLOT_PEEK_CHANGES(
      slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): PgLogicalSlotPeekChanges = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_LOGICAL_SLOT_PEEK_CHANGES(
      slotName: Field<String?>
    , uptoLsn: Field<Any?>
    , uptoNchanges: Field<Int?>
    , options: Field<Array<String?>?>
): PgLogicalSlotPeekChanges = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)

/**
 * The table <code>pg_catalog.pg_matviews</code>.
 */
val PG_MATVIEWS: PgMatviews = PgMatviews.PG_MATVIEWS

/**
 * The table <code>pg_catalog.pg_mcv_list_items</code>.
 */
val PG_MCV_LIST_ITEMS: PgMcvListItems = PgMcvListItems.PG_MCV_LIST_ITEMS
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_MCV_LIST_ITEMS(
      configuration: Configuration
    , mcvList: Any?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgMcvListItems.PG_MCV_LIST_ITEMS.call(
      mcvList
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_MCV_LIST_ITEMS(
      mcvList: Any?
): PgMcvListItems = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgMcvListItems.PG_MCV_LIST_ITEMS.call(
    mcvList
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_MCV_LIST_ITEMS(
      mcvList: Field<Any?>
): PgMcvListItems = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgMcvListItems.PG_MCV_LIST_ITEMS.call(
    mcvList
)

/**
 * The table <code>pg_catalog.pg_namespace</code>.
 */
val PG_NAMESPACE: PgNamespace = PgNamespace.PG_NAMESPACE

/**
 * The table <code>pg_catalog.pg_opclass</code>.
 */
val PG_OPCLASS: PgOpclass = PgOpclass.PG_OPCLASS

/**
 * The table <code>pg_catalog.pg_operator</code>.
 */
val PG_OPERATOR: PgOperator = PgOperator.PG_OPERATOR

/**
 * The table <code>pg_catalog.pg_opfamily</code>.
 */
val PG_OPFAMILY: PgOpfamily = PgOpfamily.PG_OPFAMILY

/**
 * The table <code>pg_catalog.pg_options_to_table</code>.
 */
val PG_OPTIONS_TO_TABLE: PgOptionsToTable = PgOptionsToTable.PG_OPTIONS_TO_TABLE

/**
 * Call <code>pg_catalog.pg_options_to_table</code>.
 */
fun PG_OPTIONS_TO_TABLE(
      configuration: Configuration
    , optionsArray: Array<String?>?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(
      optionsArray
)).fetch()

/**
 * Get <code>pg_catalog.pg_options_to_table</code> as a table.
 */
fun PG_OPTIONS_TO_TABLE(
      optionsArray: Array<String?>?
): PgOptionsToTable = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(
    optionsArray
)

/**
 * Get <code>pg_catalog.pg_options_to_table</code> as a table.
 */
fun PG_OPTIONS_TO_TABLE(
      optionsArray: Field<Array<String?>?>
): PgOptionsToTable = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(
    optionsArray
)

/**
 * The table <code>pg_catalog.pg_partition_ancestors</code>.
 */
val PG_PARTITION_ANCESTORS: PgPartitionAncestors = PgPartitionAncestors.PG_PARTITION_ANCESTORS
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_PARTITION_ANCESTORS(
      configuration: Configuration
    , partitionid: Any?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPartitionAncestors.PG_PARTITION_ANCESTORS.call(
      partitionid
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_PARTITION_ANCESTORS(
      partitionid: Any?
): PgPartitionAncestors = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPartitionAncestors.PG_PARTITION_ANCESTORS.call(
    partitionid
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_PARTITION_ANCESTORS(
      partitionid: Field<Any?>
): PgPartitionAncestors = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPartitionAncestors.PG_PARTITION_ANCESTORS.call(
    partitionid
)

/**
 * The table <code>pg_catalog.pg_partition_tree</code>.
 */
val PG_PARTITION_TREE: PgPartitionTree = PgPartitionTree.PG_PARTITION_TREE
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_PARTITION_TREE(
      configuration: Configuration
    , rootrelid: Any?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPartitionTree.PG_PARTITION_TREE.call(
      rootrelid
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_PARTITION_TREE(
      rootrelid: Any?
): PgPartitionTree = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPartitionTree.PG_PARTITION_TREE.call(
    rootrelid
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun PG_PARTITION_TREE(
      rootrelid: Field<Any?>
): PgPartitionTree = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPartitionTree.PG_PARTITION_TREE.call(
    rootrelid
)

/**
 * The table <code>pg_catalog.pg_partitioned_table</code>.
 */
val PG_PARTITIONED_TABLE: PgPartitionedTable = PgPartitionedTable.PG_PARTITIONED_TABLE

/**
 * The table <code>pg_catalog.pg_pltemplate</code>.
 */
val PG_PLTEMPLATE: PgPltemplate = PgPltemplate.PG_PLTEMPLATE

/**
 * The table <code>pg_catalog.pg_policies</code>.
 */
val PG_POLICIES: PgPolicies = PgPolicies.PG_POLICIES

/**
 * The table <code>pg_catalog.pg_policy</code>.
 */
val PG_POLICY: PgPolicy = PgPolicy.PG_POLICY

/**
 * The table <code>pg_catalog.pg_prepared_statement</code>.
 */
val PG_PREPARED_STATEMENT: PgPreparedStatement = PgPreparedStatement.PG_PREPARED_STATEMENT

/**
 * Call <code>pg_catalog.pg_prepared_statement</code>.
 */
fun PG_PREPARED_STATEMENT(
      configuration: Configuration
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPreparedStatement.PG_PREPARED_STATEMENT.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_prepared_statement</code> as a table.
 */
fun PG_PREPARED_STATEMENT(): PgPreparedStatement = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPreparedStatement.PG_PREPARED_STATEMENT.call(
)

/**
 * The table <code>pg_catalog.pg_prepared_statements</code>.
 */
val PG_PREPARED_STATEMENTS: PgPreparedStatements = PgPreparedStatements.PG_PREPARED_STATEMENTS

/**
 * The table <code>pg_catalog.pg_prepared_xact</code>.
 */
val PG_PREPARED_XACT: PgPreparedXact = PgPreparedXact.PG_PREPARED_XACT

/**
 * Call <code>pg_catalog.pg_prepared_xact</code>.
 */
fun PG_PREPARED_XACT(
      configuration: Configuration
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPreparedXact.PG_PREPARED_XACT.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_prepared_xact</code> as a table.
 */
fun PG_PREPARED_XACT(): PgPreparedXact = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgPreparedXact.PG_PREPARED_XACT.call(
)

/**
 * The table <code>pg_catalog.pg_prepared_xacts</code>.
 */
val PG_PREPARED_XACTS: PgPreparedXacts = PgPreparedXacts.PG_PREPARED_XACTS

/**
 * The table <code>pg_catalog.pg_proc</code>.
 */
val PG_PROC: PgProc = PgProc.PG_PROC

/**
 * The table <code>pg_catalog.pg_publication</code>.
 */
val PG_PUBLICATION: PgPublication = PgPublication.PG_PUBLICATION

/**
 * The table <code>pg_catalog.pg_publication_rel</code>.
 */
val PG_PUBLICATION_REL: PgPublicationRel = PgPublicationRel.PG_PUBLICATION_REL

/**
 * The table <code>pg_catalog.pg_publication_tables</code>.
 */
val PG_PUBLICATION_TABLES: PgPublicationTables = PgPublicationTables.PG_PUBLICATION_TABLES

/**
 * The table <code>pg_catalog.pg_range</code>.
 */
val PG_RANGE: PgRange = PgRange.PG_RANGE

/**
 * The table <code>pg_catalog.pg_replication_origin</code>.
 */
val PG_REPLICATION_ORIGIN: PgReplicationOrigin = PgReplicationOrigin.PG_REPLICATION_ORIGIN

/**
 * The table <code>pg_catalog.pg_replication_slots</code>.
 */
val PG_REPLICATION_SLOTS: PgReplicationSlots = PgReplicationSlots.PG_REPLICATION_SLOTS

/**
 * The table <code>pg_catalog.pg_rewrite</code>.
 */
val PG_REWRITE: PgRewrite = PgRewrite.PG_REWRITE

/**
 * The table <code>pg_catalog.pg_roles</code>.
 */
val PG_ROLES: PgRoles = PgRoles.PG_ROLES

/**
 * The table <code>pg_catalog.pg_rules</code>.
 */
val PG_RULES: PgRules = PgRules.PG_RULES

/**
 * The table <code>pg_catalog.pg_seclabel</code>.
 */
val PG_SECLABEL: PgSeclabel = PgSeclabel.PG_SECLABEL

/**
 * The table <code>pg_catalog.pg_seclabels</code>.
 */
val PG_SECLABELS: PgSeclabels = PgSeclabels.PG_SECLABELS

/**
 * The table <code>pg_catalog.pg_sequence</code>.
 */
val PG_SEQUENCE: PgSequence = PgSequence.PG_SEQUENCE

/**
 * The table <code>pg_catalog.pg_sequences</code>.
 */
val PG_SEQUENCES: PgSequences = PgSequences.PG_SEQUENCES

/**
 * The table <code>pg_catalog.pg_settings</code>.
 */
val PG_SETTINGS: PgSettings = PgSettings.PG_SETTINGS

/**
 * The table <code>pg_catalog.pg_shdepend</code>.
 */
val PG_SHDEPEND: PgShdepend = PgShdepend.PG_SHDEPEND

/**
 * The table <code>pg_catalog.pg_shdescription</code>.
 */
val PG_SHDESCRIPTION: PgShdescription = PgShdescription.PG_SHDESCRIPTION

/**
 * The table <code>pg_catalog.pg_show_all_settings</code>.
 */
val PG_SHOW_ALL_SETTINGS: PgShowAllSettings = PgShowAllSettings.PG_SHOW_ALL_SETTINGS

/**
 * Call <code>pg_catalog.pg_show_all_settings</code>.
 */
fun PG_SHOW_ALL_SETTINGS(
      configuration: Configuration
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgShowAllSettings.PG_SHOW_ALL_SETTINGS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_show_all_settings</code> as a table.
 */
fun PG_SHOW_ALL_SETTINGS(): PgShowAllSettings = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgShowAllSettings.PG_SHOW_ALL_SETTINGS.call(
)

/**
 * The table <code>pg_catalog.pg_show_replication_origin_status</code>.
 */
val PG_SHOW_REPLICATION_ORIGIN_STATUS: PgShowReplicationOriginStatus = PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS

/**
 * Call <code>pg_catalog.pg_show_replication_origin_status</code>.
 */
fun PG_SHOW_REPLICATION_ORIGIN_STATUS(
      configuration: Configuration
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_show_replication_origin_status</code> as a table.
 */
fun PG_SHOW_REPLICATION_ORIGIN_STATUS(): PgShowReplicationOriginStatus = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS.call(
)

/**
 * The table <code>pg_catalog.pg_shseclabel</code>.
 */
val PG_SHSECLABEL: PgShseclabel = PgShseclabel.PG_SHSECLABEL

/**
 * The table <code>pg_catalog.pg_stat_activity</code>.
 */
val PG_STAT_ACTIVITY: PgStatActivity = PgStatActivity.PG_STAT_ACTIVITY

/**
 * The table <code>pg_catalog.pg_stat_all_indexes</code>.
 */
val PG_STAT_ALL_INDEXES: PgStatAllIndexes = PgStatAllIndexes.PG_STAT_ALL_INDEXES

/**
 * The table <code>pg_catalog.pg_stat_all_tables</code>.
 */
val PG_STAT_ALL_TABLES: PgStatAllTables = PgStatAllTables.PG_STAT_ALL_TABLES

/**
 * The table <code>pg_catalog.pg_stat_archiver</code>.
 */
val PG_STAT_ARCHIVER: PgStatArchiver = PgStatArchiver.PG_STAT_ARCHIVER

/**
 * The table <code>pg_catalog.pg_stat_bgwriter</code>.
 */
val PG_STAT_BGWRITER: PgStatBgwriter = PgStatBgwriter.PG_STAT_BGWRITER

/**
 * The table <code>pg_catalog.pg_stat_database</code>.
 */
val PG_STAT_DATABASE: PgStatDatabase = PgStatDatabase.PG_STAT_DATABASE

/**
 * The table <code>pg_catalog.pg_stat_database_conflicts</code>.
 */
val PG_STAT_DATABASE_CONFLICTS: PgStatDatabaseConflicts = PgStatDatabaseConflicts.PG_STAT_DATABASE_CONFLICTS

/**
 * The table <code>pg_catalog.pg_stat_get_activity</code>.
 */
val PG_STAT_GET_ACTIVITY: PgStatGetActivity = PgStatGetActivity.PG_STAT_GET_ACTIVITY

/**
 * Call <code>pg_catalog.pg_stat_get_activity</code>.
 */
fun PG_STAT_GET_ACTIVITY(
      configuration: Configuration
    , pid: Int?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(
      pid
)).fetch()

/**
 * Get <code>pg_catalog.pg_stat_get_activity</code> as a table.
 */
fun PG_STAT_GET_ACTIVITY(
      pid: Int?
): PgStatGetActivity = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(
    pid
)

/**
 * Get <code>pg_catalog.pg_stat_get_activity</code> as a table.
 */
fun PG_STAT_GET_ACTIVITY(
      pid: Field<Int?>
): PgStatGetActivity = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(
    pid
)

/**
 * The table <code>pg_catalog.pg_stat_get_backend_idset</code>.
 */
val PG_STAT_GET_BACKEND_IDSET: PgStatGetBackendIdset = PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET

/**
 * Call <code>pg_catalog.pg_stat_get_backend_idset</code>.
 */
fun PG_STAT_GET_BACKEND_IDSET(
      configuration: Configuration
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_stat_get_backend_idset</code> as a table.
 */
fun PG_STAT_GET_BACKEND_IDSET(): PgStatGetBackendIdset = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET.call(
)

/**
 * The table <code>pg_catalog.pg_stat_get_progress_info</code>.
 */
val PG_STAT_GET_PROGRESS_INFO: PgStatGetProgressInfo = PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO

/**
 * Call <code>pg_catalog.pg_stat_get_progress_info</code>.
 */
fun PG_STAT_GET_PROGRESS_INFO(
      configuration: Configuration
    , cmdtype: String?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(
      cmdtype
)).fetch()

/**
 * Get <code>pg_catalog.pg_stat_get_progress_info</code> as a table.
 */
fun PG_STAT_GET_PROGRESS_INFO(
      cmdtype: String?
): PgStatGetProgressInfo = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(
    cmdtype
)

/**
 * Get <code>pg_catalog.pg_stat_get_progress_info</code> as a table.
 */
fun PG_STAT_GET_PROGRESS_INFO(
      cmdtype: Field<String?>
): PgStatGetProgressInfo = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(
    cmdtype
)

/**
 * The table <code>pg_catalog.pg_stat_get_wal_senders</code>.
 */
val PG_STAT_GET_WAL_SENDERS: PgStatGetWalSenders = PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS

/**
 * Call <code>pg_catalog.pg_stat_get_wal_senders</code>.
 */
fun PG_STAT_GET_WAL_SENDERS(
      configuration: Configuration
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_stat_get_wal_senders</code> as a table.
 */
fun PG_STAT_GET_WAL_SENDERS(): PgStatGetWalSenders = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS.call(
)

/**
 * The table <code>pg_catalog.pg_stat_gssapi</code>.
 */
val PG_STAT_GSSAPI: PgStatGssapi = PgStatGssapi.PG_STAT_GSSAPI

/**
 * The table <code>pg_catalog.pg_stat_progress_cluster</code>.
 */
val PG_STAT_PROGRESS_CLUSTER: PgStatProgressCluster = PgStatProgressCluster.PG_STAT_PROGRESS_CLUSTER

/**
 * The table <code>pg_catalog.pg_stat_progress_create_index</code>.
 */
val PG_STAT_PROGRESS_CREATE_INDEX: PgStatProgressCreateIndex = PgStatProgressCreateIndex.PG_STAT_PROGRESS_CREATE_INDEX

/**
 * The table <code>pg_catalog.pg_stat_progress_vacuum</code>.
 */
val PG_STAT_PROGRESS_VACUUM: PgStatProgressVacuum = PgStatProgressVacuum.PG_STAT_PROGRESS_VACUUM

/**
 * The table <code>pg_catalog.pg_stat_replication</code>.
 */
val PG_STAT_REPLICATION: PgStatReplication = PgStatReplication.PG_STAT_REPLICATION

/**
 * The table <code>pg_catalog.pg_stat_ssl</code>.
 */
val PG_STAT_SSL: PgStatSsl = PgStatSsl.PG_STAT_SSL

/**
 * The table <code>pg_catalog.pg_stat_subscription</code>.
 */
val PG_STAT_SUBSCRIPTION: PgStatSubscription = PgStatSubscription.PG_STAT_SUBSCRIPTION

/**
 * The table <code>pg_catalog.pg_stat_sys_indexes</code>.
 */
val PG_STAT_SYS_INDEXES: PgStatSysIndexes = PgStatSysIndexes.PG_STAT_SYS_INDEXES

/**
 * The table <code>pg_catalog.pg_stat_sys_tables</code>.
 */
val PG_STAT_SYS_TABLES: PgStatSysTables = PgStatSysTables.PG_STAT_SYS_TABLES

/**
 * The table <code>pg_catalog.pg_stat_user_functions</code>.
 */
val PG_STAT_USER_FUNCTIONS: PgStatUserFunctions = PgStatUserFunctions.PG_STAT_USER_FUNCTIONS

/**
 * The table <code>pg_catalog.pg_stat_user_indexes</code>.
 */
val PG_STAT_USER_INDEXES: PgStatUserIndexes = PgStatUserIndexes.PG_STAT_USER_INDEXES

/**
 * The table <code>pg_catalog.pg_stat_user_tables</code>.
 */
val PG_STAT_USER_TABLES: PgStatUserTables = PgStatUserTables.PG_STAT_USER_TABLES

/**
 * The table <code>pg_catalog.pg_stat_wal_receiver</code>.
 */
val PG_STAT_WAL_RECEIVER: PgStatWalReceiver = PgStatWalReceiver.PG_STAT_WAL_RECEIVER

/**
 * The table <code>pg_catalog.pg_stat_xact_all_tables</code>.
 */
val PG_STAT_XACT_ALL_TABLES: PgStatXactAllTables = PgStatXactAllTables.PG_STAT_XACT_ALL_TABLES

/**
 * The table <code>pg_catalog.pg_stat_xact_sys_tables</code>.
 */
val PG_STAT_XACT_SYS_TABLES: PgStatXactSysTables = PgStatXactSysTables.PG_STAT_XACT_SYS_TABLES

/**
 * The table <code>pg_catalog.pg_stat_xact_user_functions</code>.
 */
val PG_STAT_XACT_USER_FUNCTIONS: PgStatXactUserFunctions = PgStatXactUserFunctions.PG_STAT_XACT_USER_FUNCTIONS

/**
 * The table <code>pg_catalog.pg_stat_xact_user_tables</code>.
 */
val PG_STAT_XACT_USER_TABLES: PgStatXactUserTables = PgStatXactUserTables.PG_STAT_XACT_USER_TABLES

/**
 * The table <code>pg_catalog.pg_statio_all_indexes</code>.
 */
val PG_STATIO_ALL_INDEXES: PgStatioAllIndexes = PgStatioAllIndexes.PG_STATIO_ALL_INDEXES

/**
 * The table <code>pg_catalog.pg_statio_all_sequences</code>.
 */
val PG_STATIO_ALL_SEQUENCES: PgStatioAllSequences = PgStatioAllSequences.PG_STATIO_ALL_SEQUENCES

/**
 * The table <code>pg_catalog.pg_statio_all_tables</code>.
 */
val PG_STATIO_ALL_TABLES: PgStatioAllTables = PgStatioAllTables.PG_STATIO_ALL_TABLES

/**
 * The table <code>pg_catalog.pg_statio_sys_indexes</code>.
 */
val PG_STATIO_SYS_INDEXES: PgStatioSysIndexes = PgStatioSysIndexes.PG_STATIO_SYS_INDEXES

/**
 * The table <code>pg_catalog.pg_statio_sys_sequences</code>.
 */
val PG_STATIO_SYS_SEQUENCES: PgStatioSysSequences = PgStatioSysSequences.PG_STATIO_SYS_SEQUENCES

/**
 * The table <code>pg_catalog.pg_statio_sys_tables</code>.
 */
val PG_STATIO_SYS_TABLES: PgStatioSysTables = PgStatioSysTables.PG_STATIO_SYS_TABLES

/**
 * The table <code>pg_catalog.pg_statio_user_indexes</code>.
 */
val PG_STATIO_USER_INDEXES: PgStatioUserIndexes = PgStatioUserIndexes.PG_STATIO_USER_INDEXES

/**
 * The table <code>pg_catalog.pg_statio_user_sequences</code>.
 */
val PG_STATIO_USER_SEQUENCES: PgStatioUserSequences = PgStatioUserSequences.PG_STATIO_USER_SEQUENCES

/**
 * The table <code>pg_catalog.pg_statio_user_tables</code>.
 */
val PG_STATIO_USER_TABLES: PgStatioUserTables = PgStatioUserTables.PG_STATIO_USER_TABLES

/**
 * The table <code>pg_catalog.pg_statistic_ext</code>.
 */
val PG_STATISTIC_EXT: PgStatisticExt = PgStatisticExt.PG_STATISTIC_EXT

/**
 * The table <code>pg_catalog.pg_stats</code>.
 */
val PG_STATS: PgStats = PgStats.PG_STATS

/**
 * The table <code>pg_catalog.pg_stats_ext</code>.
 */
val PG_STATS_EXT: PgStatsExt = PgStatsExt.PG_STATS_EXT

/**
 * The table <code>pg_catalog.pg_subscription</code>.
 */
val PG_SUBSCRIPTION: PgSubscription = PgSubscription.PG_SUBSCRIPTION

/**
 * The table <code>pg_catalog.pg_subscription_rel</code>.
 */
val PG_SUBSCRIPTION_REL: PgSubscriptionRel = PgSubscriptionRel.PG_SUBSCRIPTION_REL

/**
 * The table <code>pg_catalog.pg_tables</code>.
 */
val PG_TABLES: PgTables = PgTables.PG_TABLES

/**
 * The table <code>pg_catalog.pg_tablespace</code>.
 */
val PG_TABLESPACE: PgTablespace = PgTablespace.PG_TABLESPACE

/**
 * The table <code>pg_catalog.pg_tablespace_databases</code>.
 */
val PG_TABLESPACE_DATABASES: PgTablespaceDatabases = PgTablespaceDatabases.PG_TABLESPACE_DATABASES

/**
 * Call <code>pg_catalog.pg_tablespace_databases</code>.
 */
fun PG_TABLESPACE_DATABASES(
      configuration: Configuration
    , __1: Long?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(
      __1
)).fetch()

/**
 * Get <code>pg_catalog.pg_tablespace_databases</code> as a table.
 */
fun PG_TABLESPACE_DATABASES(
      __1: Long?
): PgTablespaceDatabases = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(
    __1
)

/**
 * Get <code>pg_catalog.pg_tablespace_databases</code> as a table.
 */
fun PG_TABLESPACE_DATABASES(
      __1: Field<Long?>
): PgTablespaceDatabases = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(
    __1
)

/**
 * The table <code>pg_catalog.pg_timezone_abbrevs</code>.
 */
val PG_TIMEZONE_ABBREVS: PgTimezoneAbbrevs = PgTimezoneAbbrevs.PG_TIMEZONE_ABBREVS

/**
 * The table <code>pg_catalog.pg_timezone_names</code>.
 */
val PG_TIMEZONE_NAMES: PgTimezoneNames = PgTimezoneNames.PG_TIMEZONE_NAMES

/**
 * Call <code>pg_catalog.pg_timezone_names</code>.
 */
fun PG_TIMEZONE_NAMES(
      configuration: Configuration
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTimezoneNames.PG_TIMEZONE_NAMES.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_timezone_names</code> as a table.
 */
fun PG_TIMEZONE_NAMES(): PgTimezoneNames = fi.hsl.jore.jore4.jooq.pg_catalog.tables.PgTimezoneNames.PG_TIMEZONE_NAMES.call(
)

/**
 * The table <code>pg_catalog.pg_transform</code>.
 */
val PG_TRANSFORM: PgTransform = PgTransform.PG_TRANSFORM

/**
 * The table <code>pg_catalog.pg_trigger</code>.
 */
val PG_TRIGGER: PgTrigger = PgTrigger.PG_TRIGGER

/**
 * The table <code>pg_catalog.pg_ts_config</code>.
 */
val PG_TS_CONFIG: PgTsConfig = PgTsConfig.PG_TS_CONFIG

/**
 * The table <code>pg_catalog.pg_ts_config_map</code>.
 */
val PG_TS_CONFIG_MAP: PgTsConfigMap = PgTsConfigMap.PG_TS_CONFIG_MAP

/**
 * The table <code>pg_catalog.pg_ts_dict</code>.
 */
val PG_TS_DICT: PgTsDict = PgTsDict.PG_TS_DICT

/**
 * The table <code>pg_catalog.pg_ts_parser</code>.
 */
val PG_TS_PARSER: PgTsParser = PgTsParser.PG_TS_PARSER

/**
 * The table <code>pg_catalog.pg_ts_template</code>.
 */
val PG_TS_TEMPLATE: PgTsTemplate = PgTsTemplate.PG_TS_TEMPLATE

/**
 * The table <code>pg_catalog.pg_type</code>.
 */
val PG_TYPE: PgType = PgType.PG_TYPE

/**
 * The table <code>pg_catalog.pg_user</code>.
 */
val PG_USER: PgUser = PgUser.PG_USER

/**
 * The table <code>pg_catalog.pg_user_mappings</code>.
 */
val PG_USER_MAPPINGS: PgUserMappings = PgUserMappings.PG_USER_MAPPINGS

/**
 * The table <code>pg_catalog.pg_views</code>.
 */
val PG_VIEWS: PgViews = PgViews.PG_VIEWS

/**
 * The table <code>pg_catalog.regexp_matches</code>.
 */
val REGEXP_MATCHES: RegexpMatches = RegexpMatches.REGEXP_MATCHES

/**
 * Call <code>pg_catalog.regexp_matches</code>.
 */
fun REGEXP_MATCHES(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(
      __1
    , __2
    , __3
)).fetch()

/**
 * Get <code>pg_catalog.regexp_matches</code> as a table.
 */
fun REGEXP_MATCHES(
      __1: String?
    , __2: String?
    , __3: String?
): RegexpMatches = fi.hsl.jore.jore4.jooq.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(
    __1,
    __2,
    __3
)

/**
 * Get <code>pg_catalog.regexp_matches</code> as a table.
 */
fun REGEXP_MATCHES(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): RegexpMatches = fi.hsl.jore.jore4.jooq.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(
    __1,
    __2,
    __3
)

/**
 * The table <code>pg_catalog.regexp_split_to_table</code>.
 */
val REGEXP_SPLIT_TO_TABLE: RegexpSplitToTable = RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE

/**
 * Call <code>pg_catalog.regexp_split_to_table</code>.
 */
fun REGEXP_SPLIT_TO_TABLE(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
      __1
    , __2
)).fetch()

/**
 * Get <code>pg_catalog.regexp_split_to_table</code> as a table.
 */
fun REGEXP_SPLIT_TO_TABLE(
      __1: String?
    , __2: String?
): RegexpSplitToTable = fi.hsl.jore.jore4.jooq.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
    __1,
    __2
)

/**
 * Get <code>pg_catalog.regexp_split_to_table</code> as a table.
 */
fun REGEXP_SPLIT_TO_TABLE(
      __1: Field<String?>
    , __2: Field<String?>
): RegexpSplitToTable = fi.hsl.jore.jore4.jooq.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
    __1,
    __2
)

/**
 * The table <code>pg_catalog.ts_debug</code>.
 */
val TS_DEBUG: TsDebug = TsDebug.TS_DEBUG
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun TS_DEBUG(
      configuration: Configuration
    , config: Any?
    , document: String?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsDebug.TS_DEBUG.call(
      config
    , document
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun TS_DEBUG(
      config: Any?
    , document: String?
): TsDebug = fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsDebug.TS_DEBUG.call(
    config,
    document
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun TS_DEBUG(
      config: Field<Any?>
    , document: Field<String?>
): TsDebug = fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsDebug.TS_DEBUG.call(
    config,
    document
)

/**
 * The table <code>pg_catalog.ts_parse</code>.
 */
val TS_PARSE: TsParse = TsParse.TS_PARSE

/**
 * Call <code>pg_catalog.ts_parse</code>.
 */
fun TS_PARSE(
      configuration: Configuration
    , parserOid: Long?
    , txt: String?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsParse.TS_PARSE.call(
      parserOid
    , txt
)).fetch()

/**
 * Get <code>pg_catalog.ts_parse</code> as a table.
 */
fun TS_PARSE(
      parserOid: Long?
    , txt: String?
): TsParse = fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsParse.TS_PARSE.call(
    parserOid,
    txt
)

/**
 * Get <code>pg_catalog.ts_parse</code> as a table.
 */
fun TS_PARSE(
      parserOid: Field<Long?>
    , txt: Field<String?>
): TsParse = fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsParse.TS_PARSE.call(
    parserOid,
    txt
)

/**
 * The table <code>pg_catalog.ts_stat</code>.
 */
val TS_STAT: TsStat = TsStat.TS_STAT

/**
 * Call <code>pg_catalog.ts_stat</code>.
 */
fun TS_STAT(
      configuration: Configuration
    , query: String?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsStat.TS_STAT.call(
      query
)).fetch()

/**
 * Get <code>pg_catalog.ts_stat</code> as a table.
 */
fun TS_STAT(
      query: String?
): TsStat = fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsStat.TS_STAT.call(
    query
)

/**
 * Get <code>pg_catalog.ts_stat</code> as a table.
 */
fun TS_STAT(
      query: Field<String?>
): TsStat = fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsStat.TS_STAT.call(
    query
)

/**
 * The table <code>pg_catalog.ts_token_type</code>.
 */
val TS_TOKEN_TYPE: TsTokenType = TsTokenType.TS_TOKEN_TYPE

/**
 * Call <code>pg_catalog.ts_token_type</code>.
 */
fun TS_TOKEN_TYPE(
      configuration: Configuration
    , parserName: String?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(
      parserName
)).fetch()

/**
 * Get <code>pg_catalog.ts_token_type</code> as a table.
 */
fun TS_TOKEN_TYPE(
      parserName: String?
): TsTokenType = fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(
    parserName
)

/**
 * Get <code>pg_catalog.ts_token_type</code> as a table.
 */
fun TS_TOKEN_TYPE(
      parserName: Field<String?>
): TsTokenType = fi.hsl.jore.jore4.jooq.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(
    parserName
)

/**
 * The table <code>pg_catalog.txid_snapshot_xip</code>.
 */
val TXID_SNAPSHOT_XIP: TxidSnapshotXip = TxidSnapshotXip.TXID_SNAPSHOT_XIP
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun TXID_SNAPSHOT_XIP(
      configuration: Configuration
    , __1: Any?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(
      __1
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun TXID_SNAPSHOT_XIP(
      __1: Any?
): TxidSnapshotXip = fi.hsl.jore.jore4.jooq.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(
    __1
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun TXID_SNAPSHOT_XIP(
      __1: Field<Any?>
): TxidSnapshotXip = fi.hsl.jore.jore4.jooq.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(
    __1
)

/**
 * The table <code>pg_catalog.unnest</code>.
 */
val UNNEST: Unnest = Unnest.UNNEST

/**
 * Call <code>pg_catalog.unnest</code>.
 */
fun UNNEST(
      configuration: Configuration
    , __1: Array<Any?>?
): Result<Record> = configuration.dsl().selectFrom(fi.hsl.jore.jore4.jooq.pg_catalog.tables.Unnest.UNNEST.call(
      __1
)).fetch()

/**
 * Get <code>pg_catalog.unnest</code> as a table.
 */
fun UNNEST(
      __1: Array<Any?>?
): Unnest = fi.hsl.jore.jore4.jooq.pg_catalog.tables.Unnest.UNNEST.call(
    __1
)

/**
 * Get <code>pg_catalog.unnest</code> as a table.
 */
fun UNNEST(
      __1: Field<Array<Any?>?>
): Unnest = fi.hsl.jore.jore4.jooq.pg_catalog.tables.Unnest.UNNEST.call(
    __1
)
