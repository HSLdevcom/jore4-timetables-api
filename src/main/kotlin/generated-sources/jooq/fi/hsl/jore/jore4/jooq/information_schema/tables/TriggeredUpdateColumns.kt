/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.information_schema.tables


import fi.hsl.jore.jore4.jooq.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TriggeredUpdateColumns(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view()
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.triggered_update_columns</code>
         */
        val TRIGGERED_UPDATE_COLUMNS: TriggeredUpdateColumns = TriggeredUpdateColumns()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>information_schema.triggered_update_columns.trigger_catalog</code>.
     */
    val TRIGGER_CATALOG: TableField<Record, String?> = createField(DSL.name("trigger_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>information_schema.triggered_update_columns.trigger_schema</code>.
     */
    val TRIGGER_SCHEMA: TableField<Record, String?> = createField(DSL.name("trigger_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>information_schema.triggered_update_columns.trigger_name</code>.
     */
    val TRIGGER_NAME: TableField<Record, String?> = createField(DSL.name("trigger_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>information_schema.triggered_update_columns.event_object_catalog</code>.
     */
    val EVENT_OBJECT_CATALOG: TableField<Record, String?> = createField(DSL.name("event_object_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>information_schema.triggered_update_columns.event_object_schema</code>.
     */
    val EVENT_OBJECT_SCHEMA: TableField<Record, String?> = createField(DSL.name("event_object_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>information_schema.triggered_update_columns.event_object_table</code>.
     */
    val EVENT_OBJECT_TABLE: TableField<Record, String?> = createField(DSL.name("event_object_table"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>information_schema.triggered_update_columns.event_object_column</code>.
     */
    val EVENT_OBJECT_COLUMN: TableField<Record, String?> = createField(DSL.name("event_object_column"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased
     * <code>information_schema.triggered_update_columns</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>information_schema.triggered_update_columns</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.triggered_update_columns</code> table
     * reference
     */
    constructor(): this(DSL.name("triggered_update_columns"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, TRIGGERED_UPDATE_COLUMNS, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): TriggeredUpdateColumns = TriggeredUpdateColumns(DSL.name(alias), this)
    override fun `as`(alias: Name): TriggeredUpdateColumns = TriggeredUpdateColumns(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TriggeredUpdateColumns = TriggeredUpdateColumns(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TriggeredUpdateColumns = TriggeredUpdateColumns(name, null)
}
