/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.return_value


import fi.hsl.jore.jore4.jooq.DefaultCatalog
import fi.hsl.jore.jore4.jooq.return_value.tables.TimetableVersion

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ReturnValue : SchemaImpl("return_value", DefaultCatalog.DEFAULT_CATALOG) {
    public companion object {

        /**
         * The reference instance of <code>return_value</code>
         */
        val RETURN_VALUE: ReturnValue = ReturnValue()
    }

    /**
     * This return value is used for functions that determine what timetable
     * versions are in effect. In effect will be true for all the timetable
     * version rows that
     * are valid on given observation day and are the highest priority of that
     * day type. As an example if we have:
     * Saturday Standard priority valid for 1.1.2023 - 30.6.2023
     * Saturday Temporary priority valid for 1.5.2023 - 31.5.2023
     * Saturday Special priority valid for 20.5.2023 - 20.5.2023
     * 
     * If we check the timetable versions for the date 1.2.2023, for Saturday we
     * only get the Standard priority, beacuse it is the only one valid on that
     * time. So that 
     * row would have in_effect = true. 
     * If we check the timetable versions for the date 1.5.2023, for Saturday we
     * would get the Standard and the Temporary priority for this date, as they
     * are both valid.
     * But only the higher priority is in effect on this date. So the Saturday
     * Temporary priority would have in_effect = true, and the Saturday Standard
     * priority would 
     * have in_effect = false.
     * If we check the timetable versions for the date 20.5.2023, for Saturday
     * we have all three valid, but only one can be in_effect, and that would be
     * the Special 
     * priority in this case.

     */
    val TIMETABLE_VERSION: TimetableVersion get() = TimetableVersion.TIMETABLE_VERSION

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        TimetableVersion.TIMETABLE_VERSION
    )
}
