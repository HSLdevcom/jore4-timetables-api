/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.information_schema.tables


import fi.hsl.jore.jore4.jooq.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Attributes(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view()
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.attributes</code>
         */
        val ATTRIBUTES: Attributes = Attributes()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.attributes.udt_catalog</code>.
     */
    val UDT_CATALOG: TableField<Record, String?> = createField(DSL.name("udt_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.udt_schema</code>.
     */
    val UDT_SCHEMA: TableField<Record, String?> = createField(DSL.name("udt_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.udt_name</code>.
     */
    val UDT_NAME: TableField<Record, String?> = createField(DSL.name("udt_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.attribute_name</code>.
     */
    val ATTRIBUTE_NAME: TableField<Record, String?> = createField(DSL.name("attribute_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.ordinal_position</code>.
     */
    val ORDINAL_POSITION: TableField<Record, Int?> = createField(DSL.name("ordinal_position"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.attributes.attribute_default</code>.
     */
    val ATTRIBUTE_DEFAULT: TableField<Record, String?> = createField(DSL.name("attribute_default"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.is_nullable</code>.
     */
    val IS_NULLABLE: TableField<Record, String?> = createField(DSL.name("is_nullable"), SQLDataType.VARCHAR(3), this, "")

    /**
     * The column <code>information_schema.attributes.data_type</code>.
     */
    val DATA_TYPE: TableField<Record, String?> = createField(DSL.name("data_type"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>information_schema.attributes.character_maximum_length</code>.
     */
    val CHARACTER_MAXIMUM_LENGTH: TableField<Record, Int?> = createField(DSL.name("character_maximum_length"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>information_schema.attributes.character_octet_length</code>.
     */
    val CHARACTER_OCTET_LENGTH: TableField<Record, Int?> = createField(DSL.name("character_octet_length"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>information_schema.attributes.character_set_catalog</code>.
     */
    val CHARACTER_SET_CATALOG: TableField<Record, String?> = createField(DSL.name("character_set_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>information_schema.attributes.character_set_schema</code>.
     */
    val CHARACTER_SET_SCHEMA: TableField<Record, String?> = createField(DSL.name("character_set_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.character_set_name</code>.
     */
    val CHARACTER_SET_NAME: TableField<Record, String?> = createField(DSL.name("character_set_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.collation_catalog</code>.
     */
    val COLLATION_CATALOG: TableField<Record, String?> = createField(DSL.name("collation_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.collation_schema</code>.
     */
    val COLLATION_SCHEMA: TableField<Record, String?> = createField(DSL.name("collation_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.collation_name</code>.
     */
    val COLLATION_NAME: TableField<Record, String?> = createField(DSL.name("collation_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.numeric_precision</code>.
     */
    val NUMERIC_PRECISION: TableField<Record, Int?> = createField(DSL.name("numeric_precision"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>information_schema.attributes.numeric_precision_radix</code>.
     */
    val NUMERIC_PRECISION_RADIX: TableField<Record, Int?> = createField(DSL.name("numeric_precision_radix"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.attributes.numeric_scale</code>.
     */
    val NUMERIC_SCALE: TableField<Record, Int?> = createField(DSL.name("numeric_scale"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.attributes.datetime_precision</code>.
     */
    val DATETIME_PRECISION: TableField<Record, Int?> = createField(DSL.name("datetime_precision"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.attributes.interval_type</code>.
     */
    val INTERVAL_TYPE: TableField<Record, String?> = createField(DSL.name("interval_type"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.interval_precision</code>.
     */
    val INTERVAL_PRECISION: TableField<Record, Int?> = createField(DSL.name("interval_precision"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>information_schema.attributes.attribute_udt_catalog</code>.
     */
    val ATTRIBUTE_UDT_CATALOG: TableField<Record, String?> = createField(DSL.name("attribute_udt_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>information_schema.attributes.attribute_udt_schema</code>.
     */
    val ATTRIBUTE_UDT_SCHEMA: TableField<Record, String?> = createField(DSL.name("attribute_udt_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.attribute_udt_name</code>.
     */
    val ATTRIBUTE_UDT_NAME: TableField<Record, String?> = createField(DSL.name("attribute_udt_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.scope_catalog</code>.
     */
    val SCOPE_CATALOG: TableField<Record, String?> = createField(DSL.name("scope_catalog"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.scope_schema</code>.
     */
    val SCOPE_SCHEMA: TableField<Record, String?> = createField(DSL.name("scope_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>information_schema.attributes.scope_name</code>.
     */
    val SCOPE_NAME: TableField<Record, String?> = createField(DSL.name("scope_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>information_schema.attributes.maximum_cardinality</code>.
     */
    val MAXIMUM_CARDINALITY: TableField<Record, Int?> = createField(DSL.name("maximum_cardinality"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.attributes.dtd_identifier</code>.
     */
    val DTD_IDENTIFIER: TableField<Record, String?> = createField(DSL.name("dtd_identifier"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>information_schema.attributes.is_derived_reference_attribute</code>.
     */
    val IS_DERIVED_REFERENCE_ATTRIBUTE: TableField<Record, String?> = createField(DSL.name("is_derived_reference_attribute"), SQLDataType.VARCHAR(3), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.attributes</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.attributes</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.attributes</code> table reference
     */
    constructor(): this(DSL.name("attributes"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, ATTRIBUTES, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Attributes = Attributes(DSL.name(alias), this)
    override fun `as`(alias: Name): Attributes = Attributes(alias, this)
    override fun `as`(alias: Table<*>): Attributes = Attributes(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Attributes = Attributes(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Attributes = Attributes(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Attributes = Attributes(name.getQualifiedName(), null)
}
